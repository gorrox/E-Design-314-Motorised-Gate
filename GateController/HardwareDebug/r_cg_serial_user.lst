   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_ir_rxMessage,2,2
  28                             		.comm	_dataReady,1,1
  29                             		.comm	_dataPrint,1,1
  30                             		.comm	_dataResponse,1,1
  31                             		.comm	_ADC_done,1,1
  32                             		.comm	_ADC_value,8,2
  33                             		.comm	_INTAD_FSM_state,1,1
  34                             		.comm	_adc_ready,1,1
  35                             		.comm	_latest_current_reading,1,1
  36                             		.comm	_ADC_counter,1,1
  37                             		.comm	_timer_adc_reader_10Hz_interrupt,1,1
  38                             		.comm	_initial_current,1,1
  39                             		.comm	_collision_det_counter,1,1
  40                             		.comm	_collision_det,1,1
  41                             		.comm	_gate_status,2,2
  42                             		.comm	_mode,1,1
  43                             		.comm	_GS_PREV_STATE,1,1
  44                             		.comm	_uart1RxBuf,16,1
  45                             		.comm	_uart1RxCnt,2,2
  46                             		.comm	_uart1RxFlag,1,1
  47                             		.comm	_uart1RxErrFlag,1,1
  48                             		.comm	_uart1RxOvrFlag,1,1
  49                             		.comm	_uart1TxBuf,16,1
  50                             		.comm	_uart1TxCnt,2,2
  51                             		.comm	_uart1TxFlag,1,1
  52                             		.comm	_time_now,7,1
  53                             		.comm	_uart1Status,2,2
  54                             		.comm	_myBuffer,16,1
  55                             		.comm	_myCounter,2,2
  56                             		.comm	_pwm_counter,2,2
  57                             		.comm	_pwm_edge,1,1
  58                             		.comm	_switch_edge,1,1
  59                             		.comm	_check_btns,1,1
  60                             		.comm	_gate_cmd,1,1
  61                             		.comm	_auto_close,1,1
  62                             		.comm	_auto_close_cntr,1,1
  63                             		.global	_r_uart1_interrupt_receive
  65                             	_r_uart1_interrupt_receive:
  66                             	.LFB0:
  67                             		.file 1 "../src/r_cg_serial_user.c"
   1:../src/r_cg_serial_user.c **** /**************************************************************************************************
   2:../src/r_cg_serial_user.c **** * DISCLAIMER
   3:../src/r_cg_serial_user.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/r_cg_serial_user.c **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
   5:../src/r_cg_serial_user.c **** * applicable laws, including copyright laws. 
   6:../src/r_cg_serial_user.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIESREGARDING THIS SOFTWARE, WHETHER
   7:../src/r_cg_serial_user.c **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
   8:../src/r_cg_serial_user.c **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
   9:../src/r_cg_serial_user.c **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  10:../src/r_cg_serial_user.c **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  11:../src/r_cg_serial_user.c **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/r_cg_serial_user.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/r_cg_serial_user.c **** * of this software. By using this software, you agree to the additional terms and conditions found 
  14:../src/r_cg_serial_user.c **** * following link:
  15:../src/r_cg_serial_user.c **** * http://www.renesas.com/disclaimer
  16:../src/r_cg_serial_user.c **** *
  17:../src/r_cg_serial_user.c **** * Copyright (C) 2011, 2015 Renesas Electronics Corporation. All rights reserved.
  18:../src/r_cg_serial_user.c **** ***************************************************************************************************
  19:../src/r_cg_serial_user.c **** 
  20:../src/r_cg_serial_user.c **** /**************************************************************************************************
  21:../src/r_cg_serial_user.c **** * File Name    : r_cg_serial_user.c
  22:../src/r_cg_serial_user.c **** * Version      : CodeGenerator for RL78/G14 V2.04.02.01 [15 May 2015]
  23:../src/r_cg_serial_user.c **** * Device(s)    : R5F104LE
  24:../src/r_cg_serial_user.c **** * Tool-Chain   : GCCRL78
  25:../src/r_cg_serial_user.c **** * Description  : This file implements device driver for Serial module.
  26:../src/r_cg_serial_user.c **** * Creation Date: 5/4/2016
  27:../src/r_cg_serial_user.c **** ***************************************************************************************************
  28:../src/r_cg_serial_user.c **** 
  29:../src/r_cg_serial_user.c **** /**************************************************************************************************
  30:../src/r_cg_serial_user.c **** Includes
  31:../src/r_cg_serial_user.c **** ***************************************************************************************************
  32:../src/r_cg_serial_user.c **** #include "r_cg_macrodriver.h"
  33:../src/r_cg_serial_user.c **** #include "r_cg_serial.h"
  34:../src/r_cg_serial_user.c **** /* Start user code for include. Do not edit comment generated here */
  35:../src/r_cg_serial_user.c **** /* End user code. Do not edit comment generated here */
  36:../src/r_cg_serial_user.c **** #include "global.h"
  37:../src/r_cg_serial_user.c **** 
  38:../src/r_cg_serial_user.c **** /**************************************************************************************************
  39:../src/r_cg_serial_user.c **** Global variables and functions
  40:../src/r_cg_serial_user.c **** ***************************************************************************************************
  41:../src/r_cg_serial_user.c **** extern volatile uint8_t * gp_uart1_tx_address;         /* uart1 send buffer address */
  42:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_tx_count;            /* uart1 send data number */
  43:../src/r_cg_serial_user.c **** extern volatile uint8_t * gp_uart1_rx_address;         /* uart1 receive buffer address */
  44:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_rx_count;            /* uart1 receive data number */
  45:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_rx_length;           /* uart1 receive data length */
  46:../src/r_cg_serial_user.c **** /* Start user code for global. Do not edit comment generated here */
  47:../src/r_cg_serial_user.c **** /* End user code. Do not edit comment generated here */
  48:../src/r_cg_serial_user.c **** 
  49:../src/r_cg_serial_user.c **** /**************************************************************************************************
  50:../src/r_cg_serial_user.c **** * Function Name: r_uart1_interrupt_receive
  51:../src/r_cg_serial_user.c **** * Description  : This function is INTSR1 interrupt service routine.
  52:../src/r_cg_serial_user.c **** * Arguments    : None
  53:../src/r_cg_serial_user.c **** * Return Value : None
  54:../src/r_cg_serial_user.c **** ***************************************************************************************************
  55:../src/r_cg_serial_user.c **** void r_uart1_interrupt_receive(void)
  56:../src/r_cg_serial_user.c **** {
  68                             		.loc 1 56 0
  69                             		; start of function
  70                             		; push 16: ax bc de hl r8 r10 r12 r14
  71                             		; locals: 2 bytes
  72                             		; outgoing: 2 bytes
  73 0000 61 CF                   		sel	rb0
  74 0002 C1                      		push	ax
  75                             	.LCFI0:
  76 0003 C3                      		push	bc
  77                             	.LCFI1:
  78 0004 C5                      		push	de
  79                             	.LCFI2:
  80 0005 C7                      		push	hl
  81                             	.LCFI3:
  82 0006 61 DF                   		sel	rb1
  83 0008 C1                      		push	ax ; r8
  84                             	.LCFI4:
  85 0009 C3                      		push	bc ; r10
  86                             	.LCFI5:
  87 000a C5                      		push	de ; r12
  88                             	.LCFI6:
  89 000b C7                      		push	hl ; r14
  90                             	.LCFI7:
  91 000c 61 CF                   		sel	rb0
  92 000e 20 04                   		subw	sp, #4
  93                             	.LCFI8:
  57:../src/r_cg_serial_user.c ****     uint8_t rx_data;
  58:../src/r_cg_serial_user.c ****     uint8_t err_type;
  59:../src/r_cg_serial_user.c ****     
  60:../src/r_cg_serial_user.c ****     err_type = (uint8_t)(SSR03 & 0x0007U);
  94                             		.loc 1 60 0
  95 0010 C9 F0 06 01             		movw	r8, #262
  96 0014 AD F0                   		movw	ax, r8
  97 0016 BD F2                   		movw	r10, ax
  98 0018 FA F2                   		movw	hl, r10
  99 001a AB                      		movw	ax, [hl]
 100 001b BD F0                   		movw	r8, ax
 101 001d 8D F0                   		mov	a, r8
 102 001f 5C 07                   		and	a, #7
 103 0021 98 03                   		mov	[sp+3], a
  61:../src/r_cg_serial_user.c ****     SIR03 = (uint16_t)err_type;
 104                             		.loc 1 61 0
 105 0023 C9 F2 0E 01             		movw	r10, #270
 106 0027 88 03                   		mov	a, [sp+3]
 107 0029 70                      		mov	x, a 
 108 002a 51 00                   		mov	a, #0
 109 002c BD F0                   		movw	r8, ax
 110 002e AD F2                   		movw	ax, r10
 111 0030 BD F4                   		movw	r12, ax
 112 0032 DA F4                   		movw	bc, r12
 113 0034 AD F0                   		movw	ax, r8
 114 0036 78 00 00                		movw	[bc], ax
  62:../src/r_cg_serial_user.c **** 
  63:../src/r_cg_serial_user.c ****     if (err_type != 0U)
 115                             		.loc 1 63 0
 116 0039 88 03                   		mov	a, [sp+3]
 117 003b D1                      		cmp0	a
 118 003c 61 F8                   		 sknz
 119 003e EC 4C 00 00             		 br	!!.L2
  64:../src/r_cg_serial_user.c ****     {
  65:../src/r_cg_serial_user.c ****         r_uart1_callback_error(err_type);
 120                             		.loc 1 65 0
 121 0042 88 03                   		mov	a, [sp+3]
 122 0044 9D F0                   		mov	r8, a
 123 0046 98 00                   		mov	[sp], a
 124 0048 FC 42 01 00             		call	!!%code(_r_uart1_callback_error)
 125                             	.L2:
  66:../src/r_cg_serial_user.c ****     }
  67:../src/r_cg_serial_user.c ****     
  68:../src/r_cg_serial_user.c ****     rx_data = RXD1;
 126                             		.loc 1 68 0
 127 004c C9 F0 46 FF             		movw	r8, #-186
 128 0050 AD F0                   		movw	ax, r8
 129 0052 BD F2                   		movw	r10, ax
 130 0054 FA F2                   		movw	hl, r10
 131 0056 8B                      		mov	a, [hl]
 132 0057 9D F0                   		mov	r8, a
 133 0059 98 02                   		mov	[sp+2], a
  69:../src/r_cg_serial_user.c **** 
  70:../src/r_cg_serial_user.c ****     if (g_uart1_rx_length > g_uart1_rx_count)
 134                             		.loc 1 70 0
 135 005b AF 00 00                		movw	ax, !_g_uart1_rx_length
 136 005e BD F2                   		movw	r10, ax
 137 0060 AF 00 00                		movw	ax, !_g_uart1_rx_count
 138 0063 BD F0                   		movw	r8, ax
 139 0065 AD F2                   		movw	ax, r10
 140 0067 46 F0                   		cmpw	ax, r8
 141 0069 61 E3                   		 skh
 142 006b EC B7 00 00             		 br	!!.L3
  71:../src/r_cg_serial_user.c ****     {
  72:../src/r_cg_serial_user.c ****         *gp_uart1_rx_address = rx_data;
 143                             		.loc 1 72 0
 144 006f AF 00 00                		movw	ax, !_gp_uart1_rx_address
 145 0072 BD F0                   		movw	r8, ax
 146 0074 88 02                   		mov	a, [sp+2]
 147 0076 9D F2                   		mov	r10, a
 148 0078 AD F0                   		movw	ax, r8
 149 007a BD F4                   		movw	r12, ax
 150 007c DA F4                   		movw	bc, r12
 151 007e 8D F2                   		mov	a, r10
 152 0080 48 00 00                		mov	[bc], a
  73:../src/r_cg_serial_user.c ****         gp_uart1_rx_address++;
 153                             		.loc 1 73 0
 154 0083 AF 00 00                		movw	ax, !_gp_uart1_rx_address
 155 0086 BD F0                   		movw	r8, ax
 156 0088 A6 F0                   		incw	r8
 157 008a AD F0                   		movw	ax, r8
 158 008c BF 00 00                		movw	!_gp_uart1_rx_address, ax
  74:../src/r_cg_serial_user.c ****         g_uart1_rx_count++;
 159                             		.loc 1 74 0
 160 008f AF 00 00                		movw	ax, !_g_uart1_rx_count
 161 0092 BD F0                   		movw	r8, ax
 162 0094 A6 F0                   		incw	r8
 163 0096 AD F0                   		movw	ax, r8
 164 0098 BF 00 00                		movw	!_g_uart1_rx_count, ax
  75:../src/r_cg_serial_user.c **** 
  76:../src/r_cg_serial_user.c ****         if (g_uart1_rx_length == g_uart1_rx_count)
 165                             		.loc 1 76 0
 166 009b AF 00 00                		movw	ax, !_g_uart1_rx_length
 167 009e BD F2                   		movw	r10, ax
 168 00a0 AF 00 00                		movw	ax, !_g_uart1_rx_count
 169 00a3 BD F0                   		movw	r8, ax
 170 00a5 AD F2                   		movw	ax, r10
 171 00a7 46 F0                   		cmpw	ax, r8
 172 00a9 61 E8                   		 skz
 173 00ab EC C4 00 00             		 br	!!.L1
  77:../src/r_cg_serial_user.c ****         {
  78:../src/r_cg_serial_user.c ****             r_uart1_callback_receiveend();
 174                             		.loc 1 78 0
 175 00af FC 39 01 00             		call	!!%code(_r_uart1_callback_receiveend)
 176 00b3 EC C4 00 00             		br	!!.L1
 177                             	.L3:
  79:../src/r_cg_serial_user.c ****         }
  80:../src/r_cg_serial_user.c ****     }
  81:../src/r_cg_serial_user.c ****     else
  82:../src/r_cg_serial_user.c ****     {
  83:../src/r_cg_serial_user.c ****         r_uart1_callback_softwareoverrun(rx_data);
 178                             		.loc 1 83 0
 179 00b7 88 02                   		mov	a, [sp+2]
 180 00b9 70                      		mov	x, a 
 181 00ba 51 00                   		mov	a, #0
 182 00bc BD F0                   		movw	r8, ax
 183 00be B8 00                   		movw	[sp], ax
 184 00c0 FC 3D 01 00             		call	!!%code(_r_uart1_callback_softwareoverrun)
 185                             	.L1:
  84:../src/r_cg_serial_user.c ****     }
  85:../src/r_cg_serial_user.c **** }
 186                             		.loc 1 85 0
 187 00c4 10 04                   		addw	sp, #4
 188 00c6 61 DF                   		sel	rb1
 189 00c8 C6                      		pop	hl ; r14
 190 00c9 C4                      		pop	de ; r12
 191 00ca C2                      		pop	bc ; r10
 192 00cb C0                      		pop	ax ; r8
 193 00cc 61 CF                   		sel	rb0
 194 00ce C6                      		pop	hl
 195 00cf C4                      		pop	de
 196 00d0 C2                      		pop	bc
 197 00d1 C0                      		pop	ax
 198 00d2 61 FC                   		reti
 199                             	.LFE0:
 201                             		.global	_r_uart1_interrupt_send
 203                             	_r_uart1_interrupt_send:
 204                             	.LFB1:
  86:../src/r_cg_serial_user.c **** 
  87:../src/r_cg_serial_user.c **** /**************************************************************************************************
  88:../src/r_cg_serial_user.c **** * Function Name: r_uart1_interrupt_send
  89:../src/r_cg_serial_user.c **** * Description  : This function is INTST1 interrupt service routine.
  90:../src/r_cg_serial_user.c **** * Arguments    : None
  91:../src/r_cg_serial_user.c **** * Return Value : None
  92:../src/r_cg_serial_user.c **** ***************************************************************************************************
  93:../src/r_cg_serial_user.c **** void r_uart1_interrupt_send(void)
  94:../src/r_cg_serial_user.c **** {
 205                             		.loc 1 94 0
 206                             		; start of function
 207                             		; push 16: ax bc de hl r8 r10 r12 r14
 208 00d4 61 CF                   		sel	rb0
 209 00d6 C1                      		push	ax
 210                             	.LCFI9:
 211 00d7 C3                      		push	bc
 212                             	.LCFI10:
 213 00d8 C5                      		push	de
 214                             	.LCFI11:
 215 00d9 C7                      		push	hl
 216                             	.LCFI12:
 217 00da 61 DF                   		sel	rb1
 218 00dc C1                      		push	ax ; r8
 219                             	.LCFI13:
 220 00dd C3                      		push	bc ; r10
 221                             	.LCFI14:
 222 00de C5                      		push	de ; r12
 223                             	.LCFI15:
 224 00df C7                      		push	hl ; r14
 225                             	.LCFI16:
 226 00e0 61 CF                   		sel	rb0
  95:../src/r_cg_serial_user.c ****     if (g_uart1_tx_count > 0U)
 227                             		.loc 1 95 0
 228 00e2 AF 00 00                		movw	ax, !_g_uart1_tx_count
 229 00e5 BD F0                   		movw	r8, ax
 230 00e7 44 00 00                		cmpw	ax, #0
 231 00ea 61 F8                   		 sknz
 232 00ec EC 27 01 00             		 br	!!.L7
  96:../src/r_cg_serial_user.c ****     {
  97:../src/r_cg_serial_user.c ****         TXD1 = *gp_uart1_tx_address;
 233                             		.loc 1 97 0
 234 00f0 C9 F2 44 FF             		movw	r10, #-188
 235 00f4 AF 00 00                		movw	ax, !_gp_uart1_tx_address
 236 00f7 BD F0                   		movw	r8, ax
 237 00f9 BD F4                   		movw	r12, ax
 238 00fb FA F4                   		movw	hl, r12
 239 00fd 8B                      		mov	a, [hl]
 240 00fe 9D F0                   		mov	r8, a
 241 0100 AD F2                   		movw	ax, r10
 242 0102 BD F4                   		movw	r12, ax
 243 0104 DA F4                   		movw	bc, r12
 244 0106 8D F0                   		mov	a, r8
 245 0108 48 00 00                		mov	[bc], a
  98:../src/r_cg_serial_user.c ****         gp_uart1_tx_address++;
 246                             		.loc 1 98 0
 247 010b AF 00 00                		movw	ax, !_gp_uart1_tx_address
 248 010e BD F0                   		movw	r8, ax
 249 0110 A6 F0                   		incw	r8
 250 0112 AD F0                   		movw	ax, r8
 251 0114 BF 00 00                		movw	!_gp_uart1_tx_address, ax
  99:../src/r_cg_serial_user.c ****         g_uart1_tx_count--;
 252                             		.loc 1 99 0
 253 0117 AF 00 00                		movw	ax, !_g_uart1_tx_count
 254 011a BD F0                   		movw	r8, ax
 255 011c B6 F0                   		decw	r8
 256 011e AD F0                   		movw	ax, r8
 257 0120 BF 00 00                		movw	!_g_uart1_tx_count, ax
 258 0123 EC 2B 01 00             		br	!!.L6
 259                             	.L7:
 100:../src/r_cg_serial_user.c ****     }
 101:../src/r_cg_serial_user.c ****     else
 102:../src/r_cg_serial_user.c ****     {
 103:../src/r_cg_serial_user.c ****         r_uart1_callback_sendend();
 260                             		.loc 1 103 0
 261 0127 FC 3E 01 00             		call	!!%code(_r_uart1_callback_sendend)
 262                             	.L6:
 104:../src/r_cg_serial_user.c ****     }
 105:../src/r_cg_serial_user.c **** }
 263                             		.loc 1 105 0
 264 012b 61 DF                   		sel	rb1
 265 012d C6                      		pop	hl ; r14
 266 012e C4                      		pop	de ; r12
 267 012f C2                      		pop	bc ; r10
 268 0130 C0                      		pop	ax ; r8
 269 0131 61 CF                   		sel	rb0
 270 0133 C6                      		pop	hl
 271 0134 C4                      		pop	de
 272 0135 C2                      		pop	bc
 273 0136 C0                      		pop	ax
 274 0137 61 FC                   		reti
 275                             	.LFE1:
 278                             	_r_uart1_callback_receiveend:
 279                             	.LFB2:
 106:../src/r_cg_serial_user.c **** 
 107:../src/r_cg_serial_user.c **** /**************************************************************************************************
 108:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_receiveend
 109:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 finishes reception.
 110:../src/r_cg_serial_user.c **** * Arguments    : None
 111:../src/r_cg_serial_user.c **** * Return Value : None
 112:../src/r_cg_serial_user.c **** ***************************************************************************************************
 113:../src/r_cg_serial_user.c **** static void r_uart1_callback_receiveend(void)
 114:../src/r_cg_serial_user.c **** {
 280                             		.loc 1 114 0
 115:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 116:../src/r_cg_serial_user.c **** 	uart1RxFlag = 1U;
 281                             		.loc 1 116 0
 282 0139 E5 00 00                		oneb	!_uart1RxFlag
 117:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 118:../src/r_cg_serial_user.c **** }
 283                             		.loc 1 118 0
 284 013c D7                      		ret
 285                             	.LFE2:
 288                             	_r_uart1_callback_softwareoverrun:
 289                             	.LFB3:
 119:../src/r_cg_serial_user.c **** 
 120:../src/r_cg_serial_user.c **** /**************************************************************************************************
 121:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_softwareoverrun
 122:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 receives an overflow data.
 123:../src/r_cg_serial_user.c **** * Arguments    : rx_data -
 124:../src/r_cg_serial_user.c **** *                    receive data
 125:../src/r_cg_serial_user.c **** * Return Value : None
 126:../src/r_cg_serial_user.c **** ***************************************************************************************************
 127:../src/r_cg_serial_user.c **** static void r_uart1_callback_softwareoverrun(uint16_t rx_data)
 128:../src/r_cg_serial_user.c **** {
 290                             		.loc 1 128 0
 129:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 130:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 131:../src/r_cg_serial_user.c **** }
 291                             		.loc 1 131 0
 292 013d D7                      		ret
 293                             	.LFE3:
 296                             	_r_uart1_callback_sendend:
 297                             	.LFB4:
 132:../src/r_cg_serial_user.c **** 
 133:../src/r_cg_serial_user.c **** /**************************************************************************************************
 134:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_sendend
 135:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 finishes transmission.
 136:../src/r_cg_serial_user.c **** * Arguments    : None
 137:../src/r_cg_serial_user.c **** * Return Value : None
 138:../src/r_cg_serial_user.c **** ***************************************************************************************************
 139:../src/r_cg_serial_user.c **** static void r_uart1_callback_sendend(void)
 140:../src/r_cg_serial_user.c **** {
 298                             		.loc 1 140 0
 141:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 142:../src/r_cg_serial_user.c **** 	uart1TxFlag = 1U;
 299                             		.loc 1 142 0
 300 013e E5 00 00                		oneb	!_uart1TxFlag
 143:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 144:../src/r_cg_serial_user.c **** }
 301                             		.loc 1 144 0
 302 0141 D7                      		ret
 303                             	.LFE4:
 306                             	_r_uart1_callback_error:
 307                             	.LFB5:
 145:../src/r_cg_serial_user.c **** 
 146:../src/r_cg_serial_user.c **** /**************************************************************************************************
 147:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_error
 148:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 reception error occurs.
 149:../src/r_cg_serial_user.c **** * Arguments    : err_type -
 150:../src/r_cg_serial_user.c **** *                    error type value
 151:../src/r_cg_serial_user.c **** * Return Value : None
 152:../src/r_cg_serial_user.c **** ***************************************************************************************************
 153:../src/r_cg_serial_user.c **** static void r_uart1_callback_error(uint8_t err_type)
 154:../src/r_cg_serial_user.c **** {
 308                             		.loc 1 154 0
 155:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 156:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 157:../src/r_cg_serial_user.c **** }
 309                             		.loc 1 157 0
 310 0142 D7                      		ret
 311                             	.LFE5:
 447                             	.Letext0:
 448                             		.file 2 "../src/r_cg_macrodriver.h"
 449                             		.file 3 "../src/r_cg_rtc.h"
 450                             		.file 4 "../src/infrared.h"
 451                             		.file 5 "../src/adc.h"
 452                             		.file 6 "../src/global.h"
