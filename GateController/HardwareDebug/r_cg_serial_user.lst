   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_ir_rxMessage,2,2
  28                             		.comm	_dataReady,1,1
  29                             		.comm	_dataPrint,1,1
  30                             		.comm	_dataResponse,1,1
  31                             		.comm	_ADC_done,1,1
  32                             		.comm	_ADC_value,8,2
  33                             		.comm	_INTAD_FSM_state,1,1
  34                             		.comm	_adc_ready,1,1
  35                             		.comm	_latest_current_reading,1,1
  36                             		.comm	_ADC_counter,1,1
  37                             		.comm	_timer_adc_reader_10Hz_interrupt,1,1
  38                             		.comm	_initial_current,1,1
  39                             		.comm	_collision_det_counter,1,1
  40                             		.comm	_collision_det,1,1
  41                             		.comm	_ctrlMode,2,2
  42                             		.comm	_gate_status,2,2
  43                             		.comm	_prev_gate_status,2,2
  44                             		.comm	_time_now,7,1
  45                             		.comm	_uart1Status,2,2
  46                             		.comm	_uart1RxFlag,1,1
  47                             		.comm	_uart1RxBuf,16,1
  48                             		.comm	_uart1RxCnt,2,2
  49                             		.comm	_uart1TxFlag,1,1
  50                             		.comm	_uart1TxBuf,16,1
  51                             		.comm	_uart1TxCnt,2,2
  52                             		.comm	_myBuffer,16,1
  53                             		.comm	_myCounter,2,2
  54                             		.comm	_pwm_counter,2,2
  55                             		.comm	_pwm_edge,2,2
  56                             		.comm	_switch_edge,2,2
  57                             		.comm	_check_btns,2,2
  58                             		.comm	_gate_cmd,1,1
  59                             		.comm	_auto_close,1,1
  60                             		.comm	_auto_close_cntr,1,1
  61                             		.global	_r_uart1_interrupt_receive
  63                             	_r_uart1_interrupt_receive:
  64                             	.LFB0:
  65                             		.file 1 "../src/r_cg_serial_user.c"
   1:../src/r_cg_serial_user.c **** /**************************************************************************************************
   2:../src/r_cg_serial_user.c **** * DISCLAIMER
   3:../src/r_cg_serial_user.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/r_cg_serial_user.c **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
   5:../src/r_cg_serial_user.c **** * applicable laws, including copyright laws. 
   6:../src/r_cg_serial_user.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIESREGARDING THIS SOFTWARE, WHETHER
   7:../src/r_cg_serial_user.c **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
   8:../src/r_cg_serial_user.c **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
   9:../src/r_cg_serial_user.c **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  10:../src/r_cg_serial_user.c **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  11:../src/r_cg_serial_user.c **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/r_cg_serial_user.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/r_cg_serial_user.c **** * of this software. By using this software, you agree to the additional terms and conditions found 
  14:../src/r_cg_serial_user.c **** * following link:
  15:../src/r_cg_serial_user.c **** * http://www.renesas.com/disclaimer
  16:../src/r_cg_serial_user.c **** *
  17:../src/r_cg_serial_user.c **** * Copyright (C) 2011, 2015 Renesas Electronics Corporation. All rights reserved.
  18:../src/r_cg_serial_user.c **** ***************************************************************************************************
  19:../src/r_cg_serial_user.c **** 
  20:../src/r_cg_serial_user.c **** /**************************************************************************************************
  21:../src/r_cg_serial_user.c **** * File Name    : r_cg_serial_user.c
  22:../src/r_cg_serial_user.c **** * Version      : CodeGenerator for RL78/G14 V2.04.02.01 [15 May 2015]
  23:../src/r_cg_serial_user.c **** * Device(s)    : R5F104LE
  24:../src/r_cg_serial_user.c **** * Tool-Chain   : GCCRL78
  25:../src/r_cg_serial_user.c **** * Description  : This file implements device driver for Serial module.
  26:../src/r_cg_serial_user.c **** * Creation Date: 5/4/2016
  27:../src/r_cg_serial_user.c **** ***************************************************************************************************
  28:../src/r_cg_serial_user.c **** 
  29:../src/r_cg_serial_user.c **** /**************************************************************************************************
  30:../src/r_cg_serial_user.c **** Includes
  31:../src/r_cg_serial_user.c **** ***************************************************************************************************
  32:../src/r_cg_serial_user.c **** #include "r_cg_macrodriver.h"
  33:../src/r_cg_serial_user.c **** #include "r_cg_serial.h"
  34:../src/r_cg_serial_user.c **** /* Start user code for include. Do not edit comment generated here */
  35:../src/r_cg_serial_user.c **** /* End user code. Do not edit comment generated here */
  36:../src/r_cg_serial_user.c **** #include "global.h"
  37:../src/r_cg_serial_user.c **** 
  38:../src/r_cg_serial_user.c **** /**************************************************************************************************
  39:../src/r_cg_serial_user.c **** Global variables and functions
  40:../src/r_cg_serial_user.c **** ***************************************************************************************************
  41:../src/r_cg_serial_user.c **** extern volatile uint8_t * gp_uart1_tx_address;         /* uart1 send buffer address */
  42:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_tx_count;            /* uart1 send data number */
  43:../src/r_cg_serial_user.c **** extern volatile uint8_t * gp_uart1_rx_address;         /* uart1 receive buffer address */
  44:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_rx_count;            /* uart1 receive data number */
  45:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_rx_length;           /* uart1 receive data length */
  46:../src/r_cg_serial_user.c **** /* Start user code for global. Do not edit comment generated here */
  47:../src/r_cg_serial_user.c **** /* End user code. Do not edit comment generated here */
  48:../src/r_cg_serial_user.c **** 
  49:../src/r_cg_serial_user.c **** /**************************************************************************************************
  50:../src/r_cg_serial_user.c **** * Function Name: r_uart1_interrupt_receive
  51:../src/r_cg_serial_user.c **** * Description  : This function is INTSR1 interrupt service routine.
  52:../src/r_cg_serial_user.c **** * Arguments    : None
  53:../src/r_cg_serial_user.c **** * Return Value : None
  54:../src/r_cg_serial_user.c **** ***************************************************************************************************
  55:../src/r_cg_serial_user.c **** void r_uart1_interrupt_receive(void)
  56:../src/r_cg_serial_user.c **** {
  66                             		.loc 1 56 0
  67                             		; start of function
  68                             		; push 16: ax bc de hl r8 r10 r12 r14
  69                             		; locals: 2 bytes
  70                             		; outgoing: 2 bytes
  71 0000 61 CF                   		sel	rb0
  72 0002 C1                      		push	ax
  73                             	.LCFI0:
  74 0003 C3                      		push	bc
  75                             	.LCFI1:
  76 0004 C5                      		push	de
  77                             	.LCFI2:
  78 0005 C7                      		push	hl
  79                             	.LCFI3:
  80 0006 61 DF                   		sel	rb1
  81 0008 C1                      		push	ax ; r8
  82                             	.LCFI4:
  83 0009 C3                      		push	bc ; r10
  84                             	.LCFI5:
  85 000a C5                      		push	de ; r12
  86                             	.LCFI6:
  87 000b C7                      		push	hl ; r14
  88                             	.LCFI7:
  89 000c 61 CF                   		sel	rb0
  90 000e 20 04                   		subw	sp, #4
  91                             	.LCFI8:
  57:../src/r_cg_serial_user.c ****     uint8_t rx_data;
  58:../src/r_cg_serial_user.c ****     uint8_t err_type;
  59:../src/r_cg_serial_user.c ****     
  60:../src/r_cg_serial_user.c ****     err_type = (uint8_t)(SSR03 & 0x0007U);
  92                             		.loc 1 60 0
  93 0010 C9 F0 06 01             		movw	r8, #262
  94 0014 AD F0                   		movw	ax, r8
  95 0016 BD F2                   		movw	r10, ax
  96 0018 FA F2                   		movw	hl, r10
  97 001a AB                      		movw	ax, [hl]
  98 001b BD F0                   		movw	r8, ax
  99 001d 8D F0                   		mov	a, r8
 100 001f 5C 07                   		and	a, #7
 101 0021 98 03                   		mov	[sp+3], a
  61:../src/r_cg_serial_user.c ****     SIR03 = (uint16_t)err_type;
 102                             		.loc 1 61 0
 103 0023 C9 F2 0E 01             		movw	r10, #270
 104 0027 88 03                   		mov	a, [sp+3]
 105 0029 70                      		mov	x, a 
 106 002a 51 00                   		mov	a, #0
 107 002c BD F0                   		movw	r8, ax
 108 002e AD F2                   		movw	ax, r10
 109 0030 BD F4                   		movw	r12, ax
 110 0032 DA F4                   		movw	bc, r12
 111 0034 AD F0                   		movw	ax, r8
 112 0036 78 00 00                		movw	[bc], ax
  62:../src/r_cg_serial_user.c **** 
  63:../src/r_cg_serial_user.c ****     if (err_type != 0U)
 113                             		.loc 1 63 0
 114 0039 88 03                   		mov	a, [sp+3]
 115 003b D1                      		cmp0	a
 116 003c 61 F8                   		 sknz
 117 003e EC 4C 00 00             		 br	!!.L2
  64:../src/r_cg_serial_user.c ****     {
  65:../src/r_cg_serial_user.c ****         r_uart1_callback_error(err_type);
 118                             		.loc 1 65 0
 119 0042 88 03                   		mov	a, [sp+3]
 120 0044 9D F0                   		mov	r8, a
 121 0046 98 00                   		mov	[sp], a
 122 0048 FC 42 01 00             		call	!!%code(_r_uart1_callback_error)
 123                             	.L2:
  66:../src/r_cg_serial_user.c ****     }
  67:../src/r_cg_serial_user.c ****     
  68:../src/r_cg_serial_user.c ****     rx_data = RXD1;
 124                             		.loc 1 68 0
 125 004c C9 F0 46 FF             		movw	r8, #-186
 126 0050 AD F0                   		movw	ax, r8
 127 0052 BD F2                   		movw	r10, ax
 128 0054 FA F2                   		movw	hl, r10
 129 0056 8B                      		mov	a, [hl]
 130 0057 9D F0                   		mov	r8, a
 131 0059 98 02                   		mov	[sp+2], a
  69:../src/r_cg_serial_user.c **** 
  70:../src/r_cg_serial_user.c ****     if (g_uart1_rx_length > g_uart1_rx_count)
 132                             		.loc 1 70 0
 133 005b AF 00 00                		movw	ax, !_g_uart1_rx_length
 134 005e BD F2                   		movw	r10, ax
 135 0060 AF 00 00                		movw	ax, !_g_uart1_rx_count
 136 0063 BD F0                   		movw	r8, ax
 137 0065 AD F2                   		movw	ax, r10
 138 0067 46 F0                   		cmpw	ax, r8
 139 0069 61 E3                   		 skh
 140 006b EC B7 00 00             		 br	!!.L3
  71:../src/r_cg_serial_user.c ****     {
  72:../src/r_cg_serial_user.c ****         *gp_uart1_rx_address = rx_data;
 141                             		.loc 1 72 0
 142 006f AF 00 00                		movw	ax, !_gp_uart1_rx_address
 143 0072 BD F0                   		movw	r8, ax
 144 0074 88 02                   		mov	a, [sp+2]
 145 0076 9D F2                   		mov	r10, a
 146 0078 AD F0                   		movw	ax, r8
 147 007a BD F4                   		movw	r12, ax
 148 007c DA F4                   		movw	bc, r12
 149 007e 8D F2                   		mov	a, r10
 150 0080 48 00 00                		mov	[bc], a
  73:../src/r_cg_serial_user.c ****         gp_uart1_rx_address++;
 151                             		.loc 1 73 0
 152 0083 AF 00 00                		movw	ax, !_gp_uart1_rx_address
 153 0086 BD F0                   		movw	r8, ax
 154 0088 A6 F0                   		incw	r8
 155 008a AD F0                   		movw	ax, r8
 156 008c BF 00 00                		movw	!_gp_uart1_rx_address, ax
  74:../src/r_cg_serial_user.c ****         g_uart1_rx_count++;
 157                             		.loc 1 74 0
 158 008f AF 00 00                		movw	ax, !_g_uart1_rx_count
 159 0092 BD F0                   		movw	r8, ax
 160 0094 A6 F0                   		incw	r8
 161 0096 AD F0                   		movw	ax, r8
 162 0098 BF 00 00                		movw	!_g_uart1_rx_count, ax
  75:../src/r_cg_serial_user.c **** 
  76:../src/r_cg_serial_user.c ****         if (g_uart1_rx_length == g_uart1_rx_count)
 163                             		.loc 1 76 0
 164 009b AF 00 00                		movw	ax, !_g_uart1_rx_length
 165 009e BD F2                   		movw	r10, ax
 166 00a0 AF 00 00                		movw	ax, !_g_uart1_rx_count
 167 00a3 BD F0                   		movw	r8, ax
 168 00a5 AD F2                   		movw	ax, r10
 169 00a7 46 F0                   		cmpw	ax, r8
 170 00a9 61 E8                   		 skz
 171 00ab EC C4 00 00             		 br	!!.L1
  77:../src/r_cg_serial_user.c ****         {
  78:../src/r_cg_serial_user.c ****             r_uart1_callback_receiveend();
 172                             		.loc 1 78 0
 173 00af FC 39 01 00             		call	!!%code(_r_uart1_callback_receiveend)
 174 00b3 EC C4 00 00             		br	!!.L1
 175                             	.L3:
  79:../src/r_cg_serial_user.c ****         }
  80:../src/r_cg_serial_user.c ****     }
  81:../src/r_cg_serial_user.c ****     else
  82:../src/r_cg_serial_user.c ****     {
  83:../src/r_cg_serial_user.c ****         r_uart1_callback_softwareoverrun(rx_data);
 176                             		.loc 1 83 0
 177 00b7 88 02                   		mov	a, [sp+2]
 178 00b9 70                      		mov	x, a 
 179 00ba 51 00                   		mov	a, #0
 180 00bc BD F0                   		movw	r8, ax
 181 00be B8 00                   		movw	[sp], ax
 182 00c0 FC 3D 01 00             		call	!!%code(_r_uart1_callback_softwareoverrun)
 183                             	.L1:
  84:../src/r_cg_serial_user.c ****     }
  85:../src/r_cg_serial_user.c **** }
 184                             		.loc 1 85 0
 185 00c4 10 04                   		addw	sp, #4
 186 00c6 61 DF                   		sel	rb1
 187 00c8 C6                      		pop	hl ; r14
 188 00c9 C4                      		pop	de ; r12
 189 00ca C2                      		pop	bc ; r10
 190 00cb C0                      		pop	ax ; r8
 191 00cc 61 CF                   		sel	rb0
 192 00ce C6                      		pop	hl
 193 00cf C4                      		pop	de
 194 00d0 C2                      		pop	bc
 195 00d1 C0                      		pop	ax
 196 00d2 61 FC                   		reti
 197                             	.LFE0:
 199                             		.global	_r_uart1_interrupt_send
 201                             	_r_uart1_interrupt_send:
 202                             	.LFB1:
  86:../src/r_cg_serial_user.c **** 
  87:../src/r_cg_serial_user.c **** /**************************************************************************************************
  88:../src/r_cg_serial_user.c **** * Function Name: r_uart1_interrupt_send
  89:../src/r_cg_serial_user.c **** * Description  : This function is INTST1 interrupt service routine.
  90:../src/r_cg_serial_user.c **** * Arguments    : None
  91:../src/r_cg_serial_user.c **** * Return Value : None
  92:../src/r_cg_serial_user.c **** ***************************************************************************************************
  93:../src/r_cg_serial_user.c **** void r_uart1_interrupt_send(void)
  94:../src/r_cg_serial_user.c **** {
 203                             		.loc 1 94 0
 204                             		; start of function
 205                             		; push 16: ax bc de hl r8 r10 r12 r14
 206 00d4 61 CF                   		sel	rb0
 207 00d6 C1                      		push	ax
 208                             	.LCFI9:
 209 00d7 C3                      		push	bc
 210                             	.LCFI10:
 211 00d8 C5                      		push	de
 212                             	.LCFI11:
 213 00d9 C7                      		push	hl
 214                             	.LCFI12:
 215 00da 61 DF                   		sel	rb1
 216 00dc C1                      		push	ax ; r8
 217                             	.LCFI13:
 218 00dd C3                      		push	bc ; r10
 219                             	.LCFI14:
 220 00de C5                      		push	de ; r12
 221                             	.LCFI15:
 222 00df C7                      		push	hl ; r14
 223                             	.LCFI16:
 224 00e0 61 CF                   		sel	rb0
  95:../src/r_cg_serial_user.c ****     if (g_uart1_tx_count > 0U)
 225                             		.loc 1 95 0
 226 00e2 AF 00 00                		movw	ax, !_g_uart1_tx_count
 227 00e5 BD F0                   		movw	r8, ax
 228 00e7 44 00 00                		cmpw	ax, #0
 229 00ea 61 F8                   		 sknz
 230 00ec EC 27 01 00             		 br	!!.L7
  96:../src/r_cg_serial_user.c ****     {
  97:../src/r_cg_serial_user.c ****         TXD1 = *gp_uart1_tx_address;
 231                             		.loc 1 97 0
 232 00f0 C9 F2 44 FF             		movw	r10, #-188
 233 00f4 AF 00 00                		movw	ax, !_gp_uart1_tx_address
 234 00f7 BD F0                   		movw	r8, ax
 235 00f9 BD F4                   		movw	r12, ax
 236 00fb FA F4                   		movw	hl, r12
 237 00fd 8B                      		mov	a, [hl]
 238 00fe 9D F0                   		mov	r8, a
 239 0100 AD F2                   		movw	ax, r10
 240 0102 BD F4                   		movw	r12, ax
 241 0104 DA F4                   		movw	bc, r12
 242 0106 8D F0                   		mov	a, r8
 243 0108 48 00 00                		mov	[bc], a
  98:../src/r_cg_serial_user.c ****         gp_uart1_tx_address++;
 244                             		.loc 1 98 0
 245 010b AF 00 00                		movw	ax, !_gp_uart1_tx_address
 246 010e BD F0                   		movw	r8, ax
 247 0110 A6 F0                   		incw	r8
 248 0112 AD F0                   		movw	ax, r8
 249 0114 BF 00 00                		movw	!_gp_uart1_tx_address, ax
  99:../src/r_cg_serial_user.c ****         g_uart1_tx_count--;
 250                             		.loc 1 99 0
 251 0117 AF 00 00                		movw	ax, !_g_uart1_tx_count
 252 011a BD F0                   		movw	r8, ax
 253 011c B6 F0                   		decw	r8
 254 011e AD F0                   		movw	ax, r8
 255 0120 BF 00 00                		movw	!_g_uart1_tx_count, ax
 256 0123 EC 2B 01 00             		br	!!.L6
 257                             	.L7:
 100:../src/r_cg_serial_user.c ****     }
 101:../src/r_cg_serial_user.c ****     else
 102:../src/r_cg_serial_user.c ****     {
 103:../src/r_cg_serial_user.c ****         r_uart1_callback_sendend();
 258                             		.loc 1 103 0
 259 0127 FC 3E 01 00             		call	!!%code(_r_uart1_callback_sendend)
 260                             	.L6:
 104:../src/r_cg_serial_user.c ****     }
 105:../src/r_cg_serial_user.c **** }
 261                             		.loc 1 105 0
 262 012b 61 DF                   		sel	rb1
 263 012d C6                      		pop	hl ; r14
 264 012e C4                      		pop	de ; r12
 265 012f C2                      		pop	bc ; r10
 266 0130 C0                      		pop	ax ; r8
 267 0131 61 CF                   		sel	rb0
 268 0133 C6                      		pop	hl
 269 0134 C4                      		pop	de
 270 0135 C2                      		pop	bc
 271 0136 C0                      		pop	ax
 272 0137 61 FC                   		reti
 273                             	.LFE1:
 276                             	_r_uart1_callback_receiveend:
 277                             	.LFB2:
 106:../src/r_cg_serial_user.c **** 
 107:../src/r_cg_serial_user.c **** /**************************************************************************************************
 108:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_receiveend
 109:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 finishes reception.
 110:../src/r_cg_serial_user.c **** * Arguments    : None
 111:../src/r_cg_serial_user.c **** * Return Value : None
 112:../src/r_cg_serial_user.c **** ***************************************************************************************************
 113:../src/r_cg_serial_user.c **** static void r_uart1_callback_receiveend(void)
 114:../src/r_cg_serial_user.c **** {
 278                             		.loc 1 114 0
 115:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 116:../src/r_cg_serial_user.c **** 	uart1RxFlag = 1U;
 279                             		.loc 1 116 0
 280 0139 E5 00 00                		oneb	!_uart1RxFlag
 117:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 118:../src/r_cg_serial_user.c **** }
 281                             		.loc 1 118 0
 282 013c D7                      		ret
 283                             	.LFE2:
 286                             	_r_uart1_callback_softwareoverrun:
 287                             	.LFB3:
 119:../src/r_cg_serial_user.c **** 
 120:../src/r_cg_serial_user.c **** /**************************************************************************************************
 121:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_softwareoverrun
 122:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 receives an overflow data.
 123:../src/r_cg_serial_user.c **** * Arguments    : rx_data -
 124:../src/r_cg_serial_user.c **** *                    receive data
 125:../src/r_cg_serial_user.c **** * Return Value : None
 126:../src/r_cg_serial_user.c **** ***************************************************************************************************
 127:../src/r_cg_serial_user.c **** static void r_uart1_callback_softwareoverrun(uint16_t rx_data)
 128:../src/r_cg_serial_user.c **** {
 288                             		.loc 1 128 0
 129:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 130:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 131:../src/r_cg_serial_user.c **** }
 289                             		.loc 1 131 0
 290 013d D7                      		ret
 291                             	.LFE3:
 294                             	_r_uart1_callback_sendend:
 295                             	.LFB4:
 132:../src/r_cg_serial_user.c **** 
 133:../src/r_cg_serial_user.c **** /**************************************************************************************************
 134:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_sendend
 135:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 finishes transmission.
 136:../src/r_cg_serial_user.c **** * Arguments    : None
 137:../src/r_cg_serial_user.c **** * Return Value : None
 138:../src/r_cg_serial_user.c **** ***************************************************************************************************
 139:../src/r_cg_serial_user.c **** static void r_uart1_callback_sendend(void)
 140:../src/r_cg_serial_user.c **** {
 296                             		.loc 1 140 0
 141:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 142:../src/r_cg_serial_user.c **** 	uart1TxFlag = 1U;
 297                             		.loc 1 142 0
 298 013e E5 00 00                		oneb	!_uart1TxFlag
 143:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 144:../src/r_cg_serial_user.c **** }
 299                             		.loc 1 144 0
 300 0141 D7                      		ret
 301                             	.LFE4:
 304                             	_r_uart1_callback_error:
 305                             	.LFB5:
 145:../src/r_cg_serial_user.c **** 
 146:../src/r_cg_serial_user.c **** /**************************************************************************************************
 147:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_error
 148:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 reception error occurs.
 149:../src/r_cg_serial_user.c **** * Arguments    : err_type -
 150:../src/r_cg_serial_user.c **** *                    error type value
 151:../src/r_cg_serial_user.c **** * Return Value : None
 152:../src/r_cg_serial_user.c **** ***************************************************************************************************
 153:../src/r_cg_serial_user.c **** static void r_uart1_callback_error(uint8_t err_type)
 154:../src/r_cg_serial_user.c **** {
 306                             		.loc 1 154 0
 155:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 156:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 157:../src/r_cg_serial_user.c **** }
 307                             		.loc 1 157 0
 308 0142 D7                      		ret
 309                             	.LFE5:
 445                             	.Letext0:
 446                             		.file 2 "../src/r_cg_macrodriver.h"
 447                             		.file 3 "../src/r_cg_rtc.h"
 448                             		.file 4 "../src/global.h"
 449                             		.file 5 "../src/infrared.h"
 450                             		.file 6 "../src/adc.h"
