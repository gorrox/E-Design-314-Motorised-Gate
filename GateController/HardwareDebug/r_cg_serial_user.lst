   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_gate_status,2,2
  28                             		.comm	_mode,2,2
  29                             		.comm	_uart1RxBuf,16,1
  30                             		.comm	_uart1RxCnt,2,2
  31                             		.comm	_uart1RxFlag,1,1
  32                             		.comm	_uart1RxErrFlag,1,1
  33                             		.comm	_uart1RxOvrFlag,1,1
  34                             		.comm	_uart1TxBuf,16,1
  35                             		.comm	_uart1TxCnt,2,2
  36                             		.comm	_uart1TxFlag,1,1
  37                             		.comm	_uart1Status,2,2
  38                             		.global	_r_uart1_interrupt_receive
  40                             	_r_uart1_interrupt_receive:
  41                             	.LFB0:
  42                             		.file 1 "../src/r_cg_serial_user.c"
   1:../src/r_cg_serial_user.c **** /**************************************************************************************************
   2:../src/r_cg_serial_user.c **** * DISCLAIMER
   3:../src/r_cg_serial_user.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/r_cg_serial_user.c **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
   5:../src/r_cg_serial_user.c **** * applicable laws, including copyright laws. 
   6:../src/r_cg_serial_user.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIESREGARDING THIS SOFTWARE, WHETHER
   7:../src/r_cg_serial_user.c **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
   8:../src/r_cg_serial_user.c **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
   9:../src/r_cg_serial_user.c **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  10:../src/r_cg_serial_user.c **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  11:../src/r_cg_serial_user.c **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/r_cg_serial_user.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/r_cg_serial_user.c **** * of this software. By using this software, you agree to the additional terms and conditions found 
  14:../src/r_cg_serial_user.c **** * following link:
  15:../src/r_cg_serial_user.c **** * http://www.renesas.com/disclaimer
  16:../src/r_cg_serial_user.c **** *
  17:../src/r_cg_serial_user.c **** * Copyright (C) 2011, 2015 Renesas Electronics Corporation. All rights reserved.
  18:../src/r_cg_serial_user.c **** ***************************************************************************************************
  19:../src/r_cg_serial_user.c **** 
  20:../src/r_cg_serial_user.c **** /**************************************************************************************************
  21:../src/r_cg_serial_user.c **** * File Name    : r_cg_serial_user.c
  22:../src/r_cg_serial_user.c **** * Version      : CodeGenerator for RL78/G14 V2.04.02.01 [15 May 2015]
  23:../src/r_cg_serial_user.c **** * Device(s)    : R5F104LE
  24:../src/r_cg_serial_user.c **** * Tool-Chain   : GCCRL78
  25:../src/r_cg_serial_user.c **** * Description  : This file implements device driver for Serial module.
  26:../src/r_cg_serial_user.c **** * Creation Date: 4/13/2016
  27:../src/r_cg_serial_user.c **** ***************************************************************************************************
  28:../src/r_cg_serial_user.c **** 
  29:../src/r_cg_serial_user.c **** /**************************************************************************************************
  30:../src/r_cg_serial_user.c **** Includes
  31:../src/r_cg_serial_user.c **** ***************************************************************************************************
  32:../src/r_cg_serial_user.c **** #include "r_cg_macrodriver.h"
  33:../src/r_cg_serial_user.c **** #include "r_cg_serial.h"
  34:../src/r_cg_serial_user.c **** /* Start user code for include. Do not edit comment generated here */
  35:../src/r_cg_serial_user.c **** /* End user code. Do not edit comment generated here */
  36:../src/r_cg_serial_user.c **** #include "r_cg_userdefine.h"
  37:../src/r_cg_serial_user.c **** 
  38:../src/r_cg_serial_user.c **** /**************************************************************************************************
  39:../src/r_cg_serial_user.c **** Global variables and functions
  40:../src/r_cg_serial_user.c **** ***************************************************************************************************
  41:../src/r_cg_serial_user.c **** extern volatile uint8_t * gp_uart1_tx_address;         /* uart1 send buffer address */
  42:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_tx_count;            /* uart1 send data number */
  43:../src/r_cg_serial_user.c **** extern volatile uint8_t * gp_uart1_rx_address;         /* uart1 receive buffer address */
  44:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_rx_count;            /* uart1 receive data number */
  45:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_rx_length;           /* uart1 receive data length */
  46:../src/r_cg_serial_user.c **** /* Start user code for global. Do not edit comment generated here */
  47:../src/r_cg_serial_user.c **** /* End user code. Do not edit comment generated here */
  48:../src/r_cg_serial_user.c **** 
  49:../src/r_cg_serial_user.c **** /**************************************************************************************************
  50:../src/r_cg_serial_user.c **** * Function Name: r_uart1_interrupt_receive
  51:../src/r_cg_serial_user.c **** * Description  : This function is INTSR1 interrupt service routine.
  52:../src/r_cg_serial_user.c **** * Arguments    : None
  53:../src/r_cg_serial_user.c **** * Return Value : None
  54:../src/r_cg_serial_user.c **** ***************************************************************************************************
  55:../src/r_cg_serial_user.c **** void r_uart1_interrupt_receive(void)
  56:../src/r_cg_serial_user.c **** {
  43                             		.loc 1 56 0
  44                             		; start of function
  45                             		; push 16: ax bc de hl r8 r10 r12 r14
  46                             		; locals: 2 bytes
  47                             		; outgoing: 2 bytes
  48 0000 61 CF                   		sel	rb0
  49 0002 C1                      		push	ax
  50                             	.LCFI0:
  51 0003 C3                      		push	bc
  52                             	.LCFI1:
  53 0004 C5                      		push	de
  54                             	.LCFI2:
  55 0005 C7                      		push	hl
  56                             	.LCFI3:
  57 0006 61 DF                   		sel	rb1
  58 0008 C1                      		push	ax ; r8
  59                             	.LCFI4:
  60 0009 C3                      		push	bc ; r10
  61                             	.LCFI5:
  62 000a C5                      		push	de ; r12
  63                             	.LCFI6:
  64 000b C7                      		push	hl ; r14
  65                             	.LCFI7:
  66 000c 61 CF                   		sel	rb0
  67 000e 20 04                   		subw	sp, #4
  68                             	.LCFI8:
  57:../src/r_cg_serial_user.c ****     uint8_t rx_data;
  58:../src/r_cg_serial_user.c ****     uint8_t err_type;
  59:../src/r_cg_serial_user.c ****     
  60:../src/r_cg_serial_user.c ****     err_type = (uint8_t)(SSR03 & 0x0007U);
  69                             		.loc 1 60 0
  70 0010 C9 F0 06 01             		movw	r8, #262
  71 0014 AD F0                   		movw	ax, r8
  72 0016 BD F2                   		movw	r10, ax
  73 0018 FA F2                   		movw	hl, r10
  74 001a AB                      		movw	ax, [hl]
  75 001b BD F0                   		movw	r8, ax
  76 001d 8D F0                   		mov	a, r8
  77 001f 5C 07                   		and	a, #7
  78 0021 98 03                   		mov	[sp+3], a
  61:../src/r_cg_serial_user.c ****     SIR03 = (uint16_t)err_type;
  79                             		.loc 1 61 0
  80 0023 C9 F2 0E 01             		movw	r10, #270
  81 0027 88 03                   		mov	a, [sp+3]
  82 0029 70                      		mov	x, a 
  83 002a 51 00                   		mov	a, #0
  84 002c BD F0                   		movw	r8, ax
  85 002e AD F2                   		movw	ax, r10
  86 0030 BD F4                   		movw	r12, ax
  87 0032 DA F4                   		movw	bc, r12
  88 0034 AD F0                   		movw	ax, r8
  89 0036 78 00 00                		movw	[bc], ax
  62:../src/r_cg_serial_user.c **** 
  63:../src/r_cg_serial_user.c ****     if (err_type != 0U)
  90                             		.loc 1 63 0
  91 0039 88 03                   		mov	a, [sp+3]
  92 003b D1                      		cmp0	a
  93 003c 61 F8                   		 sknz
  94 003e EC 4C 00 00             		 br	!!.L2
  64:../src/r_cg_serial_user.c ****     {
  65:../src/r_cg_serial_user.c ****         r_uart1_callback_error(err_type);
  95                             		.loc 1 65 0
  96 0042 88 03                   		mov	a, [sp+3]
  97 0044 9D F0                   		mov	r8, a
  98 0046 98 00                   		mov	[sp], a
  99 0048 FC 42 01 00             		call	!!%code(_r_uart1_callback_error)
 100                             	.L2:
  66:../src/r_cg_serial_user.c ****     }
  67:../src/r_cg_serial_user.c ****     
  68:../src/r_cg_serial_user.c ****     rx_data = RXD1;
 101                             		.loc 1 68 0
 102 004c C9 F0 46 FF             		movw	r8, #-186
 103 0050 AD F0                   		movw	ax, r8
 104 0052 BD F2                   		movw	r10, ax
 105 0054 FA F2                   		movw	hl, r10
 106 0056 8B                      		mov	a, [hl]
 107 0057 9D F0                   		mov	r8, a
 108 0059 98 02                   		mov	[sp+2], a
  69:../src/r_cg_serial_user.c **** 
  70:../src/r_cg_serial_user.c ****     if (g_uart1_rx_length > g_uart1_rx_count)
 109                             		.loc 1 70 0
 110 005b AF 00 00                		movw	ax, !_g_uart1_rx_length
 111 005e BD F2                   		movw	r10, ax
 112 0060 AF 00 00                		movw	ax, !_g_uart1_rx_count
 113 0063 BD F0                   		movw	r8, ax
 114 0065 AD F2                   		movw	ax, r10
 115 0067 46 F0                   		cmpw	ax, r8
 116 0069 61 E3                   		 skh
 117 006b EC B7 00 00             		 br	!!.L3
  71:../src/r_cg_serial_user.c ****     {
  72:../src/r_cg_serial_user.c ****         *gp_uart1_rx_address = rx_data;
 118                             		.loc 1 72 0
 119 006f AF 00 00                		movw	ax, !_gp_uart1_rx_address
 120 0072 BD F0                   		movw	r8, ax
 121 0074 88 02                   		mov	a, [sp+2]
 122 0076 9D F2                   		mov	r10, a
 123 0078 AD F0                   		movw	ax, r8
 124 007a BD F4                   		movw	r12, ax
 125 007c DA F4                   		movw	bc, r12
 126 007e 8D F2                   		mov	a, r10
 127 0080 48 00 00                		mov	[bc], a
  73:../src/r_cg_serial_user.c ****         gp_uart1_rx_address++;
 128                             		.loc 1 73 0
 129 0083 AF 00 00                		movw	ax, !_gp_uart1_rx_address
 130 0086 BD F0                   		movw	r8, ax
 131 0088 A6 F0                   		incw	r8
 132 008a AD F0                   		movw	ax, r8
 133 008c BF 00 00                		movw	!_gp_uart1_rx_address, ax
  74:../src/r_cg_serial_user.c ****         g_uart1_rx_count++;
 134                             		.loc 1 74 0
 135 008f AF 00 00                		movw	ax, !_g_uart1_rx_count
 136 0092 BD F0                   		movw	r8, ax
 137 0094 A6 F0                   		incw	r8
 138 0096 AD F0                   		movw	ax, r8
 139 0098 BF 00 00                		movw	!_g_uart1_rx_count, ax
  75:../src/r_cg_serial_user.c **** 
  76:../src/r_cg_serial_user.c ****         if (g_uart1_rx_length == g_uart1_rx_count)
 140                             		.loc 1 76 0
 141 009b AF 00 00                		movw	ax, !_g_uart1_rx_length
 142 009e BD F2                   		movw	r10, ax
 143 00a0 AF 00 00                		movw	ax, !_g_uart1_rx_count
 144 00a3 BD F0                   		movw	r8, ax
 145 00a5 AD F2                   		movw	ax, r10
 146 00a7 46 F0                   		cmpw	ax, r8
 147 00a9 61 E8                   		 skz
 148 00ab EC C4 00 00             		 br	!!.L1
  77:../src/r_cg_serial_user.c ****         {
  78:../src/r_cg_serial_user.c ****             r_uart1_callback_receiveend();
 149                             		.loc 1 78 0
 150 00af FC 39 01 00             		call	!!%code(_r_uart1_callback_receiveend)
 151 00b3 EC C4 00 00             		br	!!.L1
 152                             	.L3:
  79:../src/r_cg_serial_user.c ****         }
  80:../src/r_cg_serial_user.c ****     }
  81:../src/r_cg_serial_user.c ****     else
  82:../src/r_cg_serial_user.c ****     {
  83:../src/r_cg_serial_user.c ****         r_uart1_callback_softwareoverrun(rx_data);
 153                             		.loc 1 83 0
 154 00b7 88 02                   		mov	a, [sp+2]
 155 00b9 70                      		mov	x, a 
 156 00ba 51 00                   		mov	a, #0
 157 00bc BD F0                   		movw	r8, ax
 158 00be B8 00                   		movw	[sp], ax
 159 00c0 FC 3D 01 00             		call	!!%code(_r_uart1_callback_softwareoverrun)
 160                             	.L1:
  84:../src/r_cg_serial_user.c ****     }
  85:../src/r_cg_serial_user.c **** }
 161                             		.loc 1 85 0
 162 00c4 10 04                   		addw	sp, #4
 163 00c6 61 DF                   		sel	rb1
 164 00c8 C6                      		pop	hl ; r14
 165 00c9 C4                      		pop	de ; r12
 166 00ca C2                      		pop	bc ; r10
 167 00cb C0                      		pop	ax ; r8
 168 00cc 61 CF                   		sel	rb0
 169 00ce C6                      		pop	hl
 170 00cf C4                      		pop	de
 171 00d0 C2                      		pop	bc
 172 00d1 C0                      		pop	ax
 173 00d2 61 FC                   		reti
 174                             	.LFE0:
 176                             		.global	_r_uart1_interrupt_send
 178                             	_r_uart1_interrupt_send:
 179                             	.LFB1:
  86:../src/r_cg_serial_user.c **** 
  87:../src/r_cg_serial_user.c **** /**************************************************************************************************
  88:../src/r_cg_serial_user.c **** * Function Name: r_uart1_interrupt_send
  89:../src/r_cg_serial_user.c **** * Description  : This function is INTST1 interrupt service routine.
  90:../src/r_cg_serial_user.c **** * Arguments    : None
  91:../src/r_cg_serial_user.c **** * Return Value : None
  92:../src/r_cg_serial_user.c **** ***************************************************************************************************
  93:../src/r_cg_serial_user.c **** void r_uart1_interrupt_send(void)
  94:../src/r_cg_serial_user.c **** {
 180                             		.loc 1 94 0
 181                             		; start of function
 182                             		; push 16: ax bc de hl r8 r10 r12 r14
 183 00d4 61 CF                   		sel	rb0
 184 00d6 C1                      		push	ax
 185                             	.LCFI9:
 186 00d7 C3                      		push	bc
 187                             	.LCFI10:
 188 00d8 C5                      		push	de
 189                             	.LCFI11:
 190 00d9 C7                      		push	hl
 191                             	.LCFI12:
 192 00da 61 DF                   		sel	rb1
 193 00dc C1                      		push	ax ; r8
 194                             	.LCFI13:
 195 00dd C3                      		push	bc ; r10
 196                             	.LCFI14:
 197 00de C5                      		push	de ; r12
 198                             	.LCFI15:
 199 00df C7                      		push	hl ; r14
 200                             	.LCFI16:
 201 00e0 61 CF                   		sel	rb0
  95:../src/r_cg_serial_user.c ****     if (g_uart1_tx_count > 0U)
 202                             		.loc 1 95 0
 203 00e2 AF 00 00                		movw	ax, !_g_uart1_tx_count
 204 00e5 BD F0                   		movw	r8, ax
 205 00e7 44 00 00                		cmpw	ax, #0
 206 00ea 61 F8                   		 sknz
 207 00ec EC 27 01 00             		 br	!!.L7
  96:../src/r_cg_serial_user.c ****     {
  97:../src/r_cg_serial_user.c ****         TXD1 = *gp_uart1_tx_address;
 208                             		.loc 1 97 0
 209 00f0 C9 F2 44 FF             		movw	r10, #-188
 210 00f4 AF 00 00                		movw	ax, !_gp_uart1_tx_address
 211 00f7 BD F0                   		movw	r8, ax
 212 00f9 BD F4                   		movw	r12, ax
 213 00fb FA F4                   		movw	hl, r12
 214 00fd 8B                      		mov	a, [hl]
 215 00fe 9D F0                   		mov	r8, a
 216 0100 AD F2                   		movw	ax, r10
 217 0102 BD F4                   		movw	r12, ax
 218 0104 DA F4                   		movw	bc, r12
 219 0106 8D F0                   		mov	a, r8
 220 0108 48 00 00                		mov	[bc], a
  98:../src/r_cg_serial_user.c ****         gp_uart1_tx_address++;
 221                             		.loc 1 98 0
 222 010b AF 00 00                		movw	ax, !_gp_uart1_tx_address
 223 010e BD F0                   		movw	r8, ax
 224 0110 A6 F0                   		incw	r8
 225 0112 AD F0                   		movw	ax, r8
 226 0114 BF 00 00                		movw	!_gp_uart1_tx_address, ax
  99:../src/r_cg_serial_user.c ****         g_uart1_tx_count--;
 227                             		.loc 1 99 0
 228 0117 AF 00 00                		movw	ax, !_g_uart1_tx_count
 229 011a BD F0                   		movw	r8, ax
 230 011c B6 F0                   		decw	r8
 231 011e AD F0                   		movw	ax, r8
 232 0120 BF 00 00                		movw	!_g_uart1_tx_count, ax
 233 0123 EC 2B 01 00             		br	!!.L6
 234                             	.L7:
 100:../src/r_cg_serial_user.c ****     }
 101:../src/r_cg_serial_user.c ****     else
 102:../src/r_cg_serial_user.c ****     {
 103:../src/r_cg_serial_user.c ****         r_uart1_callback_sendend();
 235                             		.loc 1 103 0
 236 0127 FC 3E 01 00             		call	!!%code(_r_uart1_callback_sendend)
 237                             	.L6:
 104:../src/r_cg_serial_user.c ****     }
 105:../src/r_cg_serial_user.c **** }
 238                             		.loc 1 105 0
 239 012b 61 DF                   		sel	rb1
 240 012d C6                      		pop	hl ; r14
 241 012e C4                      		pop	de ; r12
 242 012f C2                      		pop	bc ; r10
 243 0130 C0                      		pop	ax ; r8
 244 0131 61 CF                   		sel	rb0
 245 0133 C6                      		pop	hl
 246 0134 C4                      		pop	de
 247 0135 C2                      		pop	bc
 248 0136 C0                      		pop	ax
 249 0137 61 FC                   		reti
 250                             	.LFE1:
 253                             	_r_uart1_callback_receiveend:
 254                             	.LFB2:
 106:../src/r_cg_serial_user.c **** 
 107:../src/r_cg_serial_user.c **** /**************************************************************************************************
 108:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_receiveend
 109:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 finishes reception.
 110:../src/r_cg_serial_user.c **** * Arguments    : None
 111:../src/r_cg_serial_user.c **** * Return Value : None
 112:../src/r_cg_serial_user.c **** ***************************************************************************************************
 113:../src/r_cg_serial_user.c **** static void r_uart1_callback_receiveend(void)
 114:../src/r_cg_serial_user.c **** {
 255                             		.loc 1 114 0
 115:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 116:../src/r_cg_serial_user.c **** 	uart1RxFlag = 1U;
 256                             		.loc 1 116 0
 257 0139 E5 00 00                		oneb	!_uart1RxFlag
 117:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 118:../src/r_cg_serial_user.c **** }
 258                             		.loc 1 118 0
 259 013c D7                      		ret
 260                             	.LFE2:
 263                             	_r_uart1_callback_softwareoverrun:
 264                             	.LFB3:
 119:../src/r_cg_serial_user.c **** 
 120:../src/r_cg_serial_user.c **** /**************************************************************************************************
 121:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_softwareoverrun
 122:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 receives an overflow data.
 123:../src/r_cg_serial_user.c **** * Arguments    : rx_data -
 124:../src/r_cg_serial_user.c **** *                    receive data
 125:../src/r_cg_serial_user.c **** * Return Value : None
 126:../src/r_cg_serial_user.c **** ***************************************************************************************************
 127:../src/r_cg_serial_user.c **** static void r_uart1_callback_softwareoverrun(uint16_t rx_data)
 128:../src/r_cg_serial_user.c **** {
 265                             		.loc 1 128 0
 129:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 130:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 131:../src/r_cg_serial_user.c **** }
 266                             		.loc 1 131 0
 267 013d D7                      		ret
 268                             	.LFE3:
 271                             	_r_uart1_callback_sendend:
 272                             	.LFB4:
 132:../src/r_cg_serial_user.c **** 
 133:../src/r_cg_serial_user.c **** /**************************************************************************************************
 134:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_sendend
 135:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 finishes transmission.
 136:../src/r_cg_serial_user.c **** * Arguments    : None
 137:../src/r_cg_serial_user.c **** * Return Value : None
 138:../src/r_cg_serial_user.c **** ***************************************************************************************************
 139:../src/r_cg_serial_user.c **** static void r_uart1_callback_sendend(void)
 140:../src/r_cg_serial_user.c **** {
 273                             		.loc 1 140 0
 141:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 142:../src/r_cg_serial_user.c **** 	uart1TxFlag = 1U;
 274                             		.loc 1 142 0
 275 013e E5 00 00                		oneb	!_uart1TxFlag
 143:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 144:../src/r_cg_serial_user.c **** }
 276                             		.loc 1 144 0
 277 0141 D7                      		ret
 278                             	.LFE4:
 281                             	_r_uart1_callback_error:
 282                             	.LFB5:
 145:../src/r_cg_serial_user.c **** 
 146:../src/r_cg_serial_user.c **** /**************************************************************************************************
 147:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_error
 148:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 reception error occurs.
 149:../src/r_cg_serial_user.c **** * Arguments    : err_type -
 150:../src/r_cg_serial_user.c **** *                    error type value
 151:../src/r_cg_serial_user.c **** * Return Value : None
 152:../src/r_cg_serial_user.c **** ***************************************************************************************************
 153:../src/r_cg_serial_user.c **** static void r_uart1_callback_error(uint8_t err_type)
 154:../src/r_cg_serial_user.c **** {
 283                             		.loc 1 154 0
 155:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 156:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 157:../src/r_cg_serial_user.c **** }
 284                             		.loc 1 157 0
 285 0142 D7                      		ret
 286                             	.LFE5:
 422                             	.Letext0:
 423                             		.file 2 "../src/r_cg_macrodriver.h"
 424                             		.file 3 "../src/r_cg_userdefine.h"
 425                             		.file 4 "../src/global.c"
