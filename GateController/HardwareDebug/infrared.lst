   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_gate_status,2,2
  28                             		.comm	_mode,2,2
  29                             		.comm	_uart1RxBuf,16,1
  30                             		.comm	_uart1RxCnt,2,2
  31                             		.comm	_uart1RxFlag,1,1
  32                             		.comm	_uart1RxErrFlag,1,1
  33                             		.comm	_uart1RxOvrFlag,1,1
  34                             		.comm	_uart1TxBuf,16,1
  35                             		.comm	_uart1TxCnt,2,2
  36                             		.comm	_uart1TxFlag,1,1
  37                             		.comm	_time_now,7,1
  38                             		.comm	_uart1Status,2,2
  39                             		.comm	_ir_rxMessage,2,2
  40                             		.comm	_dataReady,1,1
  41                             		.comm	_dataPrint,1,1
  42                             		.comm	_dataResponse,1,1
  43                             		.global	_receive
  45                             	_receive:
  46                             	.LFB0:
  47                             		.file 1 "../src/infrared.c"
   1:../src/infrared.c **** /*
   2:../src/infrared.c ****  * infrared.c
   3:../src/infrared.c ****  *
   4:../src/infrared.c ****  *  Created on: Apr 13, 2016
   5:../src/infrared.c ****  *      Author: trist
   6:../src/infrared.c ****  */
   7:../src/infrared.c **** 
   8:../src/infrared.c **** #include "infrared.h"
   9:../src/infrared.c **** #include "lcd.h"
  10:../src/infrared.c **** #include "r_cg_userdefine.h"
  11:../src/infrared.c **** 
  12:../src/infrared.c **** 
  13:../src/infrared.c **** void receive(void)
  14:../src/infrared.c **** {
  48                             		.loc 1 14 0
  49                             		; start of function
  50                             		; push 2: r16
  51 0000 61 EF                   		sel	rb2
  52 0002 C1                      		push	ax ; r16
  53                             	.LCFI0:
  54 0003 61 CF                   		sel	rb0
  15:../src/infrared.c **** 	static volatile uint8_t ir_14bitMessage_inQuarterBits_counter = ir_14bitMessage_inQuarterBits_tota
  16:../src/infrared.c **** 
  17:../src/infrared.c **** 	// this is so that the rising edge of the last bit being read
  18:../src/infrared.c **** 	// doesn't trigger the beginning of the next bit of sampling too quickly
  19:../src/infrared.c **** 	static volatile uint8_t ir_sampling_ticks_at_444us = ir_sampling_ticks_at_444us_total;
  20:../src/infrared.c **** 
  21:../src/infrared.c **** 	static volatile uint8_t double_half_bit = 0x2;
  22:../src/infrared.c **** 	static volatile uint16_t ir_rxMessage_buffer = 0; //ir rx message buffer
  23:../src/infrared.c **** 	//	double_half_bit = 0;
  24:../src/infrared.c **** 
  25:../src/infrared.c **** 	if (ir_sampling_ticks_at_444us){
  55                             		.loc 1 25 0
  56 0005 8F 00 00                		mov	a, !_ir_sampling_ticks_at_444us.2081
  57 0008 9D E8                   		mov	r16, a
  58 000a D4 E8                   		cmp0	r16
  59 000c 61 F8                   		 sknz
  60 000e EC 36 01 00             		 br	!!.L2
  26:../src/infrared.c **** 		if (ir_14bitMessage_inQuarterBits_counter){
  61                             		.loc 1 26 0
  62 0012 8F 01 00                		mov	a, !_ir_14bitMessage_inQuarterBits_counter.2080
  63 0015 9D E8                   		mov	r16, a
  64 0017 D4 E8                   		cmp0	r16
  65 0019 61 F8                   		 sknz
  66 001b EC 26 01 00             		 br	!!.L3
  27:../src/infrared.c **** 			// grab first half-bit
  28:../src/infrared.c **** 			if (!((ir_14bitMessage_inQuarterBits_counter + 1) % 4)){
  67                             		.loc 1 28 0
  68 001f 8F 01 00                		mov	a, !_ir_14bitMessage_inQuarterBits_counter.2080
  69 0022 9D E8                   		mov	r16, a
  70 0024 CD E9 00                		mov	r17, #0
  71 0027 A6 E8                   		incw	r16
  72 0029 8D E8                   		mov	a, r16
  73 002b 5C 03                   		and	a, #3
  74 002d 9D F6                   		mov	r14, a
  75 002f 8D E9                   		mov	a, r17
  76 0031 5C 00                   		and	a, #0
  77 0033 9D F7                   		mov	r15, a
  78 0035 AD F6                   		movw	ax, r14
  79 0037 44 00 00                		cmpw	ax, #0
  80 003a 61 E8                   		 skz
  81 003c EC 6A 00 00             		 br	!!.L4
  29:../src/infrared.c **** 				double_half_bit = (double_half_bit | IR_RX) << 1;
  82                             		.loc 1 29 0
  83 0040 C9 F6 0E FF             		movw	r14, #-242
  84 0044 AD F6                   		movw	ax, r14
  85 0046 BD E8                   		movw	r16, ax
  86 0048 FA E8                   		movw	hl, r16
  87 004a 8B                      		mov	a, [hl]
  88 004b 9D F6                   		mov	r14, a
  89 004d 31 1A                   		shr	a, 1
  90 004f 9D F6                   		mov	r14, a
  91 0051 5A F6 01                		and	r14, #1
  92 0054 8D F6                   		mov	a, r14
  93 0056 9D F7                   		mov	r15, a
  94 0058 8F 02 00                		mov	a, !_double_half_bit.2082
  95 005b 9D F6                   		mov	r14, a
  96 005d 8D F7                   		mov	a, r15
  97 005f 6B F6                   		or	a, r14
  98 0061 9D F6                   		mov	r14, a
  99 0063 61 01                   		add	a, a
 100 0065 9D F6                   		mov	r14, a
 101 0067 9F 02 00                		mov	!_double_half_bit.2082, a
 102                             	.L4:
  30:../src/infrared.c **** 			}
  31:../src/infrared.c **** 
  32:../src/infrared.c **** 			// if at the end of a full bit
  33:../src/infrared.c **** 			if (!((ir_14bitMessage_inQuarterBits_counter - 1) % 4)){
 103                             		.loc 1 33 0
 104 006a 8F 01 00                		mov	a, !_ir_14bitMessage_inQuarterBits_counter.2080
 105 006d 9D F6                   		mov	r14, a
 106 006f CD F7 00                		mov	r15, #0
 107 0072 B6 F6                   		decw	r14
 108 0074 8D F6                   		mov	a, r14
 109 0076 5C 03                   		and	a, #3
 110 0078 9D F4                   		mov	r12, a
 111 007a 8D F7                   		mov	a, r15
 112 007c 5C 00                   		and	a, #0
 113 007e 9D F5                   		mov	r13, a
 114 0080 AD F4                   		movw	ax, r12
 115 0082 44 00 00                		cmpw	ax, #0
 116 0085 61 E8                   		 skz
 117 0087 EC 1A 01 00             		 br	!!.L5
  34:../src/infrared.c **** 				double_half_bit |= IR_RX;
 118                             		.loc 1 34 0
 119 008b C9 F4 0E FF             		movw	r12, #-242
 120 008f AD F4                   		movw	ax, r12
 121 0091 BD F6                   		movw	r14, ax
 122 0093 FA F6                   		movw	hl, r14
 123 0095 8B                      		mov	a, [hl]
 124 0096 9D F4                   		mov	r12, a
 125 0098 31 1A                   		shr	a, 1
 126 009a 9D F4                   		mov	r12, a
 127 009c 5A F4 01                		and	r12, #1
 128 009f 8D F4                   		mov	a, r12
 129 00a1 9D F5                   		mov	r13, a
 130 00a3 8F 02 00                		mov	a, !_double_half_bit.2082
 131 00a6 9D F4                   		mov	r12, a
 132 00a8 8D F5                   		mov	a, r13
 133 00aa 6B F4                   		or	a, r12
 134 00ac 9D F4                   		mov	r12, a
 135 00ae 9F 02 00                		mov	!_double_half_bit.2082, a
  35:../src/infrared.c **** 				if (!double_half_bit || (double_half_bit != 0x3)){
 136                             		.loc 1 35 0
 137 00b1 8F 02 00                		mov	a, !_double_half_bit.2082
 138 00b4 9D F4                   		mov	r12, a
 139 00b6 D4 F4                   		cmp0	r12
 140 00b8 61 F8                   		 sknz
 141 00ba EC CC 00 00             		 br	!!.L6
 142                             		.loc 1 35 0 is_stmt 0 discriminator 1
 143 00be 8F 02 00                		mov	a, !_double_half_bit.2082
 144 00c1 9D F4                   		mov	r12, a
 145 00c3 4A F4 03                		cmp	r12, #3
 146 00c6 61 F8                   		 sknz
 147 00c8 EC 17 01 00             		 br	!!.L7
 148                             	.L6:
  36:../src/infrared.c **** 					// if it is a 0x10 or 0x01, then take the 2nd lowest significant bit
  37:../src/infrared.c **** 					ir_rxMessage_buffer |= ((double_half_bit & 0x2) >> 1);
 149                             		.loc 1 37 0 is_stmt 1
 150 00cc 8F 02 00                		mov	a, !_double_half_bit.2082
 151 00cf 9D F4                   		mov	r12, a
 152 00d1 CD F5 00                		mov	r13, #0
 153 00d4 8D F4                   		mov	a, r12
 154 00d6 5C 02                   		and	a, #2
 155 00d8 9D F2                   		mov	r10, a
 156 00da 8D F5                   		mov	a, r13
 157 00dc 5C 00                   		and	a, #0
 158 00de 9D F3                   		mov	r11, a
 159 00e0 AD F2                   		movw	ax, r10
 160 00e2 31 1F                   		sarw	ax, 1
 161 00e4 BD F2                   		movw	r10, ax
 162 00e6 BD F4                   		movw	r12, ax
 163 00e8 AF 00 00                		movw	ax, !_ir_rxMessage_buffer.2083
 164 00eb BD F2                   		movw	r10, ax
 165 00ed 8D F4                   		mov	a, r12
 166 00ef 6B F2                   		or	a, r10
 167 00f1 9D F0                   		mov	r8, a
 168 00f3 8D F5                   		mov	a, r13
 169 00f5 6B F3                   		or	a, r11
 170 00f7 9D F1                   		mov	r9, a
 171 00f9 AD F0                   		movw	ax, r8
 172 00fb BF 00 00                		movw	!_ir_rxMessage_buffer.2083, ax
  38:../src/infrared.c **** 					// if it's not the last bit, make place for the next bit
  39:../src/infrared.c **** 					if (ir_14bitMessage_inQuarterBits_counter - 1){
 173                             		.loc 1 39 0
 174 00fe 8F 01 00                		mov	a, !_ir_14bitMessage_inQuarterBits_counter.2080
 175 0101 9D F0                   		mov	r8, a
 176 0103 4A F0 01                		cmp	r8, #1
 177 0106 61 F8                   		 sknz
 178 0108 EC 17 01 00             		 br	!!.L7
  40:../src/infrared.c **** 						ir_rxMessage_buffer <<= 1;
 179                             		.loc 1 40 0
 180 010c AF 00 00                		movw	ax, !_ir_rxMessage_buffer.2083
 181 010f BD F0                   		movw	r8, ax
 182 0111 01                      		addw	ax, ax
 183 0112 BD F0                   		movw	r8, ax
 184 0114 BF 00 00                		movw	!_ir_rxMessage_buffer.2083, ax
 185                             	.L7:
  41:../src/infrared.c **** 					}
  42:../src/infrared.c **** 				}
  43:../src/infrared.c **** 				double_half_bit = 0;
 186                             		.loc 1 43 0
 187 0117 F5 02 00                		clrb	!_double_half_bit.2082
 188                             	.L5:
  44:../src/infrared.c **** 			}
  45:../src/infrared.c **** 			ir_14bitMessage_inQuarterBits_counter--;
 189                             		.loc 1 45 0
 190 011a 8F 01 00                		mov	a, !_ir_14bitMessage_inQuarterBits_counter.2080
 191 011d 9D F0                   		mov	r8, a
 192 011f B4 F0                   		dec	r8
 193 0121 8D F0                   		mov	a, r8
 194 0123 9F 01 00                		mov	!_ir_14bitMessage_inQuarterBits_counter.2080, a
 195                             	.L3:
  46:../src/infrared.c **** 		}
  47:../src/infrared.c **** 		ir_sampling_ticks_at_444us--;
 196                             		.loc 1 47 0
 197 0126 8F 00 00                		mov	a, !_ir_sampling_ticks_at_444us.2081
 198 0129 9D F0                   		mov	r8, a
 199 012b B4 F0                   		dec	r8
 200 012d 8D F0                   		mov	a, r8
 201 012f 9F 00 00                		mov	!_ir_sampling_ticks_at_444us.2081, a
 202 0132 EC 62 01 00             		br	!!.L1
 203                             	.L2:
 204                             	.LBB2:
  48:../src/infrared.c **** 	}
  49:../src/infrared.c **** 	else
  50:../src/infrared.c **** 	{
  51:../src/infrared.c **** 		ir_14bitMessage_inQuarterBits_counter = ir_14bitMessage_inQuarterBits_total;
 205                             		.loc 1 51 0
 206 0136 51 35                   		mov	a, #53
 207 0138 9F 01 00                		mov	!_ir_14bitMessage_inQuarterBits_counter.2080, a
  52:../src/infrared.c **** 		ir_sampling_ticks_at_444us = ir_sampling_ticks_at_444us_total;
 208                             		.loc 1 52 0
 209 013b 51 37                   		mov	a, #55
 210 013d 9F 00 00                		mov	!_ir_sampling_ticks_at_444us.2081, a
  53:../src/infrared.c **** 		ir_rxMessage = ir_rxMessage_buffer;
 211                             		.loc 1 53 0
 212 0140 AF 00 00                		movw	ax, !_ir_rxMessage_buffer.2083
 213 0143 BD F0                   		movw	r8, ax
 214 0145 BF 00 00                		movw	!_ir_rxMessage, ax
  54:../src/infrared.c **** 		dataReady = 1;
 215                             		.loc 1 54 0
 216 0148 E5 00 00                		oneb	!_dataReady
  55:../src/infrared.c **** 		dataResponse = 1;
 217                             		.loc 1 55 0
 218 014b E5 00 00                		oneb	!_dataResponse
  56:../src/infrared.c **** 		dataPrint = 1;
 219                             		.loc 1 56 0
 220 014e E5 00 00                		oneb	!_dataPrint
  57:../src/infrared.c **** 		ir_rxMessage_buffer = 0;
 221                             		.loc 1 57 0
 222 0151 F6                      		clrw	ax
 223 0152 BF 00 00                		movw	!_ir_rxMessage_buffer.2083, ax
  58:../src/infrared.c **** 		double_half_bit = 0x2;
 224                             		.loc 1 58 0
 225 0155 51 02                   		mov	a, #2
 226 0157 9F 02 00                		mov	!_double_half_bit.2082, a
  59:../src/infrared.c **** 		R_TAU0_Channel3_Stop();
 227                             		.loc 1 59 0
 228 015a FC 00 00 00             		call	!!%code(_R_TAU0_Channel3_Stop)
  60:../src/infrared.c **** 		R_INTC7_Start();
 229                             		.loc 1 60 0
 230 015e FC 00 00 00             		call	!!%code(_R_INTC7_Start)
 231                             	.L1:
 232                             	.LBE2:
  61:../src/infrared.c **** 	}
  62:../src/infrared.c **** }
 233                             		.loc 1 62 0
 234 0162 61 EF                   		sel	rb2
 235 0164 C0                      		pop	ax ; r16
 236 0165 61 CF                   		sel	rb0
 237 0167 D7                      		ret
 238                             	.LFE0:
 240                             		.global	_IRcmd
 242                             	_IRcmd:
 243                             	.LFB1:
  63:../src/infrared.c **** 
  64:../src/infrared.c **** void IRcmd(void)
  65:../src/infrared.c **** {
 244                             		.loc 1 65 0
 245                             		; start of function
 246                             		; locals: 4 bytes
 247 0168 20 04                   		subw	sp, #4
 248                             	.LCFI1:
  66:../src/infrared.c **** 		if (dataReady && dataResponse)
 249                             		.loc 1 66 0
 250 016a 8F 00 00                		mov	a, !_dataReady
 251 016d 9D F0                   		mov	r8, a
 252 016f D4 F0                   		cmp0	r8
 253 0171 61 F8                   		 sknz
 254 0173 EC 72 02 00             		 br	!!.L9
 255                             		.loc 1 66 0 is_stmt 0 discriminator 1
 256 0177 8F 00 00                		mov	a, !_dataResponse
 257 017a 9D F0                   		mov	r8, a
 258 017c D4 F0                   		cmp0	r8
 259 017e 61 F8                   		 sknz
 260 0180 EC 72 02 00             		 br	!!.L9
 261                             	.LBB3:
  67:../src/infrared.c **** 		{
  68:../src/infrared.c **** 			uint8_t cmd = ir_rxMessage & 0x7;
 262                             		.loc 1 68 0 is_stmt 1
 263 0184 AF 00 00                		movw	ax, !_ir_rxMessage
 264 0187 BD F0                   		movw	r8, ax
 265 0189 8D F0                   		mov	a, r8
 266 018b 5C 07                   		and	a, #7
 267 018d 98 03                   		mov	[sp+3], a
  69:../src/infrared.c **** 			uint8_t addr = (ir_rxMessage >> 3) & 0xFF;
 268                             		.loc 1 69 0
 269 018f AF 00 00                		movw	ax, !_ir_rxMessage
 270 0192 BD F0                   		movw	r8, ax
 271 0194 31 3E                   		shrw	ax, 3
 272 0196 BD F0                   		movw	r8, ax
 273 0198 8D F0                   		mov	a, r8
 274 019a 98 02                   		mov	[sp+2], a
  70:../src/infrared.c **** 			uint8_t tog = (ir_rxMessage >> 11) & 0x1;
 275                             		.loc 1 70 0
 276 019c AF 00 00                		movw	ax, !_ir_rxMessage
 277 019f BD F0                   		movw	r8, ax
 278 01a1 31 BE                   		shrw	ax, 11
 279 01a3 BD F0                   		movw	r8, ax
 280 01a5 8D F0                   		mov	a, r8
 281 01a7 5C 01                   		and	a, #1
 282 01a9 98 01                   		mov	[sp+1], a
  71:../src/infrared.c **** 
  72:../src/infrared.c **** 			if (addr == TNELaddr)
 283                             		.loc 1 72 0
 284 01ab 88 02                   		mov	a, [sp+2]
 285 01ad 4C 84                   		cmp	a, #-124
 286 01af 61 E8                   		 skz
 287 01b1 EC 6F 02 00             		 br	!!.L11
  73:../src/infrared.c **** 			{
  74:../src/infrared.c **** 				switch(cmd)
 288                             		.loc 1 74 0
 289 01b5 88 03                   		mov	a, [sp+3]
 290 01b7 70                      		mov	x, a 
 291 01b8 51 00                   		mov	a, #0
 292 01ba BD F0                   		movw	r8, ax
 293 01bc 44 02 00                		cmpw	ax, #2
 294 01bf 61 F8                   		 sknz
 295 01c1 EC 15 02 00             		 br	!!.L12
 296 01c5 AD F0                   		movw	ax, r8
 297 01c7 44 03 00                		cmpw	ax, #3
 298 01ca 61 F8                   		 sknz
 299 01cc EC 4F 02 00             		 br	!!.L13
 300 01d0 AD F0                   		movw	ax, r8
 301 01d2 44 01 00                		cmpw	ax, #1
 302 01d5 61 E8                   		 skz
 303 01d7 EC 6F 02 00             		 br	!!.L11
  75:../src/infrared.c **** 				{
  76:../src/infrared.c **** 					case 0x1: // OPEN
  77:../src/infrared.c **** 						//if (mode) echo(0x88);
  78:../src/infrared.c **** 						DVR_PHASE = 0;
 304                             		.loc 1 78 0
 305 01db C9 F0 04 FF             		movw	r8, #-252
 306 01df AD F0                   		movw	ax, r8
 307 01e1 BD F4                   		movw	r12, ax
 308 01e3 FA F4                   		movw	hl, r12
 309 01e5 8B                      		mov	a, [hl]
 310 01e6 9D F2                   		mov	r10, a
 311 01e8 5A F2 FD                		and	r10, #-3
 312 01eb AD F0                   		movw	ax, r8
 313 01ed DA F4                   		movw	bc, r12
 314 01ef 8D F2                   		mov	a, r10
 315 01f1 48 00 00                		mov	[bc], a
  79:../src/infrared.c **** 						DVR_nSLEEP = 1;
 316                             		.loc 1 79 0
 317 01f4 C9 F0 04 FF             		movw	r8, #-252
 318 01f8 AD F0                   		movw	ax, r8
 319 01fa BD F4                   		movw	r12, ax
 320 01fc FA F4                   		movw	hl, r12
 321 01fe 8B                      		mov	a, [hl]
 322 01ff 9D F2                   		mov	r10, a
 323 0201 6A F2 04                		or	r10, #4
 324 0204 AD F0                   		movw	ax, r8
 325 0206 DA F4                   		movw	bc, r12
 326 0208 8D F2                   		mov	a, r10
 327 020a 48 00 00                		mov	[bc], a
  80:../src/infrared.c **** 						gate_status = GS_UNKNOWN;
 328                             		.loc 1 80 0
 329 020d F6                      		clrw	ax
 330 020e BF 00 00                		movw	!_gate_status, ax
  81:../src/infrared.c **** 						break;
 331                             		.loc 1 81 0
 332 0211 EC 6F 02 00             		br	!!.L11
 333                             	.L12:
  82:../src/infrared.c **** 					case 0x2: // CLOSE
  83:../src/infrared.c **** 						//if (mode) echo(0x90);
  84:../src/infrared.c **** 						DVR_PHASE = 1;
 334                             		.loc 1 84 0
 335 0215 C9 F0 04 FF             		movw	r8, #-252
 336 0219 AD F0                   		movw	ax, r8
 337 021b BD F4                   		movw	r12, ax
 338 021d FA F4                   		movw	hl, r12
 339 021f 8B                      		mov	a, [hl]
 340 0220 9D F2                   		mov	r10, a
 341 0222 6A F2 02                		or	r10, #2
 342 0225 AD F0                   		movw	ax, r8
 343 0227 DA F4                   		movw	bc, r12
 344 0229 8D F2                   		mov	a, r10
 345 022b 48 00 00                		mov	[bc], a
  85:../src/infrared.c **** 						DVR_nSLEEP = 1;
 346                             		.loc 1 85 0
 347 022e C9 F0 04 FF             		movw	r8, #-252
 348 0232 AD F0                   		movw	ax, r8
 349 0234 BD F4                   		movw	r12, ax
 350 0236 FA F4                   		movw	hl, r12
 351 0238 8B                      		mov	a, [hl]
 352 0239 9D F2                   		mov	r10, a
 353 023b 6A F2 04                		or	r10, #4
 354 023e AD F0                   		movw	ax, r8
 355 0240 DA F4                   		movw	bc, r12
 356 0242 8D F2                   		mov	a, r10
 357 0244 48 00 00                		mov	[bc], a
  86:../src/infrared.c **** 						gate_status = GS_UNKNOWN;
 358                             		.loc 1 86 0
 359 0247 F6                      		clrw	ax
 360 0248 BF 00 00                		movw	!_gate_status, ax
  87:../src/infrared.c **** 						break;
 361                             		.loc 1 87 0
 362 024b EC 6F 02 00             		br	!!.L11
 363                             	.L13:
  88:../src/infrared.c **** 					case 0x3: //ESTOP
  89:../src/infrared.c **** 						//if (mode) echo(0x84);
  90:../src/infrared.c **** 						DVR_nSLEEP = 0;
 364                             		.loc 1 90 0
 365 024f C9 F0 04 FF             		movw	r8, #-252
 366 0253 AD F0                   		movw	ax, r8
 367 0255 BD F4                   		movw	r12, ax
 368 0257 FA F4                   		movw	hl, r12
 369 0259 8B                      		mov	a, [hl]
 370 025a 9D F2                   		mov	r10, a
 371 025c 5A F2 FB                		and	r10, #-5
 372 025f AD F0                   		movw	ax, r8
 373 0261 DA F4                   		movw	bc, r12
 374 0263 8D F2                   		mov	a, r10
 375 0265 48 00 00                		mov	[bc], a
  91:../src/infrared.c **** 						gate_status = GS_ESTOP;
 376                             		.loc 1 91 0
 377 0268 30 03 00                		movw	ax, #3
 378 026b BF 00 00                		movw	!_gate_status, ax
  92:../src/infrared.c **** 						break;
 379                             		.loc 1 92 0
 380 026e 00                      		nop
 381                             	.L11:
  93:../src/infrared.c **** 				}
  94:../src/infrared.c **** 			}
  95:../src/infrared.c **** 			dataResponse = 0;
 382                             		.loc 1 95 0
 383 026f F5 00 00                		clrb	!_dataResponse
 384                             	.L9:
 385                             	.LBE3:
  96:../src/infrared.c **** 		}
  97:../src/infrared.c **** 
  98:../src/infrared.c **** 
  99:../src/infrared.c **** }
 386                             		.loc 1 99 0
 387 0272 10 04                   		addw	sp, #4
 388 0274 D7                      		ret
 389                             	.LFE1:
 391                             	.data
 394                             	_ir_sampling_ticks_at_444us.2081:
 395 0000 37                      		.byte	55
 398                             	_ir_14bitMessage_inQuarterBits_counter.2080:
 399 0001 35                      		.byte	53
 402                             	_double_half_bit.2082:
 403 0002 02                      		.byte	2
 404                             		.local	_ir_rxMessage_buffer.2083
 405                             		.comm	_ir_rxMessage_buffer.2083,2,2
 448                             	.Letext0:
 449                             		.file 2 "../src/iodefine.h"
 450                             		.file 3 "../src/r_cg_macrodriver.h"
 451                             		.file 4 "../src/r_cg_rtc.h"
 452                             		.file 5 "../src/r_cg_userdefine.h"
 453                             		.file 6 "../src/global.c"
 454                             		.file 7 "../src/infrared.h"
