   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_ir_rxMessage,2,2
  28                             		.comm	_dataReady,1,1
  29                             		.comm	_dataPrint,1,1
  30                             		.comm	_dataResponse,1,1
  31                             		.comm	_ADC_done,1,1
  32                             		.comm	_ADC_value,8,2
  33                             		.comm	_INTAD_FSM_state,1,1
  34                             		.comm	_adc_ready,1,1
  35                             		.comm	_latest_current_reading,1,1
  36                             		.comm	_ADC_counter,1,1
  37                             		.comm	_timer_adc_reader_10Hz_interrupt,1,1
  38                             		.comm	_initial_current,1,1
  39                             		.comm	_collision_det_counter,1,1
  40                             		.comm	_collision_det,1,1
  41                             		.comm	_gate_status,2,2
  42                             		.comm	_mode,1,1
  43                             		.comm	_GS_PREV_STATE,1,1
  44                             		.comm	_uart1RxBuf,16,1
  45                             		.comm	_uart1RxCnt,2,2
  46                             		.comm	_uart1RxFlag,1,1
  47                             		.comm	_uart1RxErrFlag,1,1
  48                             		.comm	_uart1RxOvrFlag,1,1
  49                             		.comm	_uart1TxBuf,16,1
  50                             		.comm	_uart1TxCnt,2,2
  51                             		.comm	_uart1TxFlag,1,1
  52                             		.comm	_time_now,7,1
  53                             		.comm	_uart1Status,2,2
  54                             		.comm	_myBuffer,16,1
  55                             		.comm	_myCounter,2,2
  56                             		.comm	_pwm_counter,2,2
  57                             		.comm	_pwm_edge,1,1
  58                             		.comm	_switch_edge,1,1
  59                             		.comm	_check_btns,1,1
  60                             		.comm	_gate_cmd,1,1
  61                             		.comm	_auto_close,1,1
  62                             		.comm	_auto_close_cntr,1,1
  63                             		.section	.rodata
  64                             	.LC0:
  65 0000 4E 6F 72 6D 61 6C 20 6D 		.string	"Normal mode"
  65      6F 64 65 00 
  66                             	.text
  67                             		.global	_init
  69                             	_init:
  70                             	.LFB0:
  71                             		.file 1 "../src/global.c"
   1:../src/global.c **** /*
   2:../src/global.c ****  * global.c
   3:../src/global.c ****  *
   4:../src/global.c ****  *  Created on: Feb 21, 2016
   5:../src/global.c ****  *      Author: Tristan Nel - 18179460
   6:../src/global.c ****  */
   7:../src/global.c **** 
   8:../src/global.c **** #include "global.h"
   9:../src/global.c **** #include "r_cg_rtc.h"
  10:../src/global.c **** 
  11:../src/global.c **** //Functions
  12:../src/global.c **** void init(void)
  13:../src/global.c **** {
  72                             		.loc 1 13 0
  73                             		; start of function
  74                             		; outgoing: 2 bytes
  75 0000 20 02                   		subw	sp, #2
  76                             	.LCFI0:
  14:../src/global.c **** 	//Open connections
  15:../src/global.c **** 	EI();
  77                             		.loc 1 15 0
  78                             	 ; 15 "../src/global.c" 1
  79 0002 71 7A FA                		ei
  80                             	 ; 0 "" 2
  16:../src/global.c **** 	R_RTC_Start();
  81                             		.loc 1 16 0
  82 0005 FC 00 00 00             		call	!!%code(_R_RTC_Start)
  17:../src/global.c **** 	R_UART1_Start();
  83                             		.loc 1 17 0
  84 0009 FC 00 00 00             		call	!!%code(_R_UART1_Start)
  18:../src/global.c **** 	R_TAU0_Channel0_Start();
  85                             		.loc 1 18 0
  86 000d FC 00 00 00             		call	!!%code(_R_TAU0_Channel0_Start)
  19:../src/global.c **** 	R_TAU0_Channel2_Start();
  87                             		.loc 1 19 0
  88 0011 FC 00 00 00             		call	!!%code(_R_TAU0_Channel2_Start)
  20:../src/global.c **** 	R_TAU0_Channel1_Lower8bits_Start();
  89                             		.loc 1 20 0
  90 0015 FC 00 00 00             		call	!!%code(_R_TAU0_Channel1_Lower8bits_Start)
  21:../src/global.c **** 
  22:../src/global.c **** 	R_ADC_Start();
  91                             		.loc 1 22 0
  92 0019 FC 00 00 00             		call	!!%code(_R_ADC_Start)
  23:../src/global.c **** 
  24:../src/global.c **** 	R_TMR_RD0_Start();
  93                             		.loc 1 24 0
  94 001d FC 00 00 00             		call	!!%code(_R_TMR_RD0_Start)
  25:../src/global.c **** 
  26:../src/global.c **** 	gate_cmd = 0;
  95                             		.loc 1 26 0
  96 0021 F5 00 00                		clrb	!_gate_cmd
  27:../src/global.c **** 	auto_close_cntr = 0;
  97                             		.loc 1 27 0
  98 0024 F5 00 00                		clrb	!_auto_close_cntr
  28:../src/global.c **** 	auto_close = 0;
  99                             		.loc 1 28 0
 100 0027 F5 00 00                		clrb	!_auto_close
  29:../src/global.c **** 	collision_det_counter = 0;
 101                             		.loc 1 29 0
 102 002a F5 00 00                		clrb	!_collision_det_counter
  30:../src/global.c **** 	collision_det = 0;
 103                             		.loc 1 30 0
 104 002d F5 00 00                		clrb	!_collision_det
  31:../src/global.c **** 	myCounter = 0;
 105                             		.loc 1 31 0
 106 0030 F6                      		clrw	ax
 107 0031 BF 00 00                		movw	!_myCounter, ax
  32:../src/global.c **** 	dataPrint = 0;
 108                             		.loc 1 32 0
 109 0034 F5 00 00                		clrb	!_dataPrint
  33:../src/global.c **** 	dataResponse = 1;
 110                             		.loc 1 33 0
 111 0037 E5 00 00                		oneb	!_dataResponse
  34:../src/global.c **** 	dataReady = 0;
 112                             		.loc 1 34 0
 113 003a F5 00 00                		clrb	!_dataReady
  35:../src/global.c **** 	R_INTC7_Start();
 114                             		.loc 1 35 0
 115 003d FC 00 00 00             		call	!!%code(_R_INTC7_Start)
  36:../src/global.c **** 
  37:../src/global.c **** 	//Init flags
  38:../src/global.c **** 	uart1RxFlag = 0U;
 116                             		.loc 1 38 0
 117 0041 F5 00 00                		clrb	!_uart1RxFlag
  39:../src/global.c **** 	uart1TxFlag = 0U;
 118                             		.loc 1 39 0
 119 0044 F5 00 00                		clrb	!_uart1TxFlag
  40:../src/global.c **** 
  41:../src/global.c **** 	//Welcome user
  42:../src/global.c **** 	initLcd();
 120                             		.loc 1 42 0
 121 0047 FC 00 00 00             		call	!!%code(_initLcd)
  43:../src/global.c **** 	welcome();
 122                             		.loc 1 43 0
 123 004b FC 00 00 00             		call	!!%code(_welcome)
  44:../src/global.c **** 	initLcd();
 124                             		.loc 1 44 0
 125 004f FC 00 00 00             		call	!!%code(_initLcd)
  45:../src/global.c **** 
  46:../src/global.c **** 	GS_PREV_STATE = gate_status;
 126                             		.loc 1 46 0
 127 0053 AF 00 00                		movw	ax, !_gate_status
 128 0056 BD F0                   		movw	r8, ax
 129 0058 8D F0                   		mov	a, r8
 130 005a 9F 00 00                		mov	!_GS_PREV_STATE, a
  47:../src/global.c **** 	gate_status = GS_UNKNOWN;
 131                             		.loc 1 47 0
 132 005d F6                      		clrw	ax
 133 005e BF 00 00                		movw	!_gate_status, ax
  48:../src/global.c **** 	//Start in Normal mode
  49:../src/global.c **** 	mode = 0;
 134                             		.loc 1 49 0
 135 0061 F5 00 00                		clrb	!_mode
  50:../src/global.c **** 	echo(0x80);
 136                             		.loc 1 50 0
 137 0064 51 80                   		mov	a, #-128
 138 0066 98 00                   		mov	[sp], a
 139 0068 FC 00 00 00             		call	!!%code(_echo)
  51:../src/global.c **** 	delayNoInt(100);
 140                             		.loc 1 51 0
 141 006c 30 64 00                		movw	ax, #100
 142 006f B8 00                   		movw	[sp], ax
 143 0071 FC 00 00 00             		call	!!%code(_delayNoInt)
  52:../src/global.c **** 	uart1TxFlag = 0U; // clear tx flag
 144                             		.loc 1 52 0
 145 0075 F5 00 00                		clrb	!_uart1TxFlag
  53:../src/global.c **** 	print_lcd("Normal mode");
 146                             		.loc 1 53 0
 147 0078 30 00 00                		movw	ax, #.LC0
 148 007b B8 00                   		movw	[sp], ax
 149 007d FC 00 00 00             		call	!!%code(_print_lcd)
  54:../src/global.c **** 
  55:../src/global.c **** 	//Motor off
  56:../src/global.c **** 	DVR_nSLEEP = 0;
 150                             		.loc 1 56 0
 151 0081 C9 F0 04 FF             		movw	r8, #-252
 152 0085 AD F0                   		movw	ax, r8
 153 0087 BD F4                   		movw	r12, ax
 154 0089 FA F4                   		movw	hl, r12
 155 008b 8B                      		mov	a, [hl]
 156 008c 9D F2                   		mov	r10, a
 157 008e 5A F2 FB                		and	r10, #-5
 158 0091 AD F0                   		movw	ax, r8
 159 0093 DA F4                   		movw	bc, r12
 160 0095 8D F2                   		mov	a, r10
 161 0097 48 00 00                		mov	[bc], a
  57:../src/global.c **** }
 162                             		.loc 1 57 0
 163 009a 10 02                   		addw	sp, #2
 164 009c D7                      		ret
 165                             	.LFE0:
 167                             		.section	.rodata
 168                             	.LC1:
 169 000c 54 65 73 74 20 6D 6F 64 		.string	"Test mode"
 169      65 00 
 170                             	.LC2:
 171 0016 47 61 74 65 20 6F 70 65 		.string	"Gate opening..."
 171      6E 69 6E 67 2E 2E 2E 00 
 172                             	.LC3:
 173 0026 47 61 74 65 20 63 6C 6F 		.string	"Gate closing..."
 173      73 69 6E 67 2E 2E 2E 00 
 174                             	.LC4:
 175 0036 4F 70 65 6E 65 64 00    		.string	"Opened"
 176                             	.LC5:
 177 003d 43 6C 6F 73 65 64 00    		.string	"Closed"
 178                             	.LC6:
 179 0044 55 6E 6B 6E 6F 77 6E 00 		.string	"Unknown"
 180                             	.LC7:
 181 004c 45 6D 65 72 67 65 6E 63 		.string	"Emergency stop"
 181      79 20 73 74 6F 70 00 
 182                             	.text
 183                             		.global	_core
 185                             	_core:
 186                             	.LFB1:
  58:../src/global.c **** 
  59:../src/global.c **** void core(void)
  60:../src/global.c **** {
 187                             		.loc 1 60 0
 188                             		; start of function
 189                             		; locals: 36 bytes
 190                             		; outgoing: 8 bytes
 191 009d 20 2C                   		subw	sp, #44
 192                             	.LCFI1:
  61:../src/global.c **** 	uart1RxBuf[0] = 'r'; 								//Init to non-arbitrary
 193                             		.loc 1 61 0
 194 009f 51 72                   		mov	a, #114
 195 00a1 9F 00 00                		mov	!_uart1RxBuf, a
  62:../src/global.c **** 	uart1Status = R_UART1_Receive(&uart1RxBuf[0],1); 	//Prime UART to receive
 196                             		.loc 1 62 0
 197 00a4 30 00 00                		movw	ax, #_uart1RxBuf
 198 00a7 B8 00                   		movw	[sp], ax
 199 00a9 E6                      		onew	ax
 200 00aa B8 02                   		movw	[sp+2], ax
 201 00ac FC 00 00 00             		call	!!%code(_R_UART1_Receive)
 202 00b0 AD F0                   		movw	ax, r8
 203 00b2 BF 00 00                		movw	!_uart1Status, ax
  63:../src/global.c **** 	//PM7&=0x7F;
  64:../src/global.c **** 	ir_rxMessage = 0x0000;
 204                             		.loc 1 64 0
 205 00b5 F6                      		clrw	ax
 206 00b6 BF 00 00                		movw	!_ir_rxMessage, ax
 207                             	.L36:
  65:../src/global.c **** 	while (1U)
  66:../src/global.c **** 	{
  67:../src/global.c **** 		mtrBtn();			//Check and react: switch pressed
 208                             		.loc 1 67 0
 209 00b9 FC 00 00 00             		call	!!%code(_mtrBtn)
  68:../src/global.c **** 
  69:../src/global.c **** 		boardBtn();			//Check and react: board buttons
 210                             		.loc 1 69 0
 211 00bd FC 00 00 00             		call	!!%code(_boardBtn)
  70:../src/global.c **** 
  71:../src/global.c **** 		IRcmd();			//Check and react: IR command
 212                             		.loc 1 71 0
 213 00c1 FC 00 00 00             		call	!!%code(_IRcmd)
  72:../src/global.c **** 
  73:../src/global.c **** 		if (dataReady && dataPrint && mode)	//Check and react: print to LCD
 214                             		.loc 1 73 0
 215 00c5 8F 00 00                		mov	a, !_dataReady
 216 00c8 9D F0                   		mov	r8, a
 217 00ca D4 F0                   		cmp0	r8
 218 00cc 61 F8                   		 sknz
 219 00ce EC 22 01 00             		 br	!!.L3
 220                             		.loc 1 73 0 is_stmt 0 discriminator 1
 221 00d2 8F 00 00                		mov	a, !_dataPrint
 222 00d5 9D F0                   		mov	r8, a
 223 00d7 D4 F0                   		cmp0	r8
 224 00d9 61 F8                   		 sknz
 225 00db EC 22 01 00             		 br	!!.L3
 226                             		.loc 1 73 0 discriminator 2
 227 00df 8F 00 00                		mov	a, !_mode
 228 00e2 9D F0                   		mov	r8, a
 229 00e4 D4 F0                   		cmp0	r8
 230 00e6 61 F8                   		 sknz
 231 00e8 EC 22 01 00             		 br	!!.L3
 232                             	.LBB2:
  74:../src/global.c **** 		{
  75:../src/global.c **** 			uint8_t ascii_word[16];
  76:../src/global.c **** 			word_to_ascii(ir_rxMessage, ascii_word);
 233                             		.loc 1 76 0 is_stmt 1
 234 00ec AF 00 00                		movw	ax, !_ir_rxMessage
 235 00ef BD F0                   		movw	r8, ax
 236 00f1 B8 00                   		movw	[sp], ax
 237 00f3 C9 F0 2C 00             		movw	r8, #44
 238 00f7 AE F8                   		movw	ax, sp
 239 00f9 BD F0                   		movw	r8, ax
 240 00fb 04 2C 00                		addw	ax, #44
 241 00fe BD F0                   		movw	r8, ax
 242 0100 04 DC FF                		addw	ax, #-36
 243 0103 B8 02                   		movw	[sp+2], ax
 244 0105 FC 00 00 00             		call	!!%code(_word_to_ascii)
  77:../src/global.c **** 			print_lcd(ascii_word);
 245                             		.loc 1 77 0
 246 0109 C9 F2 2C 00             		movw	r10, #44
 247 010d AE F8                   		movw	ax, sp
 248 010f BD F2                   		movw	r10, ax
 249 0111 04 2C 00                		addw	ax, #44
 250 0114 BD F2                   		movw	r10, ax
 251 0116 04 DC FF                		addw	ax, #-36
 252 0119 B8 00                   		movw	[sp], ax
 253 011b FC 00 00 00             		call	!!%code(_print_lcd)
  78:../src/global.c **** 			dataPrint = 0;
 254                             		.loc 1 78 0
 255 011f F5 00 00                		clrb	!_dataPrint
 256                             	.L3:
 257                             	.LBE2:
  79:../src/global.c **** 		}
  80:../src/global.c **** 
  81:../src/global.c **** 		ADC();
 258                             		.loc 1 81 0
 259 0122 FC 00 00 00             		call	!!%code(_ADC)
  82:../src/global.c **** 
  83:../src/global.c **** 		if (uart1RxFlag)	//Input received
 260                             		.loc 1 83 0
 261 0126 8F 00 00                		mov	a, !_uart1RxFlag
 262 0129 9D F0                   		mov	r8, a
 263 012b D4 F0                   		cmp0	r8
 264 012d 61 F8                   		 sknz
 265 012f EC 81 06 00             		 br	!!.L4
  84:../src/global.c **** 		{
  85:../src/global.c **** 			uart1RxFlag = 0U;
 266                             		.loc 1 85 0
 267 0133 F5 00 00                		clrb	!_uart1RxFlag
  86:../src/global.c **** 
  87:../src/global.c **** 			if(uart1RxBuf[0] == 0x81)		//TEST MODE
 268                             		.loc 1 87 0
 269 0136 8F 00 00                		mov	a, !_uart1RxBuf
 270 0139 9D F0                   		mov	r8, a
 271 013b 4A F0 81                		cmp	r8, #-127
 272 013e 61 E8                   		 skz
 273 0140 EC 67 01 00             		 br	!!.L5
  88:../src/global.c **** 			{
  89:../src/global.c **** 				mode = 1;
 274                             		.loc 1 89 0
 275 0144 E5 00 00                		oneb	!_mode
  90:../src/global.c **** 				echo(0x81);
 276                             		.loc 1 90 0
 277 0147 51 81                   		mov	a, #-127
 278 0149 98 00                   		mov	[sp], a
 279 014b FC 00 00 00             		call	!!%code(_echo)
  91:../src/global.c **** 				dataPrint = 0;
 280                             		.loc 1 91 0
 281 014f F5 00 00                		clrb	!_dataPrint
  92:../src/global.c **** 				print_lcd("Test mode");
 282                             		.loc 1 92 0
 283 0152 30 0C 00                		movw	ax, #.LC1
 284 0155 B8 00                   		movw	[sp], ax
 285 0157 FC 00 00 00             		call	!!%code(_print_lcd)
  93:../src/global.c **** 				buzzerBeep(3);
 286                             		.loc 1 93 0
 287 015b 51 03                   		mov	a, #3
 288 015d 98 00                   		mov	[sp], a
 289 015f FC 00 00 00             		call	!!%code(_buzzerBeep)
 290 0163 EC 70 06 00             		br	!!.L6
 291                             	.L5:
  94:../src/global.c **** 
  95:../src/global.c **** 			}
  96:../src/global.c **** 
  97:../src/global.c **** 			else if(uart1RxBuf[0] == 0x80)	//NORMAL MODE
 292                             		.loc 1 97 0
 293 0167 8F 00 00                		mov	a, !_uart1RxBuf
 294 016a 9D F0                   		mov	r8, a
 295 016c 4A F0 80                		cmp	r8, #-128
 296 016f 61 E8                   		 skz
 297 0171 EC 90 01 00             		 br	!!.L7
  98:../src/global.c **** 			{
  99:../src/global.c **** 				mode = 0;
 298                             		.loc 1 99 0
 299 0175 F5 00 00                		clrb	!_mode
 100:../src/global.c **** 				echo(0x80);
 300                             		.loc 1 100 0
 301 0178 51 80                   		mov	a, #-128
 302 017a 98 00                   		mov	[sp], a
 303 017c FC 00 00 00             		call	!!%code(_echo)
 101:../src/global.c **** 				dataPrint = 0;
 304                             		.loc 1 101 0
 305 0180 F5 00 00                		clrb	!_dataPrint
 102:../src/global.c **** 				print_lcd("Normal mode");
 306                             		.loc 1 102 0
 307 0183 30 00 00                		movw	ax, #.LC0
 308 0186 B8 00                   		movw	[sp], ax
 309 0188 FC 00 00 00             		call	!!%code(_print_lcd)
 310 018c EC 70 06 00             		br	!!.L6
 311                             	.L7:
 103:../src/global.c **** 			}
 104:../src/global.c **** 
 105:../src/global.c **** 			else if(uart1RxBuf[0] == 0xF0)	//BUZZER ON
 312                             		.loc 1 105 0
 313 0190 8F 00 00                		mov	a, !_uart1RxBuf
 314 0193 9D F0                   		mov	r8, a
 315 0195 4A F0 F0                		cmp	r8, #-16
 316 0198 61 E8                   		 skz
 317 019a EC AE 01 00             		 br	!!.L8
 318                             	.LBB3:
 106:../src/global.c **** 			{
 107:../src/global.c **** 				echo(0xF0);
 319                             		.loc 1 107 0
 320 019e 51 F0                   		mov	a, #-16
 321 01a0 98 00                   		mov	[sp], a
 322 01a2 FC 00 00 00             		call	!!%code(_echo)
 108:../src/global.c **** 				R_PCLBUZ0_Start();
 323                             		.loc 1 108 0
 324 01a6 FC 00 00 00             		call	!!%code(_R_PCLBUZ0_Start)
 325                             	.LBE3:
 326 01aa EC 70 06 00             		br	!!.L6
 327                             	.L8:
 109:../src/global.c **** 			}
 110:../src/global.c **** 
 111:../src/global.c **** 			else if(uart1RxBuf[0] == 0xF1)	//BUZZER OFF
 328                             		.loc 1 111 0
 329 01ae 8F 00 00                		mov	a, !_uart1RxBuf
 330 01b1 9D F0                   		mov	r8, a
 331 01b3 4A F0 F1                		cmp	r8, #-15
 332 01b6 61 E8                   		 skz
 333 01b8 EC CC 01 00             		 br	!!.L9
 334                             	.LBB4:
 112:../src/global.c **** 			{
 113:../src/global.c **** 				echo(0xF1);
 335                             		.loc 1 113 0
 336 01bc 51 F1                   		mov	a, #-15
 337 01be 98 00                   		mov	[sp], a
 338 01c0 FC 00 00 00             		call	!!%code(_echo)
 114:../src/global.c **** 				R_PCLBUZ0_Stop();
 339                             		.loc 1 114 0
 340 01c4 FC 00 00 00             		call	!!%code(_R_PCLBUZ0_Stop)
 341                             	.LBE4:
 342 01c8 EC 70 06 00             		br	!!.L6
 343                             	.L9:
 115:../src/global.c **** 			}
 116:../src/global.c **** 
 117:../src/global.c **** 			else if(uart1RxBuf[0] == 0xF9)	//OPEN GATE
 344                             		.loc 1 117 0
 345 01cc 8F 00 00                		mov	a, !_uart1RxBuf
 346 01cf 9D F0                   		mov	r8, a
 347 01d1 4A F0 F9                		cmp	r8, #-7
 348 01d4 61 E8                   		 skz
 349 01d6 EC F3 01 00             		 br	!!.L10
 118:../src/global.c **** 			{
 119:../src/global.c **** 				echo(0xF9);
 350                             		.loc 1 119 0
 351 01da 51 F9                   		mov	a, #-7
 352 01dc 98 00                   		mov	[sp], a
 353 01de FC 00 00 00             		call	!!%code(_echo)
 120:../src/global.c **** 				openGate();
 354                             		.loc 1 120 0
 355 01e2 FC 00 00 00             		call	!!%code(_openGate)
 121:../src/global.c **** 				print_lcd("Gate opening...");
 356                             		.loc 1 121 0
 357 01e6 30 16 00                		movw	ax, #.LC2
 358 01e9 B8 00                   		movw	[sp], ax
 359 01eb FC 00 00 00             		call	!!%code(_print_lcd)
 360 01ef EC 70 06 00             		br	!!.L6
 361                             	.L10:
 122:../src/global.c **** 			}
 123:../src/global.c **** 
 124:../src/global.c **** 			else if(uart1RxBuf[0] == 0xF8)	//CLOSE GATE
 362                             		.loc 1 124 0
 363 01f3 8F 00 00                		mov	a, !_uart1RxBuf
 364 01f6 9D F0                   		mov	r8, a
 365 01f8 4A F0 F8                		cmp	r8, #-8
 366 01fb 61 E8                   		 skz
 367 01fd EC 1A 02 00             		 br	!!.L11
 125:../src/global.c **** 			{
 126:../src/global.c **** 				echo(0xF8);
 368                             		.loc 1 126 0
 369 0201 51 F8                   		mov	a, #-8
 370 0203 98 00                   		mov	[sp], a
 371 0205 FC 00 00 00             		call	!!%code(_echo)
 127:../src/global.c **** 				closeGate();
 372                             		.loc 1 127 0
 373 0209 FC 00 00 00             		call	!!%code(_closeGate)
 128:../src/global.c **** 				print_lcd("Gate closing...");
 374                             		.loc 1 128 0
 375 020d 30 26 00                		movw	ax, #.LC3
 376 0210 B8 00                   		movw	[sp], ax
 377 0212 FC 00 00 00             		call	!!%code(_print_lcd)
 378 0216 EC 70 06 00             		br	!!.L6
 379                             	.L11:
 129:../src/global.c **** 			}
 130:../src/global.c **** 
 131:../src/global.c **** 			else if(uart1RxBuf[0] == 0xF7)	//READ CURRENT
 380                             		.loc 1 131 0
 381 021a 8F 00 00                		mov	a, !_uart1RxBuf
 382 021d 9D F0                   		mov	r8, a
 383 021f 4A F0 F7                		cmp	r8, #-9
 384 0222 61 E8                   		 skz
 385 0224 EC 57 02 00             		 br	!!.L12
 132:../src/global.c **** 			{
 133:../src/global.c **** 				echoData(0xF7, initial_current/5);
 386                             		.loc 1 133 0
 387 0228 8F 00 00                		mov	a, !_initial_current
 388 022b 9D F0                   		mov	r8, a
 389 022d CD F1 00                		mov	r9, #0
 390 0230 C9 F2 05 00             		movw	r10, #5
 391                             		; G14 udivmodhi macro r8 = r8 / r10 and r10 = r8 % r10 
 392 0234 AD F0                   		movw    ax, r8 
 393 0236 EA F2                   		movw    de, r10 
 394 0238 61 DD                   		push	psw	; Save the current interrupt status 
 395 023a 71 7B FA                		di		; Disable interrupts. See Renesas Technical update TN-RL*-A025B/E 
 396 023d CE FB 03                		divhu   	; ax = ax / de, de = ax % de 
 397 0240 61 CD                   		pop	psw	; Restore saved interrupt status 
 398 0242 BD F0                   		movw    r8, ax 
 399 0244 15                      		movw	ax, de 
 400 0245 BD F2                   		movw    r10, ax 
 401                             		; end of udivmodhi macro
 402 0247 51 F7                   		mov	a, #-9
 403 0249 98 00                   		mov	[sp], a
 404 024b 8D F0                   		mov	a, r8
 405 024d 98 02                   		mov	[sp+2], a
 406 024f FC 00 00 00             		call	!!%code(_echoData)
 407 0253 EC 70 06 00             		br	!!.L6
 408                             	.L12:
 134:../src/global.c **** 			}
 135:../src/global.c **** 
 136:../src/global.c **** 			else if(uart1RxBuf[0] == 0xFF)	//READ STATUS
 409                             		.loc 1 136 0
 410 0257 8F 00 00                		mov	a, !_uart1RxBuf
 411 025a 9D F0                   		mov	r8, a
 412 025c 4A F0 FF                		cmp	r8, #-1
 413 025f 61 E8                   		 skz
 414 0261 EC 16 03 00             		 br	!!.L13
 137:../src/global.c **** 			{
 138:../src/global.c **** 				//echo(0xFF);
 139:../src/global.c **** 				msDelay(10);
 415                             		.loc 1 139 0
 416 0265 30 0A 00                		movw	ax, #10
 417 0268 B8 00                   		movw	[sp], ax
 418 026a FC 00 00 00             		call	!!%code(_msDelay)
 140:../src/global.c **** 				switch(gate_status)
 419                             		.loc 1 140 0
 420 026e AF 00 00                		movw	ax, !_gate_status
 421 0271 BD F0                   		movw	r8, ax
 422 0273 44 01 00                		cmpw	ax, #1
 423 0276 61 F8                   		 sknz
 424 0278 EC B2 02 00             		 br	!!.L15
 425 027c AD F0                   		movw	ax, r8
 426 027e 44 01 00                		cmpw	ax, #1
 427 0281 71 FF                   		 xor1	CY, a.7
 428 0283 61 F3                   		 sknh
 429 0285 EC 98 02 00             		 br	!!.L16
 430 0289 AD F0                   		movw	ax, r8
 431 028b 44 00 00                		cmpw	ax, #0
 432 028e 61 F8                   		 sknz
 433 0290 EC E4 02 00             		 br	!!.L17
 434 0294 EC 70 06 00             		br	!!.L6
 435                             	.L16:
 436 0298 AD F0                   		movw	ax, r8
 437 029a 44 02 00                		cmpw	ax, #2
 438 029d 61 F8                   		 sknz
 439 029f EC CB 02 00             		 br	!!.L18
 440 02a3 AD F0                   		movw	ax, r8
 441 02a5 44 03 00                		cmpw	ax, #3
 442 02a8 61 F8                   		 sknz
 443 02aa EC FC 02 00             		 br	!!.L19
 444 02ae EC 70 06 00             		br	!!.L6
 445                             	.L15:
 141:../src/global.c **** 				{
 142:../src/global.c **** 					case GS_OPENED:
 143:../src/global.c **** 						echoData(0xFF, 0x82);
 446                             		.loc 1 143 0
 447 02b2 51 FF                   		mov	a, #-1
 448 02b4 98 00                   		mov	[sp], a
 449 02b6 51 82                   		mov	a, #-126
 450 02b8 98 02                   		mov	[sp+2], a
 451 02ba FC 00 00 00             		call	!!%code(_echoData)
 144:../src/global.c **** 						print_lcd("Opened");
 452                             		.loc 1 144 0
 453 02be 30 36 00                		movw	ax, #.LC4
 454 02c1 B8 00                   		movw	[sp], ax
 455 02c3 FC 00 00 00             		call	!!%code(_print_lcd)
 145:../src/global.c **** 						break;
 456                             		.loc 1 145 0
 457 02c7 EC 12 03 00             		br	!!.L14
 458                             	.L18:
 146:../src/global.c **** 					case GS_CLOSED:
 147:../src/global.c **** 						echoData(0xFF, 0x81);
 459                             		.loc 1 147 0
 460 02cb 51 FF                   		mov	a, #-1
 461 02cd 98 00                   		mov	[sp], a
 462 02cf 51 81                   		mov	a, #-127
 463 02d1 98 02                   		mov	[sp+2], a
 464 02d3 FC 00 00 00             		call	!!%code(_echoData)
 148:../src/global.c **** 						print_lcd("Closed");
 465                             		.loc 1 148 0
 466 02d7 30 3D 00                		movw	ax, #.LC5
 467 02da B8 00                   		movw	[sp], ax
 468 02dc FC 00 00 00             		call	!!%code(_print_lcd)
 149:../src/global.c **** 						break;
 469                             		.loc 1 149 0
 470 02e0 EC 12 03 00             		br	!!.L14
 471                             	.L17:
 150:../src/global.c **** 					case GS_UNKNOWN:
 151:../src/global.c **** 						echoData(0xFF, 0x00);
 472                             		.loc 1 151 0
 473 02e4 51 FF                   		mov	a, #-1
 474 02e6 98 00                   		mov	[sp], a
 475 02e8 F1                      		clrb	a
 476 02e9 98 02                   		mov	[sp+2], a
 477 02eb FC 00 00 00             		call	!!%code(_echoData)
 152:../src/global.c **** 						print_lcd("Unknown");
 478                             		.loc 1 152 0
 479 02ef 30 44 00                		movw	ax, #.LC6
 480 02f2 B8 00                   		movw	[sp], ax
 481 02f4 FC 00 00 00             		call	!!%code(_print_lcd)
 153:../src/global.c **** 						break;
 482                             		.loc 1 153 0
 483 02f8 EC 12 03 00             		br	!!.L14
 484                             	.L19:
 154:../src/global.c **** 					case GS_ESTOP:
 155:../src/global.c **** 						echoData(0xFF, 0x84);
 485                             		.loc 1 155 0
 486 02fc 51 FF                   		mov	a, #-1
 487 02fe 98 00                   		mov	[sp], a
 488 0300 51 84                   		mov	a, #-124
 489 0302 98 02                   		mov	[sp+2], a
 490 0304 FC 00 00 00             		call	!!%code(_echoData)
 156:../src/global.c **** 						print_lcd("Emergency stop");
 491                             		.loc 1 156 0
 492 0308 30 4C 00                		movw	ax, #.LC7
 493 030b B8 00                   		movw	[sp], ax
 494 030d FC 00 00 00             		call	!!%code(_print_lcd)
 157:../src/global.c **** 						break;
 495                             		.loc 1 157 0
 496 0311 00                      		nop
 497                             	.L14:
 498 0312 EC 70 06 00             		br	!!.L6
 499                             	.L13:
 158:../src/global.c **** 				}
 159:../src/global.c **** 			}
 160:../src/global.c **** 
 161:../src/global.c **** 			else if (uart1RxBuf[0] == 0xFC)	//READ IR CMD
 500                             		.loc 1 161 0
 501 0316 8F 00 00                		mov	a, !_uart1RxBuf
 502 0319 9D F0                   		mov	r8, a
 503 031b 4A F0 FC                		cmp	r8, #-4
 504 031e 61 E8                   		 skz
 505 0320 EC 79 03 00             		 br	!!.L20
 506                             	.LBB5:
 162:../src/global.c **** 			{
 163:../src/global.c **** 				echo(0xFC);
 507                             		.loc 1 163 0
 508 0324 51 FC                   		mov	a, #-4
 509 0326 98 00                   		mov	[sp], a
 510 0328 FC 00 00 00             		call	!!%code(_echo)
 164:../src/global.c **** 				msDelay(10);
 511                             		.loc 1 164 0
 512 032c 30 0A 00                		movw	ax, #10
 513 032f B8 00                   		movw	[sp], ax
 514 0331 FC 00 00 00             		call	!!%code(_msDelay)
 165:../src/global.c **** 				//Wait for complete message?
 166:../src/global.c **** 				//echo(ir_rxMessage);
 167:../src/global.c **** 				uint8_t cmd = ir_rxMessage & 0x7;
 515                             		.loc 1 167 0
 516 0335 AF 00 00                		movw	ax, !_ir_rxMessage
 517 0338 BD F0                   		movw	r8, ax
 518 033a 8D F0                   		mov	a, r8
 519 033c 5C 07                   		and	a, #7
 520 033e 98 1F                   		mov	[sp+31], a
 168:../src/global.c **** 				uint8_t addr = (ir_rxMessage >> 3) & 0xFF;
 521                             		.loc 1 168 0
 522 0340 AF 00 00                		movw	ax, !_ir_rxMessage
 523 0343 BD F0                   		movw	r8, ax
 524 0345 31 3E                   		shrw	ax, 3
 525 0347 BD F0                   		movw	r8, ax
 526 0349 8D F0                   		mov	a, r8
 527 034b 98 1E                   		mov	[sp+30], a
 169:../src/global.c **** 				uint8_t tog = (ir_rxMessage >> 11) & 0x1;
 528                             		.loc 1 169 0
 529 034d AF 00 00                		movw	ax, !_ir_rxMessage
 530 0350 BD F0                   		movw	r8, ax
 531 0352 31 BE                   		shrw	ax, 11
 532 0354 BD F0                   		movw	r8, ax
 533 0356 8D F0                   		mov	a, r8
 534 0358 5C 01                   		and	a, #1
 535 035a 98 1D                   		mov	[sp+29], a
 170:../src/global.c **** 				echoData(addr, ((tog<<7) + cmd));
 536                             		.loc 1 170 0
 537 035c 31 79                   		shl	a, 7
 538 035e 9D F0                   		mov	r8, a
 539 0360 76                      		mov	l, a
 540 0361 88 1F                   		mov	a, [sp+31]
 541 0363 61 0E                   		add	a, l
 542 0365 9D F0                   		mov	r8, a
 543 0367 88 1E                   		mov	a, [sp+30]
 544 0369 9D F1                   		mov	r9, a
 545 036b 98 00                   		mov	[sp], a
 546 036d 8D F0                   		mov	a, r8
 547 036f 98 02                   		mov	[sp+2], a
 548 0371 FC 00 00 00             		call	!!%code(_echoData)
 549                             	.LBE5:
 550 0375 EC 70 06 00             		br	!!.L6
 551                             	.L20:
 171:../src/global.c **** 				//echo(addr);
 172:../src/global.c **** 				//echo((tog<<6) + cmd);
 173:../src/global.c **** 			}
 174:../src/global.c **** 
 175:../src/global.c **** 			else if (uart1RxBuf[0] == 0xF2) //SET RTC TO PREV 5 BYTES
 552                             		.loc 1 175 0
 553 0379 8F 00 00                		mov	a, !_uart1RxBuf
 554 037c 9D F0                   		mov	r8, a
 555 037e 4A F0 F2                		cmp	r8, #-14
 556 0381 61 E8                   		 skz
 557 0383 EC 88 04 00             		 br	!!.L21
 558                             	.LBB6:
 176:../src/global.c **** 			{
 177:../src/global.c **** 				echo(0xF2);
 559                             		.loc 1 177 0
 560 0387 51 F2                   		mov	a, #-14
 561 0389 98 00                   		mov	[sp], a
 562 038b FC 00 00 00             		call	!!%code(_echo)
 178:../src/global.c **** 				time_now.sec = toBCD(myBuffer[myCounter - 1]);
 563                             		.loc 1 178 0
 564 038f AF 00 00                		movw	ax, !_myCounter
 565 0392 BD F0                   		movw	r8, ax
 566 0394 B6 F0                   		decw	r8
 567 0396 AD F0                   		movw	ax, r8
 568 0398 04 00 00                		addw	ax, #_myBuffer
 569 039b 16                      		movw	hl, ax
 570 039c 8B                      		mov	a, [hl]
 571 039d 9D F0                   		mov	r8, a
 572 039f 98 00                   		mov	[sp], a
 573 03a1 FC 00 00 00             		call	!!%code(_toBCD)
 574 03a5 8D F0                   		mov	a, r8
 575 03a7 9F 00 00                		mov	!_time_now, a
 179:../src/global.c **** 				time_now.min = toBCD(myBuffer[myCounter - 2]);
 576                             		.loc 1 179 0
 577 03aa AF 00 00                		movw	ax, !_myCounter
 578 03ad BD F0                   		movw	r8, ax
 579 03af B6 F0                   		decw	r8 
 580 03b1 B6 F0                   		decw	r8
 581 03b3 AD F0                   		movw	ax, r8
 582 03b5 04 00 00                		addw	ax, #_myBuffer
 583 03b8 16                      		movw	hl, ax
 584 03b9 8B                      		mov	a, [hl]
 585 03ba 9D F0                   		mov	r8, a
 586 03bc 98 00                   		mov	[sp], a
 587 03be FC 00 00 00             		call	!!%code(_toBCD)
 588 03c2 8D F0                   		mov	a, r8
 589 03c4 9F 00 00                		mov	!_time_now+1, a
 180:../src/global.c **** 				time_now.hour = toBCD(myBuffer[myCounter - 3]);
 590                             		.loc 1 180 0
 591 03c7 AF 00 00                		movw	ax, !_myCounter
 592 03ca BD F0                   		movw	r8, ax
 593 03cc 04 FD FF                		addw	ax, #-3
 594 03cf BD F0                   		movw	r8, ax
 595 03d1 04 00 00                		addw	ax, #_myBuffer
 596 03d4 16                      		movw	hl, ax
 597 03d5 8B                      		mov	a, [hl]
 598 03d6 9D F0                   		mov	r8, a
 599 03d8 98 00                   		mov	[sp], a
 600 03da FC 00 00 00             		call	!!%code(_toBCD)
 601 03de 8D F0                   		mov	a, r8
 602 03e0 9F 00 00                		mov	!_time_now+2, a
 181:../src/global.c **** 				time_now.day = toBCD(myBuffer[myCounter - 4]);
 603                             		.loc 1 181 0
 604 03e3 AF 00 00                		movw	ax, !_myCounter
 605 03e6 BD F0                   		movw	r8, ax
 606 03e8 04 FC FF                		addw	ax, #-4
 607 03eb BD F0                   		movw	r8, ax
 608 03ed 04 00 00                		addw	ax, #_myBuffer
 609 03f0 16                      		movw	hl, ax
 610 03f1 8B                      		mov	a, [hl]
 611 03f2 9D F0                   		mov	r8, a
 612 03f4 98 00                   		mov	[sp], a
 613 03f6 FC 00 00 00             		call	!!%code(_toBCD)
 614 03fa 8D F0                   		mov	a, r8
 615 03fc 9F 00 00                		mov	!_time_now+3, a
 182:../src/global.c **** 				time_now.month = toBCD(myBuffer[myCounter - 5]);
 616                             		.loc 1 182 0
 617 03ff AF 00 00                		movw	ax, !_myCounter
 618 0402 BD F0                   		movw	r8, ax
 619 0404 04 FB FF                		addw	ax, #-5
 620 0407 BD F0                   		movw	r8, ax
 621 0409 04 00 00                		addw	ax, #_myBuffer
 622 040c 16                      		movw	hl, ax
 623 040d 8B                      		mov	a, [hl]
 624 040e 9D F0                   		mov	r8, a
 625 0410 98 00                   		mov	[sp], a
 626 0412 FC 00 00 00             		call	!!%code(_toBCD)
 627 0416 8D F0                   		mov	a, r8
 628 0418 9F 00 00                		mov	!_time_now+5, a
 183:../src/global.c **** 				R_RTC_Stop();
 629                             		.loc 1 183 0
 630 041b FC 00 00 00             		call	!!%code(_R_RTC_Stop)
 184:../src/global.c **** 				R_RTC_Set_CounterValue(time_now);
 631                             		.loc 1 184 0
 632 041f 8F 00 00                		mov	a, !_time_now
 633 0422 9D F0                   		mov	r8, a
 634 0424 98 00                   		mov	[sp], a
 635 0426 8F 00 00                		mov	a, !_time_now+1
 636 0429 9D F0                   		mov	r8, a
 637 042b 98 01                   		mov	[sp+1], a
 638 042d 8F 00 00                		mov	a, !_time_now+2
 639 0430 9D F0                   		mov	r8, a
 640 0432 98 02                   		mov	[sp+2], a
 641 0434 8F 00 00                		mov	a, !_time_now+3
 642 0437 9D F0                   		mov	r8, a
 643 0439 98 03                   		mov	[sp+3], a
 644 043b 8F 00 00                		mov	a, !_time_now+4
 645 043e 9D F0                   		mov	r8, a
 646 0440 98 04                   		mov	[sp+4], a
 647 0442 8F 00 00                		mov	a, !_time_now+5
 648 0445 9D F0                   		mov	r8, a
 649 0447 98 05                   		mov	[sp+5], a
 650 0449 8F 00 00                		mov	a, !_time_now+6
 651 044c 9D F0                   		mov	r8, a
 652 044e 98 06                   		mov	[sp+6], a
 653 0450 FC 00 00 00             		call	!!%code(_R_RTC_Set_CounterValue)
 185:../src/global.c **** 				R_RTC_Start();
 654                             		.loc 1 185 0
 655 0454 FC 00 00 00             		call	!!%code(_R_RTC_Start)
 186:../src/global.c **** 				int i;
 187:../src/global.c **** 				for (i = 0; i < RX_BUF_LEN; i++)
 656                             		.loc 1 187 0
 657 0458 F6                      		clrw	ax
 658 0459 B8 2A                   		movw	[sp+42], ax
 659 045b EC 73 04 00             		br	!!.L22
 660                             	.L23:
 188:../src/global.c **** 				{
 189:../src/global.c **** 					myBuffer[i] = 0x0;
 661                             		.loc 1 189 0 discriminator 3
 662 045f A8 2A                   		movw	ax, [sp+42]
 663 0461 04 00 00                		addw	ax, #_myBuffer
 664 0464 BD F0                   		movw	r8, ax
 665 0466 BD F2                   		movw	r10, ax
 666 0468 DA F2                   		movw	bc, r10
 667 046a F1                      		clrb	a
 668 046b 48 00 00                		mov	[bc], a
 187:../src/global.c **** 				{
 669                             		.loc 1 187 0 discriminator 3
 670 046e A8 2A                   		movw	ax, [sp+42]
 671 0470 A1                      		incw	ax
 672 0471 B8 2A                   		movw	[sp+42], ax
 673                             	.L22:
 187:../src/global.c **** 				{
 674                             		.loc 1 187 0 is_stmt 0 discriminator 1
 675 0473 A8 2A                   		movw	ax, [sp+42]
 676 0475 44 0F 00                		cmpw	ax, #15
 677 0478 71 FF                   		 xor1	CY, a.7
 678 047a 61 E3                   		 skh
 679 047c EC 5F 04 00             		 br	!!.L23
 190:../src/global.c **** 				}
 191:../src/global.c **** 				myCounter = 0;
 680                             		.loc 1 191 0 is_stmt 1
 681 0480 F6                      		clrw	ax
 682 0481 BF 00 00                		movw	!_myCounter, ax
 683                             	.LBE6:
 684 0484 EC 70 06 00             		br	!!.L6
 685                             	.L21:
 192:../src/global.c **** 			}
 193:../src/global.c **** 
 194:../src/global.c **** 			else if (uart1RxBuf[0] == 0xF3) //SEND RTC VIA UART
 686                             		.loc 1 194 0
 687 0488 8F 00 00                		mov	a, !_uart1RxBuf
 688 048b 9D F0                   		mov	r8, a
 689 048d 4A F0 F3                		cmp	r8, #-13
 690 0490 61 E8                   		 skz
 691 0492 EC 32 05 00             		 br	!!.L24
 692                             	.LBB7:
 195:../src/global.c **** 			{
 196:../src/global.c **** 				int i;
 197:../src/global.c **** 				for (i = 0; i < RX_BUF_LEN; i++)
 693                             		.loc 1 197 0
 694 0496 F6                      		clrw	ax
 695 0497 B8 28                   		movw	[sp+40], ax
 696 0499 EC B1 04 00             		br	!!.L25
 697                             	.L26:
 198:../src/global.c **** 				{
 199:../src/global.c **** 					myBuffer[i] = 0x0;
 698                             		.loc 1 199 0 discriminator 3
 699 049d A8 28                   		movw	ax, [sp+40]
 700 049f 04 00 00                		addw	ax, #_myBuffer
 701 04a2 BD F0                   		movw	r8, ax
 702 04a4 BD F2                   		movw	r10, ax
 703 04a6 DA F2                   		movw	bc, r10
 704 04a8 F1                      		clrb	a
 705 04a9 48 00 00                		mov	[bc], a
 197:../src/global.c **** 				{
 706                             		.loc 1 197 0 discriminator 3
 707 04ac A8 28                   		movw	ax, [sp+40]
 708 04ae A1                      		incw	ax
 709 04af B8 28                   		movw	[sp+40], ax
 710                             	.L25:
 197:../src/global.c **** 				{
 711                             		.loc 1 197 0 is_stmt 0 discriminator 1
 712 04b1 A8 28                   		movw	ax, [sp+40]
 713 04b3 44 0F 00                		cmpw	ax, #15
 714 04b6 71 FF                   		 xor1	CY, a.7
 715 04b8 61 E3                   		 skh
 716 04ba EC 9D 04 00             		 br	!!.L26
 200:../src/global.c **** 				}
 201:../src/global.c **** 				myCounter = 0;
 717                             		.loc 1 201 0 is_stmt 1
 718 04be F6                      		clrw	ax
 719 04bf BF 00 00                		movw	!_myCounter, ax
 202:../src/global.c **** 				R_RTC_Get_CounterValue(&time_now);
 720                             		.loc 1 202 0
 721 04c2 30 00 00                		movw	ax, #_time_now
 722 04c5 B8 00                   		movw	[sp], ax
 723 04c7 FC 00 00 00             		call	!!%code(_R_RTC_Get_CounterValue)
 203:../src/global.c **** 				myBuffer[0] = 0xF3;
 724                             		.loc 1 203 0
 725 04cb 51 F3                   		mov	a, #-13
 726 04cd 9F 00 00                		mov	!_myBuffer, a
 204:../src/global.c **** 				myBuffer[1] = toHex(time_now.month);
 727                             		.loc 1 204 0
 728 04d0 8F 00 00                		mov	a, !_time_now+5
 729 04d3 9D F0                   		mov	r8, a
 730 04d5 98 00                   		mov	[sp], a
 731 04d7 FC 00 00 00             		call	!!%code(_toHex)
 732 04db 8D F0                   		mov	a, r8
 733 04dd 9F 00 00                		mov	!_myBuffer+1, a
 205:../src/global.c **** 				myBuffer[2] = toHex(time_now.day);
 734                             		.loc 1 205 0
 735 04e0 8F 00 00                		mov	a, !_time_now+3
 736 04e3 9D F0                   		mov	r8, a
 737 04e5 98 00                   		mov	[sp], a
 738 04e7 FC 00 00 00             		call	!!%code(_toHex)
 739 04eb 8D F0                   		mov	a, r8
 740 04ed 9F 00 00                		mov	!_myBuffer+2, a
 206:../src/global.c **** 				myBuffer[3] = toHex(time_now.hour);
 741                             		.loc 1 206 0
 742 04f0 8F 00 00                		mov	a, !_time_now+2
 743 04f3 9D F0                   		mov	r8, a
 744 04f5 98 00                   		mov	[sp], a
 745 04f7 FC 00 00 00             		call	!!%code(_toHex)
 746 04fb 8D F0                   		mov	a, r8
 747 04fd 9F 00 00                		mov	!_myBuffer+3, a
 207:../src/global.c **** 				myBuffer[4] = toHex(time_now.min);
 748                             		.loc 1 207 0
 749 0500 8F 00 00                		mov	a, !_time_now+1
 750 0503 9D F0                   		mov	r8, a
 751 0505 98 00                   		mov	[sp], a
 752 0507 FC 00 00 00             		call	!!%code(_toHex)
 753 050b 8D F0                   		mov	a, r8
 754 050d 9F 00 00                		mov	!_myBuffer+4, a
 208:../src/global.c **** 				myBuffer[5] = toHex(time_now.sec);
 755                             		.loc 1 208 0
 756 0510 8F 00 00                		mov	a, !_time_now
 757 0513 9D F0                   		mov	r8, a
 758 0515 98 00                   		mov	[sp], a
 759 0517 FC 00 00 00             		call	!!%code(_toHex)
 760 051b 8D F0                   		mov	a, r8
 761 051d 9F 00 00                		mov	!_myBuffer+5, a
 209:../src/global.c **** 
 210:../src/global.c **** 				R_UART1_Send(myBuffer, 6);
 762                             		.loc 1 210 0
 763 0520 30 00 00                		movw	ax, #_myBuffer
 764 0523 B8 00                   		movw	[sp], ax
 765 0525 30 06 00                		movw	ax, #6
 766 0528 B8 02                   		movw	[sp+2], ax
 767 052a FC 00 00 00             		call	!!%code(_R_UART1_Send)
 768                             	.LBE7:
 769 052e EC 70 06 00             		br	!!.L6
 770                             	.L24:
 211:../src/global.c **** 			}
 212:../src/global.c **** 
 213:../src/global.c **** 			//Buffer not full and input is not a command
 214:../src/global.c **** 			else if((myCounter < RX_BUF_LEN)&&(uart1RxBuf[0] < 0x7F))
 771                             		.loc 1 214 0
 772 0532 AF 00 00                		movw	ax, !_myCounter
 773 0535 BD F0                   		movw	r8, ax
 774 0537 44 0F 00                		cmpw	ax, #15
 775 053a 71 FF                   		 xor1	CY, a.7
 776 053c 61 F3                   		 sknh
 777 053e EC 6F 05 00             		 br	!!.L27
 778                             		.loc 1 214 0 is_stmt 0 discriminator 1
 779 0542 8F 00 00                		mov	a, !_uart1RxBuf
 780 0545 9D F0                   		mov	r8, a
 781 0547 4A F0 7E                		cmp	r8, #126
 782 054a 61 F3                   		 sknh
 783 054c EC 6F 05 00             		 br	!!.L27
 215:../src/global.c **** 			{
 216:../src/global.c **** 				myBuffer[myCounter] = uart1RxBuf[0];
 784                             		.loc 1 216 0 is_stmt 1
 785 0550 AF 00 00                		movw	ax, !_myCounter
 786 0553 BD F0                   		movw	r8, ax
 787 0555 8F 00 00                		mov	a, !_uart1RxBuf
 788 0558 9D F2                   		mov	r10, a
 789 055a DA F0                   		movw	bc, r8
 790 055c 48 00 00                		mov	_myBuffer[bc], a
 217:../src/global.c **** 				myCounter++;
 791                             		.loc 1 217 0
 792 055f AF 00 00                		movw	ax, !_myCounter
 793 0562 BD F0                   		movw	r8, ax
 794 0564 A6 F0                   		incw	r8
 795 0566 AD F0                   		movw	ax, r8
 796 0568 BF 00 00                		movw	!_myCounter, ax
 797 056b EC 70 06 00             		br	!!.L6
 798                             	.L27:
 218:../src/global.c **** 			}
 219:../src/global.c **** 			//'Display to LCD' is activated during Test Mode
 220:../src/global.c **** 			else if((mode == 1)&&(uart1RxBuf[0] == 0xF4))
 799                             		.loc 1 220 0
 800 056f 8F 00 00                		mov	a, !_mode
 801 0572 9D F0                   		mov	r8, a
 802 0574 4A F0 01                		cmp	r8, #1
 803 0577 61 E8                   		 skz
 804 0579 EC 70 06 00             		 br	!!.L6
 805                             		.loc 1 220 0 is_stmt 0 discriminator 1
 806 057d 8F 00 00                		mov	a, !_uart1RxBuf
 807 0580 9D F0                   		mov	r8, a
 808 0582 4A F0 F4                		cmp	r8, #-12
 809 0585 61 E8                   		 skz
 810 0587 EC 70 06 00             		 br	!!.L6
 811                             	.LBB8:
 221:../src/global.c **** 			{
 222:../src/global.c **** 				echo(0xF4);
 812                             		.loc 1 222 0 is_stmt 1
 813 058b 51 F4                   		mov	a, #-12
 814 058d 98 00                   		mov	[sp], a
 815 058f FC 00 00 00             		call	!!%code(_echo)
 223:../src/global.c **** 				initLcd();
 816                             		.loc 1 223 0
 817 0593 FC 00 00 00             		call	!!%code(_initLcd)
 224:../src/global.c **** 				int display_x = 0;
 818                             		.loc 1 224 0
 819 0597 F6                      		clrw	ax
 820 0598 B8 26                   		movw	[sp+38], ax
 225:../src/global.c **** 				int display_y = 0;
 821                             		.loc 1 225 0
 822 059a F6                      		clrw	ax
 823 059b B8 24                   		movw	[sp+36], ax
 226:../src/global.c **** 				int display_scroll = 0;
 824                             		.loc 1 226 0
 825 059d F6                      		clrw	ax
 826 059e B8 22                   		movw	[sp+34], ax
 227:../src/global.c **** 				int display_length = 16;
 827                             		.loc 1 227 0
 828 05a0 30 10 00                		movw	ax, #16
 829 05a3 B8 1A                   		movw	[sp+26], ax
 228:../src/global.c **** 				int display_loop = 1;
 830                             		.loc 1 228 0
 831 05a5 E6                      		onew	ax
 832 05a6 B8 18                   		movw	[sp+24], ax
 229:../src/global.c **** 				int overflow;
 230:../src/global.c **** 
 231:../src/global.c **** 				//Determine overflow
 232:../src/global.c **** 				if (myCounter > 15) {
 833                             		.loc 1 232 0
 834 05a8 AF 00 00                		movw	ax, !_myCounter
 835 05ab BD F0                   		movw	r8, ax
 836 05ad 44 0F 00                		cmpw	ax, #15
 837 05b0 71 FF                   		 xor1	CY, a.7
 838 05b2 61 E3                   		 skh
 839 05b4 EC C6 05 00             		 br	!!.L28
 233:../src/global.c **** 					overflow = myCounter - 15;
 840                             		.loc 1 233 0
 841 05b8 AF 00 00                		movw	ax, !_myCounter
 842 05bb BD F0                   		movw	r8, ax
 843 05bd 04 F1 FF                		addw	ax, #-15
 844 05c0 B8 20                   		movw	[sp+32], ax
 845 05c2 EC C9 05 00             		br	!!.L29
 846                             	.L28:
 234:../src/global.c **** 				}
 235:../src/global.c **** 				else {
 236:../src/global.c **** 					overflow = 1;
 847                             		.loc 1 236 0
 848 05c6 E6                      		onew	ax
 849 05c7 B8 20                   		movw	[sp+32], ax
 850                             	.L29:
 237:../src/global.c **** 				}
 238:../src/global.c **** 
 239:../src/global.c **** 				//For LCD index i
 240:../src/global.c **** 				for(display_y = 0 ; display_y < overflow ; display_y++)
 851                             		.loc 1 240 0
 852 05c9 F6                      		clrw	ax
 853 05ca B8 24                   		movw	[sp+36], ax
 854 05cc EC 59 06 00             		br	!!.L30
 855                             	.L34:
 241:../src/global.c **** 				{
 242:../src/global.c **** 					//For message character j
 243:../src/global.c **** 					for (display_x = 0 ; display_x < myCounter ; display_x++)
 856                             		.loc 1 243 0
 857 05d0 F6                      		clrw	ax
 858 05d1 B8 26                   		movw	[sp+38], ax
 859 05d3 EC 1E 06 00             		br	!!.L31
 860                             	.L33:
 244:../src/global.c **** 					{
 245:../src/global.c **** 						writeByteLcd(1U, myBuffer[(display_x+display_scroll)]);
 861                             		.loc 1 245 0
 862 05d7 A8 22                   		movw	ax, [sp+34]
 863 05d9 16                      		movw	hl, ax
 864 05da A8 26                   		movw	ax, [sp+38]
 865 05dc 07                      		addw	ax, hl
 866 05dd BD F0                   		movw	r8, ax
 867 05df 04 00 00                		addw	ax, #_myBuffer
 868 05e2 16                      		movw	hl, ax
 869 05e3 8B                      		mov	a, [hl]
 870 05e4 9D F0                   		mov	r8, a
 871 05e6 E1                      		oneb	a
 872 05e7 98 00                   		mov	[sp], a
 873 05e9 8D F0                   		mov	a, r8
 874 05eb 98 02                   		mov	[sp+2], a
 875 05ed FC 00 00 00             		call	!!%code(_writeByteLcd)
 246:../src/global.c **** 						delayNoInt(3250);
 876                             		.loc 1 246 0
 877 05f1 30 B2 0C                		movw	ax, #3250
 878 05f4 B8 00                   		movw	[sp], ax
 879 05f6 FC 00 00 00             		call	!!%code(_delayNoInt)
 247:../src/global.c **** 						if (display_x == 7){
 880                             		.loc 1 247 0
 881 05fa A8 26                   		movw	ax, [sp+38]
 882 05fc 44 07 00                		cmpw	ax, #7
 883 05ff 61 E8                   		 skz
 884 0601 EC 19 06 00             		 br	!!.L32
 248:../src/global.c **** 							writeByteLcd(0U, LCD_HOME_L2);
 885                             		.loc 1 248 0
 886 0605 F1                      		clrb	a
 887 0606 98 00                   		mov	[sp], a
 888 0608 51 C0                   		mov	a, #-64
 889 060a 98 02                   		mov	[sp+2], a
 890 060c FC 00 00 00             		call	!!%code(_writeByteLcd)
 249:../src/global.c **** 							delayNoInt(100);
 891                             		.loc 1 249 0
 892 0610 30 64 00                		movw	ax, #100
 893 0613 B8 00                   		movw	[sp], ax
 894 0615 FC 00 00 00             		call	!!%code(_delayNoInt)
 895                             	.L32:
 243:../src/global.c **** 					{
 896                             		.loc 1 243 0 discriminator 2
 897 0619 A8 26                   		movw	ax, [sp+38]
 898 061b A1                      		incw	ax
 899 061c B8 26                   		movw	[sp+38], ax
 900                             	.L31:
 243:../src/global.c **** 					{
 901                             		.loc 1 243 0 is_stmt 0 discriminator 1
 902 061e AF 00 00                		movw	ax, !_myCounter
 903 0621 BD F0                   		movw	r8, ax
 904 0623 A8 26                   		movw	ax, [sp+38]
 905 0625 46 F0                   		cmpw	ax, r8
 906 0627 71 FF                   		 xor1	CY, a.7
 907 0629 71 77 F1                		 xor1	CY, r9.7
 908 062c 61 D8                   		 sknc
 909 062e EC D7 05 00             		 br	!!.L33
 250:../src/global.c **** 						}
 251:../src/global.c **** 					}
 252:../src/global.c **** 					display_scroll++;
 910                             		.loc 1 252 0 is_stmt 1 discriminator 2
 911 0632 A8 22                   		movw	ax, [sp+34]
 912 0634 A1                      		incw	ax
 913 0635 B8 22                   		movw	[sp+34], ax
 253:../src/global.c **** 					writeByteLcd(0U, LCD_HOME_L1);
 914                             		.loc 1 253 0 discriminator 2
 915 0637 F1                      		clrb	a
 916 0638 98 00                   		mov	[sp], a
 917 063a 51 80                   		mov	a, #-128
 918 063c 98 02                   		mov	[sp+2], a
 919 063e FC 00 00 00             		call	!!%code(_writeByteLcd)
 254:../src/global.c **** 					delayNoInt(100);
 920                             		.loc 1 254 0 discriminator 2
 921 0642 30 64 00                		movw	ax, #100
 922 0645 B8 00                   		movw	[sp], ax
 923 0647 FC 00 00 00             		call	!!%code(_delayNoInt)
 255:../src/global.c **** 					msDelay(350);
 924                             		.loc 1 255 0 discriminator 2
 925 064b 30 5E 01                		movw	ax, #350
 926 064e B8 00                   		movw	[sp], ax
 927 0650 FC 00 00 00             		call	!!%code(_msDelay)
 240:../src/global.c **** 				{
 928                             		.loc 1 240 0 discriminator 2
 929 0654 A8 24                   		movw	ax, [sp+36]
 930 0656 A1                      		incw	ax
 931 0657 B8 24                   		movw	[sp+36], ax
 932                             	.L30:
 240:../src/global.c **** 				{
 933                             		.loc 1 240 0 is_stmt 0 discriminator 1
 934 0659 A8 20                   		movw	ax, [sp+32]
 935 065b BD F0                   		movw	r8, ax
 936 065d A8 24                   		movw	ax, [sp+36]
 937 065f 46 F0                   		cmpw	ax, r8
 938 0661 71 FF                   		 xor1	CY, a.7
 939 0663 71 77 F1                		 xor1	CY, r9.7
 940 0666 61 D8                   		 sknc
 941 0668 EC D0 05 00             		 br	!!.L34
 256:../src/global.c **** 				}
 257:../src/global.c **** 				myCounter = 0;
 942                             		.loc 1 257 0 is_stmt 1
 943 066c F6                      		clrw	ax
 944 066d BF 00 00                		movw	!_myCounter, ax
 945                             	.L6:
 946                             	.LBE8:
 258:../src/global.c **** 			}
 259:../src/global.c **** 
 260:../src/global.c **** 			uart1Status = R_UART1_Receive(uart1RxBuf,1);			// Prime UART2 Rx
 947                             		.loc 1 260 0
 948 0670 30 00 00                		movw	ax, #_uart1RxBuf
 949 0673 B8 00                   		movw	[sp], ax
 950 0675 E6                      		onew	ax
 951 0676 B8 02                   		movw	[sp+2], ax
 952 0678 FC 00 00 00             		call	!!%code(_R_UART1_Receive)
 953 067c AD F0                   		movw	ax, r8
 954 067e BF 00 00                		movw	!_uart1Status, ax
 955                             	.L4:
 261:../src/global.c **** 		}
 262:../src/global.c **** 
 263:../src/global.c **** 		if (uart1TxFlag)	//Output sent
 956                             		.loc 1 263 0
 957 0681 8F 00 00                		mov	a, !_uart1TxFlag
 958 0684 9D F0                   		mov	r8, a
 959 0686 D4 F0                   		cmp0	r8
 960 0688 61 F8                   		 sknz
 961 068a EC 91 06 00             		 br	!!.L35
 264:../src/global.c **** 		{
 265:../src/global.c **** 			uart1TxFlag = 0U; //Clear Tx flag
 962                             		.loc 1 265 0
 963 068e F5 00 00                		clrb	!_uart1TxFlag
 964                             	.L35:
 266:../src/global.c **** 		}
 267:../src/global.c **** 
 268:../src/global.c **** 		pwm(100, 25); 		//PWM always running, motor toggled by DVR_nSLEEP
 965                             		.loc 1 268 0
 966 0691 30 64 00                		movw	ax, #100
 967 0694 B8 00                   		movw	[sp], ax
 968 0696 30 19 00                		movw	ax, #25
 969 0699 B8 02                   		movw	[sp+2], ax
 970 069b FC 00 00 00             		call	!!%code(_pwm)
 269:../src/global.c **** 
 270:../src/global.c **** 	}
 971                             		.loc 1 270 0
 972 069f EC B9 00 00             		br	!!.L36
 973                             	.LFE1:
 975                             		.global	_displayCharLCD
 977                             	_displayCharLCD:
 978                             	.LFB2:
 271:../src/global.c **** }
 272:../src/global.c **** 
 273:../src/global.c **** /**
 274:../src/global.c ****  * Display a char on the LCD
 275:../src/global.c ****  */
 276:../src/global.c **** void displayCharLCD(char c)
 277:../src/global.c **** {
 979                             		.loc 1 277 0
 980                             		; start of function
 981                             		; outgoing: 4 bytes
 982 06a3 20 04                   		subw	sp, #4
 983                             	.LCFI2:
 278:../src/global.c **** 	writeByteLcd(1U, c);
 984                             		.loc 1 278 0
 985 06a5 E1                      		oneb	a
 986 06a6 98 00                   		mov	[sp], a
 987 06a8 88 08                   		mov	a, [sp+8]
 988 06aa 9D F0                   		mov	r8, a
 989 06ac 98 02                   		mov	[sp+2], a
 990 06ae FC 00 00 00             		call	!!%code(_writeByteLcd)
 279:../src/global.c **** 	delayNoInt(100);
 991                             		.loc 1 279 0
 992 06b2 30 64 00                		movw	ax, #100
 993 06b5 B8 00                   		movw	[sp], ax
 994 06b7 FC 00 00 00             		call	!!%code(_delayNoInt)
 280:../src/global.c **** }
 995                             		.loc 1 280 0
 996 06bb 10 04                   		addw	sp, #4
 997 06bd D7                      		ret
 998                             	.LFE2:
 1000                             		.global	_welcome
 1002                             	_welcome:
 1003                             	.LFB3:
 281:../src/global.c **** 
 282:../src/global.c **** /**
 283:../src/global.c ****  * Welcome the user on LCD
 284:../src/global.c ****  */
 285:../src/global.c **** void welcome(void)
 286:../src/global.c **** {
 1004                             		.loc 1 286 0
 1005                             		; start of function
 1006                             		; locals: 40 bytes
 1007                             		; outgoing: 4 bytes
 1008 06be 20 2C                   		subw	sp, #44
 1009                             	.LCFI3:
 287:../src/global.c **** 	int scrollCount = 0;
 1010                             		.loc 1 287 0
 1011 06c0 F6                      		clrw	ax
 1012 06c1 B8 2A                   		movw	[sp+42], ax
 288:../src/global.c **** 	int j = 0;
 1013                             		.loc 1 288 0
 1014 06c3 F6                      		clrw	ax
 1015 06c4 B8 28                   		movw	[sp+40], ax
 289:../src/global.c **** 	int i = 0;
 1016                             		.loc 1 289 0
 1017 06c6 F6                      		clrw	ax
 1018 06c7 B8 26                   		movw	[sp+38], ax
 290:../src/global.c **** 
 291:../src/global.c **** 	char msg[] = {"                Nel T. 18179460"};
 1019                             		.loc 1 291 0
 1020 06c9 30 20 20                		movw	ax, #8224
 1021 06cc B8 04                   		movw	[sp+4], ax
 1022 06ce 30 20 20                		movw	ax, #8224
 1023 06d1 B8 06                   		movw	[sp+6], ax
 1024 06d3 30 20 20                		movw	ax, #8224
 1025 06d6 B8 08                   		movw	[sp+8], ax
 1026 06d8 30 20 20                		movw	ax, #8224
 1027 06db B8 0A                   		movw	[sp+10], ax
 1028 06dd 30 20 20                		movw	ax, #8224
 1029 06e0 B8 0C                   		movw	[sp+12], ax
 1030 06e2 30 20 20                		movw	ax, #8224
 1031 06e5 B8 0E                   		movw	[sp+14], ax
 1032 06e7 30 20 20                		movw	ax, #8224
 1033 06ea B8 10                   		movw	[sp+16], ax
 1034 06ec 30 20 20                		movw	ax, #8224
 1035 06ef B8 12                   		movw	[sp+18], ax
 1036 06f1 30 4E 65                		movw	ax, #25934
 1037 06f4 B8 14                   		movw	[sp+20], ax
 1038 06f6 30 6C 20                		movw	ax, #8300
 1039 06f9 B8 16                   		movw	[sp+22], ax
 1040 06fb 30 54 2E                		movw	ax, #11860
 1041 06fe B8 18                   		movw	[sp+24], ax
 1042 0700 30 20 31                		movw	ax, #12576
 1043 0703 B8 1A                   		movw	[sp+26], ax
 1044 0705 30 38 31                		movw	ax, #12600
 1045 0708 B8 1C                   		movw	[sp+28], ax
 1046 070a 30 37 39                		movw	ax, #14647
 1047 070d B8 1E                   		movw	[sp+30], ax
 1048 070f 30 34 36                		movw	ax, #13876
 1049 0712 B8 20                   		movw	[sp+32], ax
 1050 0714 30 30 00                		movw	ax, #48
 1051 0717 B8 22                   		movw	[sp+34], ax
 292:../src/global.c **** 
 293:../src/global.c **** 	int length = sizeof(msg)/sizeof(char);
 1052                             		.loc 1 293 0
 1053 0719 30 20 00                		movw	ax, #32
 1054 071c B8 24                   		movw	[sp+36], ax
 294:../src/global.c **** 
 295:../src/global.c **** 	//For LCD index i
 296:../src/global.c **** 	for(i = 0 ; i < (length-16) ; i++)
 1055                             		.loc 1 296 0
 1056 071e F6                      		clrw	ax
 1057 071f B8 26                   		movw	[sp+38], ax
 1058 0721 EC B4 07 00             		br	!!.L39
 1059                             	.L43:
 297:../src/global.c **** 	{
 298:../src/global.c **** 		//For message character j
 299:../src/global.c **** 		for (j = 0 ; j < 16 ; j++)
 1060                             		.loc 1 299 0
 1061 0725 F6                      		clrw	ax
 1062 0726 B8 28                   		movw	[sp+40], ax
 1063 0728 EC 80 07 00             		br	!!.L40
 1064                             	.L42:
 300:../src/global.c **** 		{
 301:../src/global.c **** 			//Offset message for scroll effect
 302:../src/global.c **** 			writeByteLcd(1U, msg[(j+scrollCount)]);
 1065                             		.loc 1 302 0
 1066 072c A8 2A                   		movw	ax, [sp+42]
 1067 072e 16                      		movw	hl, ax
 1068 072f A8 28                   		movw	ax, [sp+40]
 1069 0731 07                      		addw	ax, hl
 1070 0732 BD F0                   		movw	r8, ax
 1071 0734 AE F8                   		movw	ax, sp
 1072 0736 BD F4                   		movw	r12, ax
 1073 0738 04 04 00                		addw	ax, #4
 1074 073b BD F2                   		movw	r10, ax
 1075 073d 06 F0                   		addw	ax, r8
 1076 073f BD F0                   		movw	r8, ax
 1077 0741 BD F2                   		movw	r10, ax
 1078 0743 FA F2                   		movw	hl, r10
 1079 0745 8B                      		mov	a, [hl]
 1080 0746 9D F0                   		mov	r8, a
 1081 0748 E1                      		oneb	a
 1082 0749 98 00                   		mov	[sp], a
 1083 074b 8D F0                   		mov	a, r8
 1084 074d 98 02                   		mov	[sp+2], a
 1085 074f FC 00 00 00             		call	!!%code(_writeByteLcd)
 303:../src/global.c **** 			delayNoInt(100);
 1086                             		.loc 1 303 0
 1087 0753 30 64 00                		movw	ax, #100
 1088 0756 B8 00                   		movw	[sp], ax
 1089 0758 FC 00 00 00             		call	!!%code(_delayNoInt)
 304:../src/global.c **** 			//Jump to second line of LCD due to memory gap
 305:../src/global.c **** 			if (j == 7)
 1090                             		.loc 1 305 0
 1091 075c A8 28                   		movw	ax, [sp+40]
 1092 075e 44 07 00                		cmpw	ax, #7
 1093 0761 61 E8                   		 skz
 1094 0763 EC 7B 07 00             		 br	!!.L41
 306:../src/global.c **** 			{
 307:../src/global.c **** 				writeByteLcd(0U, LCD_HOME_L2);
 1095                             		.loc 1 307 0
 1096 0767 F1                      		clrb	a
 1097 0768 98 00                   		mov	[sp], a
 1098 076a 51 C0                   		mov	a, #-64
 1099 076c 98 02                   		mov	[sp+2], a
 1100 076e FC 00 00 00             		call	!!%code(_writeByteLcd)
 308:../src/global.c **** 				delayNoInt(100);
 1101                             		.loc 1 308 0
 1102 0772 30 64 00                		movw	ax, #100
 1103 0775 B8 00                   		movw	[sp], ax
 1104 0777 FC 00 00 00             		call	!!%code(_delayNoInt)
 1105                             	.L41:
 299:../src/global.c **** 		{
 1106                             		.loc 1 299 0 discriminator 2
 1107 077b A8 28                   		movw	ax, [sp+40]
 1108 077d A1                      		incw	ax
 1109 077e B8 28                   		movw	[sp+40], ax
 1110                             	.L40:
 299:../src/global.c **** 		{
 1111                             		.loc 1 299 0 is_stmt 0 discriminator 1
 1112 0780 A8 28                   		movw	ax, [sp+40]
 1113 0782 44 0F 00                		cmpw	ax, #15
 1114 0785 71 FF                   		 xor1	CY, a.7
 1115 0787 61 E3                   		 skh
 1116 0789 EC 2C 07 00             		 br	!!.L42
 309:../src/global.c **** 			}
 310:../src/global.c **** 		}
 311:../src/global.c **** 		scrollCount++;
 1117                             		.loc 1 311 0 is_stmt 1 discriminator 2
 1118 078d A8 2A                   		movw	ax, [sp+42]
 1119 078f A1                      		incw	ax
 1120 0790 B8 2A                   		movw	[sp+42], ax
 312:../src/global.c **** 		writeByteLcd(0U, LCD_HOME_L1);
 1121                             		.loc 1 312 0 discriminator 2
 1122 0792 F1                      		clrb	a
 1123 0793 98 00                   		mov	[sp], a
 1124 0795 51 80                   		mov	a, #-128
 1125 0797 98 02                   		mov	[sp+2], a
 1126 0799 FC 00 00 00             		call	!!%code(_writeByteLcd)
 313:../src/global.c **** 		delayNoInt(100);
 1127                             		.loc 1 313 0 discriminator 2
 1128 079d 30 64 00                		movw	ax, #100
 1129 07a0 B8 00                   		movw	[sp], ax
 1130 07a2 FC 00 00 00             		call	!!%code(_delayNoInt)
 314:../src/global.c **** 		msDelay(350);
 1131                             		.loc 1 314 0 discriminator 2
 1132 07a6 30 5E 01                		movw	ax, #350
 1133 07a9 B8 00                   		movw	[sp], ax
 1134 07ab FC 00 00 00             		call	!!%code(_msDelay)
 296:../src/global.c **** 	{
 1135                             		.loc 1 296 0 discriminator 2
 1136 07af A8 26                   		movw	ax, [sp+38]
 1137 07b1 A1                      		incw	ax
 1138 07b2 B8 26                   		movw	[sp+38], ax
 1139                             	.L39:
 296:../src/global.c **** 	{
 1140                             		.loc 1 296 0 is_stmt 0 discriminator 1
 1141 07b4 A8 24                   		movw	ax, [sp+36]
 1142 07b6 04 F0 FF                		addw	ax, #-16
 1143 07b9 BD F2                   		movw	r10, ax
 1144 07bb A8 26                   		movw	ax, [sp+38]
 1145 07bd BD F0                   		movw	r8, ax
 1146 07bf AD F2                   		movw	ax, r10
 1147 07c1 46 F0                   		cmpw	ax, r8
 1148 07c3 71 FF                   		 xor1	CY, a.7
 1149 07c5 71 77 F1                		 xor1	CY, r9.7
 1150 07c8 61 F3                   		 sknh
 1151 07ca EC 25 07 00             		 br	!!.L43
 315:../src/global.c **** 	}
 316:../src/global.c **** 	msDelay(500);
 1152                             		.loc 1 316 0 is_stmt 1
 1153 07ce 30 F4 01                		movw	ax, #500
 1154 07d1 B8 00                   		movw	[sp], ax
 1155 07d3 FC 00 00 00             		call	!!%code(_msDelay)
 317:../src/global.c **** }
 1156                             		.loc 1 317 0
 1157 07d7 10 2C                   		addw	sp, #44
 1158 07d9 D7                      		ret
 1159                             	.LFE3:
 1161                             		.global	_msDelay
 1163                             	_msDelay:
 1164                             	.LFB4:
 318:../src/global.c **** 
 319:../src/global.c **** /**
 320:../src/global.c ****  * Delay for t milliseconds
 321:../src/global.c ****  */
 322:../src/global.c **** void msDelay(int t)
 323:../src/global.c **** {
 1165                             		.loc 1 323 0
 1166                             		; start of function
 1167                             		; locals: 2 bytes
 1168                             		; outgoing: 2 bytes
 1169 07da 20 04                   		subw	sp, #4
 1170                             	.LCFI4:
 324:../src/global.c **** 	int a = 0;
 1171                             		.loc 1 324 0
 1172 07dc F6                      		clrw	ax
 1173 07dd B8 02                   		movw	[sp+2], ax
 325:../src/global.c **** 	for(a = 0; a < t; a++)
 1174                             		.loc 1 325 0
 1175 07df F6                      		clrw	ax
 1176 07e0 B8 02                   		movw	[sp+2], ax
 1177 07e2 EC F4 07 00             		br	!!.L45
 1178                             	.L46:
 326:../src/global.c **** 	{
 327:../src/global.c **** 		delayNoInt(1000);
 1179                             		.loc 1 327 0 discriminator 3
 1180 07e6 30 E8 03                		movw	ax, #1000
 1181 07e9 B8 00                   		movw	[sp], ax
 1182 07eb FC 00 00 00             		call	!!%code(_delayNoInt)
 325:../src/global.c **** 	for(a = 0; a < t; a++)
 1183                             		.loc 1 325 0 discriminator 3
 1184 07ef A8 02                   		movw	ax, [sp+2]
 1185 07f1 A1                      		incw	ax
 1186 07f2 B8 02                   		movw	[sp+2], ax
 1187                             	.L45:
 325:../src/global.c **** 	for(a = 0; a < t; a++)
 1188                             		.loc 1 325 0 is_stmt 0 discriminator 1
 1189 07f4 A8 08                   		movw	ax, [sp+8]
 1190 07f6 BD F0                   		movw	r8, ax
 1191 07f8 A8 02                   		movw	ax, [sp+2]
 1192 07fa 46 F0                   		cmpw	ax, r8
 1193 07fc 71 FF                   		 xor1	CY, a.7
 1194 07fe 71 77 F1                		 xor1	CY, r9.7
 1195 0801 61 D8                   		 sknc
 1196 0803 EC E6 07 00             		 br	!!.L46
 328:../src/global.c **** 	}
 329:../src/global.c **** }
 1197                             		.loc 1 329 0 is_stmt 1
 1198 0807 10 04                   		addw	sp, #4
 1199 0809 D7                      		ret
 1200                             	.LFE4:
 1202                             		.global	_openGate
 1204                             	_openGate:
 1205                             	.LFB5:
 330:../src/global.c **** 
 331:../src/global.c **** void openGate()
 332:../src/global.c **** {
 1206                             		.loc 1 332 0
 333:../src/global.c **** 	//gate_cmd = 1;
 334:../src/global.c **** 	DVR_PHASE = 0;
 1207                             		.loc 1 334 0
 1208 080a C9 F0 04 FF             		movw	r8, #-252
 1209 080e AD F0                   		movw	ax, r8
 1210 0810 BD F4                   		movw	r12, ax
 1211 0812 FA F4                   		movw	hl, r12
 1212 0814 8B                      		mov	a, [hl]
 1213 0815 9D F2                   		mov	r10, a
 1214 0817 5A F2 FD                		and	r10, #-3
 1215 081a AD F0                   		movw	ax, r8
 1216 081c DA F4                   		movw	bc, r12
 1217 081e 8D F2                   		mov	a, r10
 1218 0820 48 00 00                		mov	[bc], a
 335:../src/global.c **** 	DVR_nSLEEP = 1;
 1219                             		.loc 1 335 0
 1220 0823 C9 F0 04 FF             		movw	r8, #-252
 1221 0827 AD F0                   		movw	ax, r8
 1222 0829 BD F4                   		movw	r12, ax
 1223 082b FA F4                   		movw	hl, r12
 1224 082d 8B                      		mov	a, [hl]
 1225 082e 9D F2                   		mov	r10, a
 1226 0830 6A F2 04                		or	r10, #4
 1227 0833 AD F0                   		movw	ax, r8
 1228 0835 DA F4                   		movw	bc, r12
 1229 0837 8D F2                   		mov	a, r10
 1230 0839 48 00 00                		mov	[bc], a
 336:../src/global.c **** 	GS_PREV_STATE = gate_status;
 1231                             		.loc 1 336 0
 1232 083c AF 00 00                		movw	ax, !_gate_status
 1233 083f BD F0                   		movw	r8, ax
 1234 0841 8D F0                   		mov	a, r8
 1235 0843 9F 00 00                		mov	!_GS_PREV_STATE, a
 337:../src/global.c **** 	gate_status = GS_UNKNOWN;
 1236                             		.loc 1 337 0
 1237 0846 F6                      		clrw	ax
 1238 0847 BF 00 00                		movw	!_gate_status, ax
 338:../src/global.c **** 	//msDelay(COLLISION_DET_DELAY);
 339:../src/global.c **** }
 1239                             		.loc 1 339 0
 1240 084a D7                      		ret
 1241                             	.LFE5:
 1243                             		.global	_closeGate
 1245                             	_closeGate:
 1246                             	.LFB6:
 340:../src/global.c **** 
 341:../src/global.c **** void closeGate()
 342:../src/global.c **** {
 1247                             		.loc 1 342 0
 343:../src/global.c **** 	//gate_cmd = 1;
 344:../src/global.c **** 	DVR_PHASE = 1;
 1248                             		.loc 1 344 0
 1249 084b C9 F0 04 FF             		movw	r8, #-252
 1250 084f AD F0                   		movw	ax, r8
 1251 0851 BD F4                   		movw	r12, ax
 1252 0853 FA F4                   		movw	hl, r12
 1253 0855 8B                      		mov	a, [hl]
 1254 0856 9D F2                   		mov	r10, a
 1255 0858 6A F2 02                		or	r10, #2
 1256 085b AD F0                   		movw	ax, r8
 1257 085d DA F4                   		movw	bc, r12
 1258 085f 8D F2                   		mov	a, r10
 1259 0861 48 00 00                		mov	[bc], a
 345:../src/global.c **** 	DVR_nSLEEP = 1;
 1260                             		.loc 1 345 0
 1261 0864 C9 F0 04 FF             		movw	r8, #-252
 1262 0868 AD F0                   		movw	ax, r8
 1263 086a BD F4                   		movw	r12, ax
 1264 086c FA F4                   		movw	hl, r12
 1265 086e 8B                      		mov	a, [hl]
 1266 086f 9D F2                   		mov	r10, a
 1267 0871 6A F2 04                		or	r10, #4
 1268 0874 AD F0                   		movw	ax, r8
 1269 0876 DA F4                   		movw	bc, r12
 1270 0878 8D F2                   		mov	a, r10
 1271 087a 48 00 00                		mov	[bc], a
 346:../src/global.c **** 	GS_PREV_STATE = gate_status;
 1272                             		.loc 1 346 0
 1273 087d AF 00 00                		movw	ax, !_gate_status
 1274 0880 BD F0                   		movw	r8, ax
 1275 0882 8D F0                   		mov	a, r8
 1276 0884 9F 00 00                		mov	!_GS_PREV_STATE, a
 347:../src/global.c **** 	gate_status = GS_UNKNOWN;
 1277                             		.loc 1 347 0
 1278 0887 F6                      		clrw	ax
 1279 0888 BF 00 00                		movw	!_gate_status, ax
 348:../src/global.c **** 	if (auto_close)
 1280                             		.loc 1 348 0
 1281 088b 8F 00 00                		mov	a, !_auto_close
 1282 088e 9D F0                   		mov	r8, a
 1283 0890 D4 F0                   		cmp0	r8
 1284 0892 61 F8                   		 sknz
 1285 0894 EC 9E 08 00             		 br	!!.L48
 349:../src/global.c **** 	{
 350:../src/global.c **** 		auto_close = 0;
 1286                             		.loc 1 350 0
 1287 0898 F5 00 00                		clrb	!_auto_close
 351:../src/global.c **** 		auto_close_cntr = 0;
 1288                             		.loc 1 351 0
 1289 089b F5 00 00                		clrb	!_auto_close_cntr
 1290                             	.L48:
 352:../src/global.c **** 	}
 353:../src/global.c **** 	//msDelay(COLLISION_DET_DELAY);
 354:../src/global.c **** }
 1291                             		.loc 1 354 0
 1292 089e D7                      		ret
 1293                             	.LFE6:
 1295                             		.global	_stopGate
 1297                             	_stopGate:
 1298                             	.LFB7:
 355:../src/global.c **** 
 356:../src/global.c **** void stopGate()
 357:../src/global.c **** {
 1299                             		.loc 1 357 0
 358:../src/global.c **** 	DVR_nSLEEP = 0;
 1300                             		.loc 1 358 0
 1301 089f C9 F0 04 FF             		movw	r8, #-252
 1302 08a3 AD F0                   		movw	ax, r8
 1303 08a5 BD F4                   		movw	r12, ax
 1304 08a7 FA F4                   		movw	hl, r12
 1305 08a9 8B                      		mov	a, [hl]
 1306 08aa 9D F2                   		mov	r10, a
 1307 08ac 5A F2 FB                		and	r10, #-5
 1308 08af AD F0                   		movw	ax, r8
 1309 08b1 DA F4                   		movw	bc, r12
 1310 08b3 8D F2                   		mov	a, r10
 1311 08b5 48 00 00                		mov	[bc], a
 359:../src/global.c **** 	GS_PREV_STATE = gate_status;
 1312                             		.loc 1 359 0
 1313 08b8 AF 00 00                		movw	ax, !_gate_status
 1314 08bb BD F0                   		movw	r8, ax
 1315 08bd 8D F0                   		mov	a, r8
 1316 08bf 9F 00 00                		mov	!_GS_PREV_STATE, a
 360:../src/global.c **** 	gate_status = GS_ESTOP;
 1317                             		.loc 1 360 0
 1318 08c2 30 03 00                		movw	ax, #3
 1319 08c5 BF 00 00                		movw	!_gate_status, ax
 361:../src/global.c **** }
 1320                             		.loc 1 361 0
 1321 08c8 D7                      		ret
 1322                             	.LFE7:
 1324                             		.global	_echo
 1326                             	_echo:
 1327                             	.LFB8:
 362:../src/global.c **** 
 363:../src/global.c **** void echo(uint8_t hex)
 364:../src/global.c **** {
 1328                             		.loc 1 364 0
 1329                             		; start of function
 1330                             		; outgoing: 4 bytes
 1331 08c9 20 04                   		subw	sp, #4
 1332                             	.LCFI5:
 365:../src/global.c **** 	uart1TxBuf[0] = hex;
 1333                             		.loc 1 365 0
 1334 08cb 88 08                   		mov	a, [sp+8]
 1335 08cd 9D F0                   		mov	r8, a
 1336 08cf 9F 00 00                		mov	!_uart1TxBuf, a
 366:../src/global.c **** 	uart1Status = R_UART1_Send(uart1TxBuf,1);
 1337                             		.loc 1 366 0
 1338 08d2 30 00 00                		movw	ax, #_uart1TxBuf
 1339 08d5 B8 00                   		movw	[sp], ax
 1340 08d7 E6                      		onew	ax
 1341 08d8 B8 02                   		movw	[sp+2], ax
 1342 08da FC 00 00 00             		call	!!%code(_R_UART1_Send)
 1343 08de AD F0                   		movw	ax, r8
 1344 08e0 BF 00 00                		movw	!_uart1Status, ax
 367:../src/global.c **** }
 1345                             		.loc 1 367 0
 1346 08e3 10 04                   		addw	sp, #4
 1347 08e5 D7                      		ret
 1348                             	.LFE8:
 1350                             		.global	_echoData
 1352                             	_echoData:
 1353                             	.LFB9:
 368:../src/global.c **** 
 369:../src/global.c **** void echoData(uint8_t hex, uint8_t hex2)
 370:../src/global.c **** {
 1354                             		.loc 1 370 0
 1355                             		; start of function
 1356                             		; outgoing: 4 bytes
 1357 08e6 20 04                   		subw	sp, #4
 1358                             	.LCFI6:
 371:../src/global.c **** 	uart1TxBuf[0] = hex;
 1359                             		.loc 1 371 0
 1360 08e8 88 08                   		mov	a, [sp+8]
 1361 08ea 9D F0                   		mov	r8, a
 1362 08ec 9F 00 00                		mov	!_uart1TxBuf, a
 372:../src/global.c **** 	uart1TxBuf[1] = hex2;
 1363                             		.loc 1 372 0
 1364 08ef 88 0A                   		mov	a, [sp+10]
 1365 08f1 9D F0                   		mov	r8, a
 1366 08f3 9F 00 00                		mov	!_uart1TxBuf+1, a
 373:../src/global.c **** 	uart1Status = R_UART1_Send(uart1TxBuf,2);
 1367                             		.loc 1 373 0
 1368 08f6 30 00 00                		movw	ax, #_uart1TxBuf
 1369 08f9 B8 00                   		movw	[sp], ax
 1370 08fb 30 02 00                		movw	ax, #2
 1371 08fe B8 02                   		movw	[sp+2], ax
 1372 0900 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 1373 0904 AD F0                   		movw	ax, r8
 1374 0906 BF 00 00                		movw	!_uart1Status, ax
 374:../src/global.c **** }
 1375                             		.loc 1 374 0
 1376 0909 10 04                   		addw	sp, #4
 1377 090b D7                      		ret
 1378                             	.LFE9:
 1380                             		.global	_buzzerBeep
 1382                             	_buzzerBeep:
 1383                             	.LFB10:
 375:../src/global.c **** 
 376:../src/global.c **** void buzzerBeep(uint8_t beeps)
 377:../src/global.c **** {
 1384                             		.loc 1 377 0
 1385                             		; start of function
 1386                             		; outgoing: 2 bytes
 1387 090c 20 02                   		subw	sp, #2
 1388                             	.LCFI7:
 378:../src/global.c **** 	while (beeps){
 1389                             		.loc 1 378 0
 1390 090e EC 39 09 00             		br	!!.L54
 1391                             	.L55:
 1392                             	.LBB9:
 379:../src/global.c **** 		R_PCLBUZ0_Start();
 1393                             		.loc 1 379 0
 1394 0912 FC 00 00 00             		call	!!%code(_R_PCLBUZ0_Start)
 380:../src/global.c **** 		msDelay(20);
 1395                             		.loc 1 380 0
 1396 0916 30 14 00                		movw	ax, #20
 1397 0919 B8 00                   		movw	[sp], ax
 1398 091b FC 00 00 00             		call	!!%code(_msDelay)
 381:../src/global.c **** 		R_PCLBUZ0_Stop();
 1399                             		.loc 1 381 0
 1400 091f FC 00 00 00             		call	!!%code(_R_PCLBUZ0_Stop)
 382:../src/global.c **** 		beeps--;
 1401                             		.loc 1 382 0
 1402 0923 88 06                   		mov	a, [sp+6]
 1403 0925 9D F0                   		mov	r8, a
 1404 0927 91                      		dec	a
 1405 0928 98 06                   		mov	[sp+6], a
 383:../src/global.c **** 		if (beeps) msDelay(40);
 1406                             		.loc 1 383 0
 1407 092a 61 F8                   		sknz
 1408 092c EC 39 09 00             		 br	!!.L54
 1409                             		 # zero-comparison eliminated
 1410                             		.loc 1 383 0 is_stmt 0 discriminator 1
 1411 0930 30 28 00                		movw	ax, #40
 1412 0933 B8 00                   		movw	[sp], ax
 1413 0935 FC 00 00 00             		call	!!%code(_msDelay)
 1414                             	.L54:
 1415                             	.LBE9:
 378:../src/global.c **** 		R_PCLBUZ0_Start();
 1416                             		.loc 1 378 0 is_stmt 1
 1417 0939 88 06                   		mov	a, [sp+6]
 1418 093b D1                      		cmp0	a
 1419 093c 61 E8                   		 skz
 1420 093e EC 12 09 00             		 br	!!.L55
 384:../src/global.c **** 	}
 385:../src/global.c **** }
 1421                             		.loc 1 385 0
 1422 0942 10 02                   		addw	sp, #2
 1423 0944 D7                      		ret
 1424                             	.LFE10:
 1426                             		.global	_toHex
 1428                             	_toHex:
 1429                             	.LFB11:
 386:../src/global.c **** 
 387:../src/global.c **** /**
 388:../src/global.c ****  * takes in a binary coded decimal
 389:../src/global.c ****  */
 390:../src/global.c **** uint8_t toHex(uint8_t decimal){
 1430                             		.loc 1 390 0
 391:../src/global.c **** 	return (decimal & 0x0F) + ((decimal >> 4) * 10);
 1431                             		.loc 1 391 0
 1432 0945 88 04                   		mov	a, [sp+4]
 1433 0947 5C 0F                   		and	a, #15
 1434 0949 9D F1                   		mov	r9, a
 1435 094b 88 04                   		mov	a, [sp+4]
 1436 094d 31 4A                   		shr	a, 4
 1437 094f 9D F0                   		mov	r8, a
 1438 0951 61 01                   		add	a, a
 1439 0953 9D F0                   		mov	r8, a
 1440 0955 31 29                   		shl	a, 2
 1441 0957 9D F2                   		mov	r10, a
 1442 0959 76                      		mov	l, a
 1443 095a 8D F0                   		mov	a, r8
 1444 095c 61 0E                   		add	a, l
 1445 095e 9D F0                   		mov	r8, a
 1446 0960 76                      		mov	l, a
 1447 0961 8D F1                   		mov	a, r9
 1448 0963 61 0E                   		add	a, l
 1449 0965 9D F0                   		mov	r8, a
 392:../src/global.c **** }
 1450                             		.loc 1 392 0
 1451 0967 D7                      		ret
 1452                             	.LFE11:
 1454                             		.global	_toBCD
 1456                             	_toBCD:
 1457                             	.LFB12:
 393:../src/global.c **** 
 394:../src/global.c **** /**
 395:../src/global.c ****  * converts from hex to binary coded decimal
 396:../src/global.c ****  * max input/output is 99
 397:../src/global.c ****  */
 398:../src/global.c **** uint8_t toBCD(uint8_t hex){
 1458                             		.loc 1 398 0
 1459                             		; start of function
 1460                             		; locals: 4 bytes
 1461 0968 20 04                   		subw	sp, #4
 1462                             	.LCFI8:
 399:../src/global.c **** 	uint8_t nibble_l = hex % 10; //Isolate lower nibble
 1463                             		.loc 1 399 0
 1464 096a 88 08                   		mov	a, [sp+8]
 1465 096c 70                      		mov	x, a 
 1466 096d 51 00                   		mov	a, #0
 1467 096f BD F0                   		movw	r8, ax
 1468 0971 C9 F2 0A 00             		movw	r10, #10
 1469                             		; G14 udivmodhi macro r10 = r8 / r10 and r8 = r8 % r10 
 1470 0975 AD F0                   		movw    ax, r8 
 1471 0977 EA F2                   		movw    de, r10 
 1472 0979 61 DD                   		push	psw	; Save the current interrupt status 
 1473 097b 71 7B FA                		di		; Disable interrupts. See Renesas Technical update TN-RL*-A025B/E 
 1474 097e CE FB 03                		divhu   	; ax = ax / de, de = ax % de 
 1475 0981 61 CD                   		pop	psw	; Restore saved interrupt status 
 1476 0983 BD F2                   		movw    r10, ax 
 1477 0985 15                      		movw	ax, de 
 1478 0986 BD F0                   		movw    r8, ax 
 1479                             		; end of udivmodhi macro
 1480 0988 8D F0                   		mov	a, r8
 1481 098a 98 03                   		mov	[sp+3], a
 400:../src/global.c **** 	uint8_t nibble_h = ((hex / 10) % 10) << 4; //Isolate higher nibble
 1482                             		.loc 1 400 0
 1483 098c 88 08                   		mov	a, [sp+8]
 1484 098e 70                      		mov	x, a 
 1485 098f 51 00                   		mov	a, #0
 1486 0991 BD F0                   		movw	r8, ax
 1487 0993 C9 F2 0A 00             		movw	r10, #10
 1488                             		; G14 udivmodhi macro r8 = r8 / r10 and r10 = r8 % r10 
 1489 0997 AD F0                   		movw    ax, r8 
 1490 0999 EA F2                   		movw    de, r10 
 1491 099b 61 DD                   		push	psw	; Save the current interrupt status 
 1492 099d 71 7B FA                		di		; Disable interrupts. See Renesas Technical update TN-RL*-A025B/E 
 1493 09a0 CE FB 03                		divhu   	; ax = ax / de, de = ax % de 
 1494 09a3 61 CD                   		pop	psw	; Restore saved interrupt status 
 1495 09a5 BD F0                   		movw    r8, ax 
 1496 09a7 15                      		movw	ax, de 
 1497 09a8 BD F2                   		movw    r10, ax 
 1498                             		; end of udivmodhi macro
 1499 09aa CD F1 00                		mov	r9, #0
 1500 09ad C9 F2 0A 00             		movw	r10, #10
 1501                             		; G14 udivmodhi macro r10 = r8 / r10 and r8 = r8 % r10 
 1502 09b1 AD F0                   		movw    ax, r8 
 1503 09b3 EA F2                   		movw    de, r10 
 1504 09b5 61 DD                   		push	psw	; Save the current interrupt status 
 1505 09b7 71 7B FA                		di		; Disable interrupts. See Renesas Technical update TN-RL*-A025B/E 
 1506 09ba CE FB 03                		divhu   	; ax = ax / de, de = ax % de 
 1507 09bd 61 CD                   		pop	psw	; Restore saved interrupt status 
 1508 09bf BD F2                   		movw    r10, ax 
 1509 09c1 15                      		movw	ax, de 
 1510 09c2 BD F0                   		movw    r8, ax 
 1511                             		; end of udivmodhi macro
 1512 09c4 8D F0                   		mov	a, r8
 1513 09c6 31 49                   		shl	a, 4
 1514 09c8 98 02                   		mov	[sp+2], a
 401:../src/global.c **** 	uint8_t byte = nibble_h | nibble_l; //Combine them as two consecutive values
 1515                             		.loc 1 401 0
 1516 09ca 88 03                   		mov	a, [sp+3]
 1517 09cc 76                      		mov	l, a
 1518 09cd 88 02                   		mov	a, [sp+2]
 1519 09cf 61 6E                   		or	a, l
 1520 09d1 98 01                   		mov	[sp+1], a
 402:../src/global.c **** 	return byte;
 1521                             		.loc 1 402 0
 1522 09d3 9D F0                   		mov	r8, a
 403:../src/global.c **** }
 1523                             		.loc 1 403 0
 1524 09d5 10 04                   		addw	sp, #4
 1525 09d7 D7                      		ret
 1526                             	.LFE12:
 1528                             		.global	_pwm
 1530                             	_pwm:
 1531                             	.LFB13:
 404:../src/global.c **** 
 405:../src/global.c **** /**
 406:../src/global.c ****  * Software PWM implementation
 407:../src/global.c ****  * Causes motor to rotate
 408:../src/global.c ****  */
 409:../src/global.c **** void pwm(int cycles_per_second, int divisor)
 410:../src/global.c **** {
 1532                             		.loc 1 410 0
 411:../src/global.c **** 	if (pwm_edge){
 1533                             		.loc 1 411 0
 1534 09d8 8F 00 00                		mov	a, !_pwm_edge
 1535 09db 9D F0                   		mov	r8, a
 1536 09dd D4 F0                   		cmp0	r8
 1537 09df 61 F8                   		 sknz
 1538 09e1 EC 5B 0A 00             		 br	!!.L60
 412:../src/global.c **** 		pwm_edge=0;
 1539                             		.loc 1 412 0
 1540 09e5 F5 00 00                		clrb	!_pwm_edge
 413:../src/global.c **** 		//P4_bit.no3^=1;
 414:../src/global.c **** 		pwm_counter++;
 1541                             		.loc 1 414 0
 1542 09e8 AF 00 00                		movw	ax, !_pwm_counter
 1543 09eb BD F0                   		movw	r8, ax
 1544 09ed A6 F0                   		incw	r8
 1545 09ef AD F0                   		movw	ax, r8
 1546 09f1 BF 00 00                		movw	!_pwm_counter, ax
 415:../src/global.c **** 		//P7^=0x80;
 416:../src/global.c **** 		//P4^=0x04;
 417:../src/global.c **** 
 418:../src/global.c **** 		pwm_counter%=cycles_per_second; // 100 cycles per second
 1547                             		.loc 1 418 0
 1548 09f4 BD F2                   		movw	r10, ax
 1549 09f6 A8 04                   		movw	ax, [sp+4]
 1550 09f8 BD F0                   		movw	r8, ax
 1551                             		; G14 udivmodhi macro r10 = r10 / r8 and r8 = r10 % r8 
 1552 09fa AD F2                   		movw    ax, r10 
 1553 09fc EA F0                   		movw    de, r8 
 1554 09fe 61 DD                   		push	psw	; Save the current interrupt status 
 1555 0a00 71 7B FA                		di		; Disable interrupts. See Renesas Technical update TN-RL*-A025B/E 
 1556 0a03 CE FB 03                		divhu   	; ax = ax / de, de = ax % de 
 1557 0a06 61 CD                   		pop	psw	; Restore saved interrupt status 
 1558 0a08 BD F2                   		movw    r10, ax 
 1559 0a0a 15                      		movw	ax, de 
 1560 0a0b BD F0                   		movw    r8, ax 
 1561                             		; end of udivmodhi macro
 1562 0a0d AD F0                   		movw	ax, r8
 1563 0a0f BF 00 00                		movw	!_pwm_counter, ax
 419:../src/global.c **** 
 420:../src/global.c **** 		if (pwm_counter < divisor) // div/cycles% duty cycle
 1564                             		.loc 1 420 0
 1565 0a12 A8 06                   		movw	ax, [sp+6]
 1566 0a14 BD F2                   		movw	r10, ax
 1567 0a16 AF 00 00                		movw	ax, !_pwm_counter
 1568 0a19 BD F0                   		movw	r8, ax
 1569 0a1b AD F2                   		movw	ax, r10
 1570 0a1d 46 F0                   		cmpw	ax, r8
 1571 0a1f 61 E3                   		 skh
 1572 0a21 EC 42 0A 00             		 br	!!.L62
 421:../src/global.c **** 		{
 422:../src/global.c **** 			//P4_bit.no3 = 1;
 423:../src/global.c **** 			DVR_ENABLE = 1;
 1573                             		.loc 1 423 0
 1574 0a25 C9 F0 04 FF             		movw	r8, #-252
 1575 0a29 AD F0                   		movw	ax, r8
 1576 0a2b BD F4                   		movw	r12, ax
 1577 0a2d FA F4                   		movw	hl, r12
 1578 0a2f 8B                      		mov	a, [hl]
 1579 0a30 9D F2                   		mov	r10, a
 1580 0a32 6A F2 08                		or	r10, #8
 1581 0a35 AD F0                   		movw	ax, r8
 1582 0a37 DA F4                   		movw	bc, r12
 1583 0a39 8D F2                   		mov	a, r10
 1584 0a3b 48 00 00                		mov	[bc], a
 1585 0a3e EC 5B 0A 00             		br	!!.L60
 1586                             	.L62:
 424:../src/global.c **** 		}
 425:../src/global.c **** 		else
 426:../src/global.c **** 		{
 427:../src/global.c **** 			DVR_ENABLE = 0;
 1587                             		.loc 1 427 0
 1588 0a42 C9 F0 04 FF             		movw	r8, #-252
 1589 0a46 AD F0                   		movw	ax, r8
 1590 0a48 BD F4                   		movw	r12, ax
 1591 0a4a FA F4                   		movw	hl, r12
 1592 0a4c 8B                      		mov	a, [hl]
 1593 0a4d 9D F2                   		mov	r10, a
 1594 0a4f 5A F2 F7                		and	r10, #-9
 1595 0a52 AD F0                   		movw	ax, r8
 1596 0a54 DA F4                   		movw	bc, r12
 1597 0a56 8D F2                   		mov	a, r10
 1598 0a58 48 00 00                		mov	[bc], a
 1599                             	.L60:
 428:../src/global.c **** 		}
 429:../src/global.c **** 	}
 430:../src/global.c **** }
 1600                             		.loc 1 430 0
 1601 0a5b D7                      		ret
 1602                             	.LFE13:
 1604                             		.global	_mtrBtn
 1606                             	_mtrBtn:
 1607                             	.LFB14:
 431:../src/global.c **** 
 432:../src/global.c **** /**
 433:../src/global.c ****  * Inspect the gate collision buttons
 434:../src/global.c ****  */
 435:../src/global.c **** void mtrBtn()
 436:../src/global.c **** {
 1608                             		.loc 1 436 0
 1609                             		; start of function
 1610                             		; outgoing: 2 bytes
 1611 0a5c 20 02                   		subw	sp, #2
 1612                             	.LCFI9:
 437:../src/global.c **** 	if (switch_edge)
 1613                             		.loc 1 437 0
 1614 0a5e 8F 00 00                		mov	a, !_switch_edge
 1615 0a61 9D F0                   		mov	r8, a
 1616 0a63 D4 F0                   		cmp0	r8
 1617 0a65 61 F8                   		 sknz
 1618 0a67 EC 8C 0B 00             		 br	!!.L63
 438:../src/global.c **** 	{
 439:../src/global.c **** 		switch_edge = 0;
 1619                             		.loc 1 439 0
 1620 0a6b F5 00 00                		clrb	!_switch_edge
 440:../src/global.c **** 
 441:../src/global.c **** 		if (SWITCH_OPENED)
 1621                             		.loc 1 441 0
 1622 0a6e C9 F0 00 FF             		movw	r8, #-256
 1623 0a72 AD F0                   		movw	ax, r8
 1624 0a74 BD F2                   		movw	r10, ax
 1625 0a76 FA F2                   		movw	hl, r10
 1626 0a78 8B                      		mov	a, [hl]
 1627 0a79 9D F0                   		mov	r8, a
 1628 0a7b 31 5A                   		shr	a, 5
 1629 0a7d 9D F0                   		mov	r8, a
 1630 0a7f 5A F0 01                		and	r8, #1
 1631 0a82 61 F8                   		sknz
 1632 0a84 EC FE 0A 00             		 br	!!.L65
 1633                             		 # zero-comparison eliminated
 442:../src/global.c **** 		{
 443:../src/global.c **** 			if (DVR_PHASE == 0)
 1634                             		.loc 1 443 0
 1635 0a88 C9 F0 04 FF             		movw	r8, #-252
 1636 0a8c AD F0                   		movw	ax, r8
 1637 0a8e BD F4                   		movw	r12, ax
 1638 0a90 FA F4                   		movw	hl, r12
 1639 0a92 8B                      		mov	a, [hl]
 1640 0a93 9D F0                   		mov	r8, a
 1641 0a95 31 1A                   		shr	a, 1
 1642 0a97 9D F0                   		mov	r8, a
 1643 0a99 5A F0 01                		and	r8, #1
 1644 0a9c 61 E8                   		skz
 1645 0a9e EC 8C 0B 00             		 br	!!.L63
 1646                             		 # zero-comparison eliminated
 444:../src/global.c **** 			{
 445:../src/global.c **** 				GS_PREV_STATE = gate_status;
 1647                             		.loc 1 445 0
 1648 0aa2 AF 00 00                		movw	ax, !_gate_status
 1649 0aa5 BD F0                   		movw	r8, ax
 1650 0aa7 8D F0                   		mov	a, r8
 1651 0aa9 9F 00 00                		mov	!_GS_PREV_STATE, a
 446:../src/global.c **** 				gate_status = GS_OPENED;
 1652                             		.loc 1 446 0
 1653 0aac E6                      		onew	ax
 1654 0aad BF 00 00                		movw	!_gate_status, ax
 447:../src/global.c **** 				if (GS_PREV_STATE != gate_status)
 1655                             		.loc 1 447 0
 1656 0ab0 8F 00 00                		mov	a, !_GS_PREV_STATE
 1657 0ab3 9D F0                   		mov	r8, a
 1658 0ab5 70                      		mov	x, a 
 1659 0ab6 51 00                   		mov	a, #0
 1660 0ab8 BD F2                   		movw	r10, ax
 1661 0aba AF 00 00                		movw	ax, !_gate_status
 1662 0abd BD F0                   		movw	r8, ax
 1663 0abf AD F2                   		movw	ax, r10
 1664 0ac1 46 F0                   		cmpw	ax, r8
 1665 0ac3 61 F8                   		 sknz
 1666 0ac5 EC 8C 0B 00             		 br	!!.L63
 448:../src/global.c **** 				{
 449:../src/global.c **** 					dataPrint = 0;
 1667                             		.loc 1 449 0
 1668 0ac9 F5 00 00                		clrb	!_dataPrint
 450:../src/global.c **** 					DVR_nSLEEP = 0;
 1669                             		.loc 1 450 0
 1670 0acc C9 F0 04 FF             		movw	r8, #-252
 1671 0ad0 AD F0                   		movw	ax, r8
 1672 0ad2 BD F4                   		movw	r12, ax
 1673 0ad4 FA F4                   		movw	hl, r12
 1674 0ad6 8B                      		mov	a, [hl]
 1675 0ad7 9D F2                   		mov	r10, a
 1676 0ad9 5A F2 FB                		and	r10, #-5
 1677 0adc AD F0                   		movw	ax, r8
 1678 0ade DA F4                   		movw	bc, r12
 1679 0ae0 8D F2                   		mov	a, r10
 1680 0ae2 48 00 00                		mov	[bc], a
 451:../src/global.c **** 					print_lcd("Opened");
 1681                             		.loc 1 451 0
 1682 0ae5 30 36 00                		movw	ax, #.LC4
 1683 0ae8 B8 00                   		movw	[sp], ax
 1684 0aea FC 00 00 00             		call	!!%code(_print_lcd)
 452:../src/global.c **** 					msDelay(5);
 1685                             		.loc 1 452 0
 1686 0aee 30 05 00                		movw	ax, #5
 1687 0af1 B8 00                   		movw	[sp], ax
 1688 0af3 FC 00 00 00             		call	!!%code(_msDelay)
 453:../src/global.c **** 					auto_close = 1;
 1689                             		.loc 1 453 0
 1690 0af7 E5 00 00                		oneb	!_auto_close
 1691 0afa EC 8C 0B 00             		br	!!.L63
 1692                             	.L65:
 454:../src/global.c **** 				}
 455:../src/global.c **** 			}
 456:../src/global.c **** 
 457:../src/global.c **** 		}
 458:../src/global.c **** 		else if (SWITCH_CLOSED)
 1693                             		.loc 1 458 0
 1694 0afe C9 F0 00 FF             		movw	r8, #-256
 1695 0b02 AD F0                   		movw	ax, r8
 1696 0b04 BD F2                   		movw	r10, ax
 1697 0b06 FA F2                   		movw	hl, r10
 1698 0b08 8B                      		mov	a, [hl]
 1699 0b09 9D F0                   		mov	r8, a
 1700 0b0b 31 6A                   		shr	a, 6
 1701 0b0d 9D F0                   		mov	r8, a
 1702 0b0f 5A F0 01                		and	r8, #1
 1703 0b12 61 F8                   		sknz
 1704 0b14 EC 8C 0B 00             		 br	!!.L63
 1705                             		 # zero-comparison eliminated
 459:../src/global.c **** 		{
 460:../src/global.c **** 			if (DVR_PHASE == 1) // if opening activated
 1706                             		.loc 1 460 0
 1707 0b18 C9 F0 04 FF             		movw	r8, #-252
 1708 0b1c AD F0                   		movw	ax, r8
 1709 0b1e BD F4                   		movw	r12, ax
 1710 0b20 FA F4                   		movw	hl, r12
 1711 0b22 8B                      		mov	a, [hl]
 1712 0b23 9D F0                   		mov	r8, a
 1713 0b25 31 1A                   		shr	a, 1
 1714 0b27 9D F0                   		mov	r8, a
 1715 0b29 5A F0 01                		and	r8, #1
 1716 0b2c 4A F0 01                		cmp	r8, #1
 1717 0b2f 61 E8                   		 skz
 1718 0b31 EC 8C 0B 00             		 br	!!.L63
 461:../src/global.c **** 			{
 462:../src/global.c **** 				GS_PREV_STATE = gate_status;
 1719                             		.loc 1 462 0
 1720 0b35 AF 00 00                		movw	ax, !_gate_status
 1721 0b38 BD F0                   		movw	r8, ax
 1722 0b3a 8D F0                   		mov	a, r8
 1723 0b3c 9F 00 00                		mov	!_GS_PREV_STATE, a
 463:../src/global.c **** 				gate_status = GS_CLOSED;
 1724                             		.loc 1 463 0
 1725 0b3f 30 02 00                		movw	ax, #2
 1726 0b42 BF 00 00                		movw	!_gate_status, ax
 464:../src/global.c **** 				if (GS_PREV_STATE != gate_status)
 1727                             		.loc 1 464 0
 1728 0b45 8F 00 00                		mov	a, !_GS_PREV_STATE
 1729 0b48 9D F0                   		mov	r8, a
 1730 0b4a 70                      		mov	x, a 
 1731 0b4b 51 00                   		mov	a, #0
 1732 0b4d BD F2                   		movw	r10, ax
 1733 0b4f AF 00 00                		movw	ax, !_gate_status
 1734 0b52 BD F0                   		movw	r8, ax
 1735 0b54 AD F2                   		movw	ax, r10
 1736 0b56 46 F0                   		cmpw	ax, r8
 1737 0b58 61 F8                   		 sknz
 1738 0b5a EC 8C 0B 00             		 br	!!.L63
 465:../src/global.c **** 				{
 466:../src/global.c **** 					dataPrint = 0;
 1739                             		.loc 1 466 0
 1740 0b5e F5 00 00                		clrb	!_dataPrint
 467:../src/global.c **** 					DVR_nSLEEP = 0;
 1741                             		.loc 1 467 0
 1742 0b61 C9 F0 04 FF             		movw	r8, #-252
 1743 0b65 AD F0                   		movw	ax, r8
 1744 0b67 BD F4                   		movw	r12, ax
 1745 0b69 FA F4                   		movw	hl, r12
 1746 0b6b 8B                      		mov	a, [hl]
 1747 0b6c 9D F2                   		mov	r10, a
 1748 0b6e 5A F2 FB                		and	r10, #-5
 1749 0b71 AD F0                   		movw	ax, r8
 1750 0b73 DA F4                   		movw	bc, r12
 1751 0b75 8D F2                   		mov	a, r10
 1752 0b77 48 00 00                		mov	[bc], a
 468:../src/global.c **** 					print_lcd("Closed");
 1753                             		.loc 1 468 0
 1754 0b7a 30 3D 00                		movw	ax, #.LC5
 1755 0b7d B8 00                   		movw	[sp], ax
 1756 0b7f FC 00 00 00             		call	!!%code(_print_lcd)
 469:../src/global.c **** 					msDelay(5);
 1757                             		.loc 1 469 0
 1758 0b83 30 05 00                		movw	ax, #5
 1759 0b86 B8 00                   		movw	[sp], ax
 1760 0b88 FC 00 00 00             		call	!!%code(_msDelay)
 1761                             	.L63:
 470:../src/global.c **** 				}
 471:../src/global.c **** 			}
 472:../src/global.c **** 		}
 473:../src/global.c **** 	}
 474:../src/global.c **** }
 1762                             		.loc 1 474 0
 1763 0b8c 10 02                   		addw	sp, #2
 1764 0b8e D7                      		ret
 1765                             	.LFE14:
 1767                             		.section	.rodata
 1768                             	.LC8:
 1769 005b 47 61 74 65 20 73 74 6F 		.string	"Gate stopped."
 1769      70 70 65 64 2E 00 
 1770                             	.text
 1771                             		.global	_boardBtn
 1773                             	_boardBtn:
 1774                             	.LFB15:
 475:../src/global.c **** 
 476:../src/global.c **** /**
 477:../src/global.c ****  * Inspect the board button values
 478:../src/global.c ****  */
 479:../src/global.c **** void boardBtn()
 480:../src/global.c **** {
 1775                             		.loc 1 480 0
 1776                             		; start of function
 1777                             		; outgoing: 2 bytes
 1778 0b8f 20 02                   		subw	sp, #2
 1779                             	.LCFI10:
 481:../src/global.c **** 	if (check_btns)
 1780                             		.loc 1 481 0
 1781 0b91 8F 00 00                		mov	a, !_check_btns
 1782 0b94 9D F0                   		mov	r8, a
 1783 0b96 D4 F0                   		cmp0	r8
 1784 0b98 61 F8                   		 sknz
 1785 0b9a EC 49 0C 00             		 br	!!.L67
 482:../src/global.c **** 	{
 483:../src/global.c **** 		check_btns = 0; //Reset
 1786                             		.loc 1 483 0
 1787 0b9e F5 00 00                		clrb	!_check_btns
 484:../src/global.c **** 
 485:../src/global.c **** 		if (!mode) //Normal mode
 1788                             		.loc 1 485 0
 1789 0ba1 8F 00 00                		mov	a, !_mode
 1790 0ba4 9D F0                   		mov	r8, a
 1791 0ba6 D4 F0                   		cmp0	r8
 1792 0ba8 61 E8                   		 skz
 1793 0baa EC F9 0B 00             		 br	!!.L69
 486:../src/global.c **** 		{
 487:../src/global.c **** 			if (!BTN_STOP)
 1794                             		.loc 1 487 0
 1795 0bae C9 F0 05 FF             		movw	r8, #-251
 1796 0bb2 AD F0                   		movw	ax, r8
 1797 0bb4 BD F2                   		movw	r10, ax
 1798 0bb6 FA F2                   		movw	hl, r10
 1799 0bb8 8B                      		mov	a, [hl]
 1800 0bb9 9D F0                   		mov	r8, a
 1801 0bbb 31 1A                   		shr	a, 1
 1802 0bbd 9D F0                   		mov	r8, a
 1803 0bbf 5A F0 01                		and	r8, #1
 1804 0bc2 61 E8                   		skz
 1805 0bc4 EC DC 0B 00             		 br	!!.L70
 1806                             		 # zero-comparison eliminated
 488:../src/global.c **** 			{
 489:../src/global.c **** 				dataPrint = 0;
 1807                             		.loc 1 489 0
 1808 0bc8 F5 00 00                		clrb	!_dataPrint
 490:../src/global.c **** 				stopGate();
 1809                             		.loc 1 490 0
 1810 0bcb FC 00 00 00             		call	!!%code(_stopGate)
 491:../src/global.c **** 				print_lcd("Gate stopped.");
 1811                             		.loc 1 491 0
 1812 0bcf 30 5B 00                		movw	ax, #.LC8
 1813 0bd2 B8 00                   		movw	[sp], ax
 1814 0bd4 FC 00 00 00             		call	!!%code(_print_lcd)
 492:../src/global.c **** 				return;
 1815                             		.loc 1 492 0
 1816 0bd8 EC 49 0C 00             		br	!!.L67
 1817                             	.L70:
 493:../src/global.c **** 			}
 494:../src/global.c **** 
 495:../src/global.c **** 			if (!BTN_STEP)
 1818                             		.loc 1 495 0
 1819 0bdc C9 F0 07 FF             		movw	r8, #-249
 1820 0be0 AD F0                   		movw	ax, r8
 1821 0be2 BD F2                   		movw	r10, ax
 1822 0be4 FA F2                   		movw	hl, r10
 1823 0be6 8B                      		mov	a, [hl]
 1824 0be7 9D F0                   		mov	r8, a
 1825 0be9 31 7A                   		shr	a, 7
 1826 0beb 9D F0                   		mov	r8, a
 1827 0bed D4 F0                   		cmp0	r8
 1828 0bef 61 E8                   		 skz
 1829 0bf1 EC 49 0C 00             		 br	!!.L67
 496:../src/global.c **** 			{
 497:../src/global.c **** 				//TODO
 498:../src/global.c **** 				return;
 1830                             		.loc 1 498 0
 1831 0bf5 EC 49 0C 00             		br	!!.L67
 1832                             	.L69:
 499:../src/global.c **** 			}
 500:../src/global.c **** 		}
 501:../src/global.c **** 
 502:../src/global.c **** 		else //Test mode
 503:../src/global.c **** 		{
 504:../src/global.c **** 			if (!BTN_OPEN)
 1833                             		.loc 1 504 0
 1834 0bf9 C9 F0 05 FF             		movw	r8, #-251
 1835 0bfd AD F0                   		movw	ax, r8
 1836 0bff BD F2                   		movw	r10, ax
 1837 0c01 EA F2                   		movw	de, r10
 1838 0c03 89                      		mov	a, [de]
 1839 0c04 5C 01                   		and	a, #1
 1840 0c06 9D F0                   		mov	r8, a
 1841 0c08 D4 F0                   		cmp0	r8
 1842 0c0a 61 E8                   		 skz
 1843 0c0c EC 21 0C 00             		 br	!!.L71
 505:../src/global.c **** 			{
 506:../src/global.c **** 				openGate();
 1844                             		.loc 1 506 0
 1845 0c10 FC 00 00 00             		call	!!%code(_openGate)
 507:../src/global.c **** 				print_lcd("Gate opening...");
 1846                             		.loc 1 507 0
 1847 0c14 30 16 00                		movw	ax, #.LC2
 1848 0c17 B8 00                   		movw	[sp], ax
 1849 0c19 FC 00 00 00             		call	!!%code(_print_lcd)
 508:../src/global.c **** 				return;
 1850                             		.loc 1 508 0
 1851 0c1d EC 49 0C 00             		br	!!.L67
 1852                             	.L71:
 509:../src/global.c **** 			}
 510:../src/global.c **** 
 511:../src/global.c **** 			if (!BTN_CLOSE)
 1853                             		.loc 1 511 0
 1854 0c21 C9 F0 03 FF             		movw	r8, #-253
 1855 0c25 AD F0                   		movw	ax, r8
 1856 0c27 BD F2                   		movw	r10, ax
 1857 0c29 FA F2                   		movw	hl, r10
 1858 0c2b 8B                      		mov	a, [hl]
 1859 0c2c 9D F0                   		mov	r8, a
 1860 0c2e 31 1A                   		shr	a, 1
 1861 0c30 9D F0                   		mov	r8, a
 1862 0c32 5A F0 01                		and	r8, #1
 1863 0c35 61 E8                   		skz
 1864 0c37 EC 49 0C 00             		 br	!!.L67
 1865                             		 # zero-comparison eliminated
 512:../src/global.c **** 			{
 513:../src/global.c **** 				closeGate();
 1866                             		.loc 1 513 0
 1867 0c3b FC 00 00 00             		call	!!%code(_closeGate)
 514:../src/global.c **** 				print_lcd("Gate closing...");
 1868                             		.loc 1 514 0
 1869 0c3f 30 26 00                		movw	ax, #.LC3
 1870 0c42 B8 00                   		movw	[sp], ax
 1871 0c44 FC 00 00 00             		call	!!%code(_print_lcd)
 515:../src/global.c **** 				return;
 1872                             		.loc 1 515 0
 1873 0c48 00                      		nop
 1874                             	.L67:
 516:../src/global.c **** 			}
 517:../src/global.c **** 		}
 518:../src/global.c **** 	}
 519:../src/global.c **** }
 1875                             		.loc 1 519 0
 1876 0c49 10 02                   		addw	sp, #2
 1877 0c4b D7                      		ret
 1878                             	.LFE15:
 2070                             	.Letext0:
 2071                             		.file 2 "../src/iodefine.h"
 2072                             		.file 3 "../src/r_cg_macrodriver.h"
 2073                             		.file 4 "../src/r_cg_rtc.h"
 2074                             		.file 5 "../src/infrared.h"
 2075                             		.file 6 "../src/adc.h"
 2076                             		.file 7 "../src/global.h"
