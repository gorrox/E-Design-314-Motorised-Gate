   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.global	_startTMR0
  29                             	_startTMR0:
  30                             	.LFB0:
  31                             		.file 1 "../src/lcd.c"
   1:../src/lcd.c  **** /*
   2:../src/lcd.c  ****  * lcd.c
   3:../src/lcd.c  ****  *
   4:../src/lcd.c  ****  *  Created on: 05 Feb 2016
   5:../src/lcd.c  ****  *      Author: jtreurn
   6:../src/lcd.c  ****  */
   7:../src/lcd.c  **** 
   8:../src/lcd.c  **** #include "lcd.h" // or any other includes that makes sense
   9:../src/lcd.c  **** #include "r_cg_macrodriver.h"
  10:../src/lcd.c  **** #include "r_cg_cgc.h"
  11:../src/lcd.c  **** #include "r_cg_port.h"
  12:../src/lcd.c  **** #include "r_cg_serial.h"
  13:../src/lcd.c  **** #include "r_cg_timer.h"
  14:../src/lcd.c  **** #include "r_cg_userdefine.h"
  15:../src/lcd.c  **** 
  16:../src/lcd.c  **** // Notes:
  17:../src/lcd.c  **** // This is a basic low-level set of functions to drive the LCD. The functions include
  18:../src/lcd.c  **** // 	- void initLcd(void) --- set up the LCD; requires a function delayNoInt(time in usec) to operat
  19:../src/lcd.c  **** // 	- void writeNibbleLcd(uint8_t reg, uint8_t nibble) --- low level command
  20:../src/lcd.c  **** // 	- void writeByteLcd(uint8_t reg, uint8_t value) --- lowest user level command
  21:../src/lcd.c  **** //
  22:../src/lcd.c  **** // To be useful, you should write your own functions to:
  23:../src/lcd.c  **** //	- write an ASCII character to the LCD
  24:../src/lcd.c  **** //	- write a whole string to the LCD
  25:../src/lcd.c  **** //	- write a delay function delayNoInt(delay in usec)
  26:../src/lcd.c  **** 
  27:../src/lcd.c  **** /**
  28:../src/lcd.c  ****  * Starts the timer that forms the delay function
  29:../src/lcd.c  ****  * @param delay time to delay
  30:../src/lcd.c  ****  */
  31:../src/lcd.c  **** void startTMR0(int delay)
  32:../src/lcd.c  **** {
  32                             		.loc 1 32 0
  33:../src/lcd.c  **** 	TMIF00 = 0U;					//clears the INTTMOO interrupt flag
  33                             		.loc 1 33 0
  34 0000 C9 F0 E2 FF             		movw	r8, #-30
  35 0004 AD F0                   		movw	ax, r8
  36 0006 BD F4                   		movw	r12, ax
  37 0008 FA F4                   		movw	hl, r12
  38 000a 8B                      		mov	a, [hl]
  39 000b 9D F2                   		mov	r10, a
  40 000d 5A F2 EF                		and	r10, #-17
  41 0010 AD F0                   		movw	ax, r8
  42 0012 DA F4                   		movw	bc, r12
  43 0014 8D F2                   		mov	a, r10
  44 0016 48 00 00                		mov	[bc], a
  34:../src/lcd.c  **** 	TDR00 = delay;
  45                             		.loc 1 34 0
  46 0019 C9 F2 18 FF             		movw	r10, #-232
  47 001d A8 04                   		movw	ax, [sp+4]
  48 001f BD F0                   		movw	r8, ax
  49 0021 AD F2                   		movw	ax, r10
  50 0023 BD F4                   		movw	r12, ax
  51 0025 DA F4                   		movw	bc, r12
  52 0027 AD F0                   		movw	ax, r8
  53 0029 78 00 00                		movw	[bc], ax
  35:../src/lcd.c  **** 	TS0 = 1U;
  54                             		.loc 1 35 0
  55 002c C9 F0 B2 01             		movw	r8, #434
  56 0030 AD F0                   		movw	ax, r8
  57 0032 BD F2                   		movw	r10, ax
  58 0034 DA F2                   		movw	bc, r10
  59 0036 E6                      		onew	ax
  60 0037 78 00 00                		movw	[bc], ax
  36:../src/lcd.c  **** }
  61                             		.loc 1 36 0
  62 003a D7                      		ret
  63                             	.LFE0:
  65                             		.global	_delayNoInt
  67                             	_delayNoInt:
  68                             	.LFB1:
  37:../src/lcd.c  **** 
  38:../src/lcd.c  **** /**
  39:../src/lcd.c  ****  * Function to delay in microseconds
  40:../src/lcd.c  ****  * @param delay number of microseconds to delay
  41:../src/lcd.c  ****  */
  42:../src/lcd.c  **** void delayNoInt(uint16_t delay)
  43:../src/lcd.c  **** {
  69                             		.loc 1 43 0
  70                             		; start of function
  71                             		; outgoing: 2 bytes
  72 003b 20 02                   		subw	sp, #2
  73                             	.LCFI0:
  44:../src/lcd.c  **** 	startTMR0(delay);
  74                             		.loc 1 44 0
  75 003d A8 06                   		movw	ax, [sp+6]
  76 003f BD F0                   		movw	r8, ax
  77 0041 B8 00                   		movw	[sp], ax
  78 0043 FC 00 00 00             		call	!!%code(_startTMR0)
  45:../src/lcd.c  **** 	while(TMIF00 == 0)
  79                             		.loc 1 45 0
  80 0047 EC 4C 00 00             		br	!!.L3
  81                             	.L4:
  46:../src/lcd.c  **** 		NOP();
  82                             		.loc 1 46 0
  83                             	 ; 46 "../src/lcd.c" 1
  84 004b 00                      		nop
  85                             	 ; 0 "" 2
  86                             	.L3:
  45:../src/lcd.c  **** 	while(TMIF00 == 0)
  87                             		.loc 1 45 0
  88 004c C9 F0 E2 FF             		movw	r8, #-30
  89 0050 AD F0                   		movw	ax, r8
  90 0052 BD F2                   		movw	r10, ax
  91 0054 FA F2                   		movw	hl, r10
  92 0056 8B                      		mov	a, [hl]
  93 0057 9D F0                   		mov	r8, a
  94 0059 31 4A                   		shr	a, 4
  95 005b 9D F0                   		mov	r8, a
  96 005d 5A F0 01                		and	r8, #1
  97 0060 61 F8                   		sknz
  98 0062 EC 4B 00 00             		 br	!!.L4
  99                             		 # zero-comparison eliminated
  47:../src/lcd.c  **** 	R_TAU0_Channel0_Stop();			//masks the interrupt
 100                             		.loc 1 47 0
 101 0066 FC 00 00 00             		call	!!%code(_R_TAU0_Channel0_Stop)
  48:../src/lcd.c  **** }
 102                             		.loc 1 48 0
 103 006a 10 02                   		addw	sp, #2
 104 006c D7                      		ret
 105                             	.LFE1:
 107                             		.global	_writeByteLcd
 109                             	_writeByteLcd:
 110                             	.LFB2:
  49:../src/lcd.c  **** 
  50:../src/lcd.c  **** /**
  51:../src/lcd.c  ****  * This function writes 2 nibbles to the LCD.
  52:../src/lcd.c  ****  * Nibble bus P70-P73 are set in output mode
  53:../src/lcd.c  ****  * LCD_RS = 1; LCD_RW -> 0; LCD_E is toggled
  54:../src/lcd.c  ****  * @param reg (BOOL) - 0 = register, 1 = data
  55:../src/lcd.c  ****  * @param value (BYTE) - first the upper 4 bits and the 4 lower bits
  56:../src/lcd.c  ****  */
  57:../src/lcd.c  **** void writeByteLcd(uint8_t reg, uint8_t value)
  58:../src/lcd.c  **** {
 111                             		.loc 1 58 0
 112                             		; start of function
 113                             		; locals: 2 bytes
 114                             		; outgoing: 4 bytes
 115 006d 20 06                   		subw	sp, #6
 116                             	.LCFI1:
  59:../src/lcd.c  **** 	uint8_t tempReg;
  60:../src/lcd.c  **** 
  61:../src/lcd.c  **** 	tempReg = value >> 4;			// Get high nibble
 117                             		.loc 1 61 0
 118 006f 88 0C                   		mov	a, [sp+12]
 119 0071 31 4A                   		shr	a, 4
 120 0073 98 05                   		mov	[sp+5], a
  62:../src/lcd.c  **** 	writeNibbleLcd(reg, tempReg);	// Write high nibble
 121                             		.loc 1 62 0
 122 0075 88 0A                   		mov	a, [sp+10]
 123 0077 9D F0                   		mov	r8, a
 124 0079 98 00                   		mov	[sp], a
 125 007b 88 05                   		mov	a, [sp+5]
 126 007d 9D F0                   		mov	r8, a
 127 007f 98 02                   		mov	[sp+2], a
 128 0081 FC 00 00 00             		call	!!%code(_writeNibbleLcd)
  63:../src/lcd.c  **** 
  64:../src/lcd.c  **** 	tempReg = value & 0x0F;			// Get lower nibble
 129                             		.loc 1 64 0
 130 0085 88 0C                   		mov	a, [sp+12]
 131 0087 5C 0F                   		and	a, #15
 132 0089 98 05                   		mov	[sp+5], a
  65:../src/lcd.c  **** 	writeNibbleLcd(reg, tempReg);	// Write lower nibble
 133                             		.loc 1 65 0
 134 008b 88 0A                   		mov	a, [sp+10]
 135 008d 9D F0                   		mov	r8, a
 136 008f 98 00                   		mov	[sp], a
 137 0091 88 05                   		mov	a, [sp+5]
 138 0093 9D F0                   		mov	r8, a
 139 0095 98 02                   		mov	[sp+2], a
 140 0097 FC 00 00 00             		call	!!%code(_writeNibbleLcd)
  66:../src/lcd.c  **** }
 141                             		.loc 1 66 0
 142 009b 10 06                   		addw	sp, #6
 143 009d D7                      		ret
 144                             	.LFE2:
 146                             		.global	_writeNibbleLcd
 148                             	_writeNibbleLcd:
 149                             	.LFB3:
  67:../src/lcd.c  **** 
  68:../src/lcd.c  **** /**
  69:../src/lcd.c  ****  * This function writes a nibble to the LCD.
  70:../src/lcd.c  ****  * Nibble bus P70-P73 set in output mode
  71:../src/lcd.c  ****  * LCD_RS = 1; LCD_RW -> 0; LCD_E is toggled
  72:../src/lcd.c  ****  * @param reg (BOOL) - 0 = register, 1 = data
  73:../src/lcd.c  ****  * @param nibble (BYTE) - only the lower 4 bits are used
  74:../src/lcd.c  ****  */
  75:../src/lcd.c  **** void writeNibbleLcd(uint8_t reg, uint8_t nibble)
  76:../src/lcd.c  **** {
 150                             		.loc 1 76 0
 151                             		; start of function
 152                             		; locals: 2 bytes
 153 009e 20 02                   		subw	sp, #2
 154                             	.LCFI2:
  77:../src/lcd.c  **** 	uint8_t tempReg;
  78:../src/lcd.c  **** 
  79:../src/lcd.c  **** 	if (reg)
 155                             		.loc 1 79 0
 156 00a0 88 06                   		mov	a, [sp+6]
 157 00a2 D1                      		cmp0	a
 158 00a3 61 F8                   		 sknz
 159 00a5 EC C6 00 00             		 br	!!.L7
  80:../src/lcd.c  **** 		LCD_RS = 1U;							// Read/write RAM
 160                             		.loc 1 80 0
 161 00a9 C9 F0 07 FF             		movw	r8, #-249
 162 00ad AD F0                   		movw	ax, r8
 163 00af BD F4                   		movw	r12, ax
 164 00b1 FA F4                   		movw	hl, r12
 165 00b3 8B                      		mov	a, [hl]
 166 00b4 9D F2                   		mov	r10, a
 167 00b6 6A F2 40                		or	r10, #64
 168 00b9 AD F0                   		movw	ax, r8
 169 00bb DA F4                   		movw	bc, r12
 170 00bd 8D F2                   		mov	a, r10
 171 00bf 48 00 00                		mov	[bc], a
 172 00c2 EC DF 00 00             		br	!!.L8
 173                             	.L7:
  81:../src/lcd.c  **** 	else
  82:../src/lcd.c  **** 		LCD_RS = 0U;							// Command
 174                             		.loc 1 82 0
 175 00c6 C9 F0 07 FF             		movw	r8, #-249
 176 00ca AD F0                   		movw	ax, r8
 177 00cc BD F4                   		movw	r12, ax
 178 00ce FA F4                   		movw	hl, r12
 179 00d0 8B                      		mov	a, [hl]
 180 00d1 9D F2                   		mov	r10, a
 181 00d3 5A F2 BF                		and	r10, #-65
 182 00d6 AD F0                   		movw	ax, r8
 183 00d8 DA F4                   		movw	bc, r12
 184 00da 8D F2                   		mov	a, r10
 185 00dc 48 00 00                		mov	[bc], a
 186                             	.L8:
  83:../src/lcd.c  **** 
  84:../src/lcd.c  **** 	LCD_RW   = 0U;								// Set to Write mode
 187                             		.loc 1 84 0
 188 00df C9 F0 07 FF             		movw	r8, #-249
 189 00e3 AD F0                   		movw	ax, r8
 190 00e5 BD F4                   		movw	r12, ax
 191 00e7 FA F4                   		movw	hl, r12
 192 00e9 8B                      		mov	a, [hl]
 193 00ea 9D F2                   		mov	r10, a
 194 00ec 5A F2 DF                		and	r10, #-33
 195 00ef AD F0                   		movw	ax, r8
 196 00f1 DA F4                   		movw	bc, r12
 197 00f3 8D F2                   		mov	a, r10
 198 00f5 48 00 00                		mov	[bc], a
  85:../src/lcd.c  **** 	PM7     &= 0xF0;        					// Set Port 7 Data nibble to output mode
 199                             		.loc 1 85 0
 200 00f8 C9 F2 27 FF             		movw	r10, #-217
 201 00fc C9 F0 27 FF             		movw	r8, #-217
 202 0100 AD F0                   		movw	ax, r8
 203 0102 BD F4                   		movw	r12, ax
 204 0104 FA F4                   		movw	hl, r12
 205 0106 8B                      		mov	a, [hl]
 206 0107 9D F0                   		mov	r8, a
 207 0109 5A F0 F0                		and	r8, #-16
 208 010c AD F2                   		movw	ax, r10
 209 010e BD F4                   		movw	r12, ax
 210 0110 DA F4                   		movw	bc, r12
 211 0112 8D F0                   		mov	a, r8
 212 0114 48 00 00                		mov	[bc], a
  86:../src/lcd.c  **** 	tempReg  = (P7 & 0xF0) | (nibble & 0x0F);  	// Combine nibble and P7
 213                             		.loc 1 86 0
 214 0117 C9 F0 07 FF             		movw	r8, #-249
 215 011b AD F0                   		movw	ax, r8
 216 011d BD F2                   		movw	r10, ax
 217 011f FA F2                   		movw	hl, r10
 218 0121 8B                      		mov	a, [hl]
 219 0122 9D F0                   		mov	r8, a
 220 0124 5C F0                   		and	a, #-16
 221 0126 9D F1                   		mov	r9, a
 222 0128 88 08                   		mov	a, [sp+8]
 223 012a 9D F0                   		mov	r8, a
 224 012c 5A F0 0F                		and	r8, #15
 225 012f 8D F1                   		mov	a, r9
 226 0131 6B F0                   		or	a, r8
 227 0133 9D F0                   		mov	r8, a
 228 0135 98 01                   		mov	[sp+1], a
  87:../src/lcd.c  **** 	P7       = tempReg;     					// Load Port 7 data nibble
 229                             		.loc 1 87 0
 230 0137 C9 F0 07 FF             		movw	r8, #-249
 231 013b 88 01                   		mov	a, [sp+1]
 232 013d 9D F2                   		mov	r10, a
 233 013f AD F0                   		movw	ax, r8
 234 0141 BD F4                   		movw	r12, ax
 235 0143 DA F4                   		movw	bc, r12
 236 0145 8D F2                   		mov	a, r10
 237 0147 48 00 00                		mov	[bc], a
  88:../src/lcd.c  **** 	SET_LCD_EN_HIGH;							// LCD_E  = 1U; (Enable high)
 238                             		.loc 1 88 0
 239 014a C9 F0 07 FF             		movw	r8, #-249
 240 014e AD F0                   		movw	ax, r8
 241 0150 BD F4                   		movw	r12, ax
 242 0152 FA F4                   		movw	hl, r12
 243 0154 8B                      		mov	a, [hl]
 244 0155 9D F2                   		mov	r10, a
 245 0157 6A F2 10                		or	r10, #16
 246 015a AD F0                   		movw	ax, r8
 247 015c DA F4                   		movw	bc, r12
 248 015e 8D F2                   		mov	a, r10
 249 0160 48 00 00                		mov	[bc], a
  89:../src/lcd.c  **** 	// Wait > 0.3 usec
  90:../src/lcd.c  **** 	NOP(); NOP(); NOP(); NOP(); NOP(); NOP();
 250                             		.loc 1 90 0
 251                             	 ; 90 "../src/lcd.c" 1
 252 0163 00                      		nop
 253                             	 ; 0 "" 2
 254                             	 ; 90 "../src/lcd.c" 1
 255 0164 00                      		nop
 256                             	 ; 0 "" 2
 257                             	 ; 90 "../src/lcd.c" 1
 258 0165 00                      		nop
 259                             	 ; 0 "" 2
 260                             	 ; 90 "../src/lcd.c" 1
 261 0166 00                      		nop
 262                             	 ; 0 "" 2
 263                             	 ; 90 "../src/lcd.c" 1
 264 0167 00                      		nop
 265                             	 ; 0 "" 2
 266                             	 ; 90 "../src/lcd.c" 1
 267 0168 00                      		nop
 268                             	 ; 0 "" 2
  91:../src/lcd.c  **** 
  92:../src/lcd.c  **** 	SET_LCD_EN_LOW;								// LCD_E  = 0U; (Set Enable low)
 269                             		.loc 1 92 0
 270 0169 C9 F0 07 FF             		movw	r8, #-249
 271 016d AD F0                   		movw	ax, r8
 272 016f BD F4                   		movw	r12, ax
 273 0171 FA F4                   		movw	hl, r12
 274 0173 8B                      		mov	a, [hl]
 275 0174 9D F2                   		mov	r10, a
 276 0176 5A F2 EF                		and	r10, #-17
 277 0179 AD F0                   		movw	ax, r8
 278 017b DA F4                   		movw	bc, r12
 279 017d 8D F2                   		mov	a, r10
 280 017f 48 00 00                		mov	[bc], a
  93:../src/lcd.c  **** 	NOP(); NOP();   							// Wait (2 x T_CLK)
 281                             		.loc 1 93 0
 282                             	 ; 93 "../src/lcd.c" 1
 283 0182 00                      		nop
 284                             	 ; 0 "" 2
 285                             	 ; 93 "../src/lcd.c" 1
 286 0183 00                      		nop
 287                             	 ; 0 "" 2
  94:../src/lcd.c  **** 	//    PM7 |= 0x0F;    							// Set Port 7 Data to input mode
  95:../src/lcd.c  **** 	LCD_RW = 1U;    							// Set to Read mode
 288                             		.loc 1 95 0
 289 0184 C9 F0 07 FF             		movw	r8, #-249
 290 0188 AD F0                   		movw	ax, r8
 291 018a BD F4                   		movw	r12, ax
 292 018c FA F4                   		movw	hl, r12
 293 018e 8B                      		mov	a, [hl]
 294 018f 9D F2                   		mov	r10, a
 295 0191 6A F2 20                		or	r10, #32
 296 0194 AD F0                   		movw	ax, r8
 297 0196 DA F4                   		movw	bc, r12
 298 0198 8D F2                   		mov	a, r10
 299 019a 48 00 00                		mov	[bc], a
  96:../src/lcd.c  **** }
 300                             		.loc 1 96 0
 301 019d 10 02                   		addw	sp, #2
 302 019f D7                      		ret
 303                             	.LFE3:
 305                             		.global	_initLcd
 307                             	_initLcd:
 308                             	.LFB4:
  97:../src/lcd.c  **** 
  98:../src/lcd.c  **** /**
  99:../src/lcd.c  ****  * This function initializes the LCD.
 100:../src/lcd.c  ****  * Provide all the init instructions - clear screen
 101:../src/lcd.c  ****  */
 102:../src/lcd.c  **** void initLcd(void)
 103:../src/lcd.c  **** {
 309                             		.loc 1 103 0
 310                             		; start of function
 311                             		; outgoing: 4 bytes
 312 01a0 20 04                   		subw	sp, #4
 313                             	.LCFI3:
 104:../src/lcd.c  **** 	TMMK00 = 1U;					// Do not use interrupts here, just wait for the flags
 314                             		.loc 1 104 0
 315 01a2 C9 F0 E6 FF             		movw	r8, #-26
 316 01a6 AD F0                   		movw	ax, r8
 317 01a8 BD F4                   		movw	r12, ax
 318 01aa FA F4                   		movw	hl, r12
 319 01ac 8B                      		mov	a, [hl]
 320 01ad 9D F2                   		mov	r10, a
 321 01af 6A F2 10                		or	r10, #16
 322 01b2 AD F0                   		movw	ax, r8
 323 01b4 DA F4                   		movw	bc, r12
 324 01b6 8D F2                   		mov	a, r10
 325 01b8 48 00 00                		mov	[bc], a
 105:../src/lcd.c  **** 
 106:../src/lcd.c  **** 	delayNoInt(15000);				// wait 15 msec for LCD power up
 326                             		.loc 1 106 0
 327 01bb 30 98 3A                		movw	ax, #15000
 328 01be B8 00                   		movw	[sp], ax
 329 01c0 FC 00 00 00             		call	!!%code(_delayNoInt)
 107:../src/lcd.c  **** 
 108:../src/lcd.c  **** 	writeNibbleLcd(LCD_CTRL_WR, 0x3); 	// Command 1 -> 8 bits
 330                             		.loc 1 108 0
 331 01c4 F1                      		clrb	a
 332 01c5 98 00                   		mov	[sp], a
 333 01c7 51 03                   		mov	a, #3
 334 01c9 98 02                   		mov	[sp+2], a
 335 01cb FC 00 00 00             		call	!!%code(_writeNibbleLcd)
 109:../src/lcd.c  **** 	delayNoInt(4100);				// Start timer with 4100 usec delay
 336                             		.loc 1 109 0
 337 01cf 30 04 10                		movw	ax, #4100
 338 01d2 B8 00                   		movw	[sp], ax
 339 01d4 FC 00 00 00             		call	!!%code(_delayNoInt)
 110:../src/lcd.c  **** 
 111:../src/lcd.c  **** 	writeNibbleLcd(LCD_CTRL_WR, 0x3);	// Command 2 -> 8 bits
 340                             		.loc 1 111 0
 341 01d8 F1                      		clrb	a
 342 01d9 98 00                   		mov	[sp], a
 343 01db 51 03                   		mov	a, #3
 344 01dd 98 02                   		mov	[sp+2], a
 345 01df FC 00 00 00             		call	!!%code(_writeNibbleLcd)
 112:../src/lcd.c  **** 	delayNoInt(100);				// Start timer with 100 usec delay
 346                             		.loc 1 112 0
 347 01e3 30 64 00                		movw	ax, #100
 348 01e6 B8 00                   		movw	[sp], ax
 349 01e8 FC 00 00 00             		call	!!%code(_delayNoInt)
 113:../src/lcd.c  **** 
 114:../src/lcd.c  **** 	writeNibbleLcd(LCD_CTRL_WR, 0x3);	// Command 3 -> 8 bits
 350                             		.loc 1 114 0
 351 01ec F1                      		clrb	a
 352 01ed 98 00                   		mov	[sp], a
 353 01ef 51 03                   		mov	a, #3
 354 01f1 98 02                   		mov	[sp+2], a
 355 01f3 FC 00 00 00             		call	!!%code(_writeNibbleLcd)
 115:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 356                             		.loc 1 115 0
 357 01f7 30 28 00                		movw	ax, #40
 358 01fa B8 00                   		movw	[sp], ax
 359 01fc FC 00 00 00             		call	!!%code(_delayNoInt)
 116:../src/lcd.c  **** 
 117:../src/lcd.c  **** 	writeNibbleLcd(LCD_CTRL_WR, 0x2);	// Command 4 -> 4 bits
 360                             		.loc 1 117 0
 361 0200 F1                      		clrb	a
 362 0201 98 00                   		mov	[sp], a
 363 0203 51 02                   		mov	a, #2
 364 0205 98 02                   		mov	[sp+2], a
 365 0207 FC 00 00 00             		call	!!%code(_writeNibbleLcd)
 118:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 366                             		.loc 1 118 0
 367 020b 30 28 00                		movw	ax, #40
 368 020e B8 00                   		movw	[sp], ax
 369 0210 FC 00 00 00             		call	!!%code(_delayNoInt)
 119:../src/lcd.c  **** 
 120:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, FUNCTION_SET);  // Set 2 lines, 5x7 dots
 370                             		.loc 1 120 0
 371 0214 F1                      		clrb	a
 372 0215 98 00                   		mov	[sp], a
 373 0217 51 28                   		mov	a, #40
 374 0219 98 02                   		mov	[sp+2], a
 375 021b FC 00 00 00             		call	!!%code(_writeByteLcd)
 121:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 376                             		.loc 1 121 0
 377 021f 30 28 00                		movw	ax, #40
 378 0222 B8 00                   		movw	[sp], ax
 379 0224 FC 00 00 00             		call	!!%code(_delayNoInt)
 122:../src/lcd.c  **** 
 123:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, LCD_CURSOR_ON);     // Display Cursor ON
 380                             		.loc 1 123 0
 381 0228 F1                      		clrb	a
 382 0229 98 00                   		mov	[sp], a
 383 022b 51 0E                   		mov	a, #14
 384 022d 98 02                   		mov	[sp+2], a
 385 022f FC 00 00 00             		call	!!%code(_writeByteLcd)
 124:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 386                             		.loc 1 124 0
 387 0233 30 28 00                		movw	ax, #40
 388 0236 B8 00                   		movw	[sp], ax
 389 0238 FC 00 00 00             		call	!!%code(_delayNoInt)
 125:../src/lcd.c  **** 
 126:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);          // Clear Display
 390                             		.loc 1 126 0
 391 023c F1                      		clrb	a
 392 023d 98 00                   		mov	[sp], a
 393 023f E1                      		oneb	a
 394 0240 98 02                   		mov	[sp+2], a
 395 0242 FC 00 00 00             		call	!!%code(_writeByteLcd)
 127:../src/lcd.c  **** 	delayNoInt(1640);				// Start timer with 1640 usec delay
 396                             		.loc 1 127 0
 397 0246 30 68 06                		movw	ax, #1640
 398 0249 B8 00                   		movw	[sp], ax
 399 024b FC 00 00 00             		call	!!%code(_delayNoInt)
 128:../src/lcd.c  **** 
 129:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, CURSOR_MODE_INC);    // Entry Mode set
 400                             		.loc 1 129 0
 401 024f F1                      		clrb	a
 402 0250 98 00                   		mov	[sp], a
 403 0252 51 06                   		mov	a, #6
 404 0254 98 02                   		mov	[sp+2], a
 405 0256 FC 00 00 00             		call	!!%code(_writeByteLcd)
 130:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 406                             		.loc 1 130 0
 407 025a 30 28 00                		movw	ax, #40
 408 025d B8 00                   		movw	[sp], ax
 409 025f FC 00 00 00             		call	!!%code(_delayNoInt)
 131:../src/lcd.c  **** 
 132:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 410                             		.loc 1 132 0
 411 0263 F1                      		clrb	a
 412 0264 98 00                   		mov	[sp], a
 413 0266 51 80                   		mov	a, #-128
 414 0268 98 02                   		mov	[sp+2], a
 415 026a FC 00 00 00             		call	!!%code(_writeByteLcd)
 133:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 416                             		.loc 1 133 0
 417 026e 30 28 00                		movw	ax, #40
 418 0271 B8 00                   		movw	[sp], ax
 419 0273 FC 00 00 00             		call	!!%code(_delayNoInt)
 134:../src/lcd.c  **** 
 135:../src/lcd.c  **** 	writeByteLcd(0U, CURSOR_MODE_INC);
 420                             		.loc 1 135 0
 421 0277 F1                      		clrb	a
 422 0278 98 00                   		mov	[sp], a
 423 027a 51 06                   		mov	a, #6
 424 027c 98 02                   		mov	[sp+2], a
 425 027e FC 00 00 00             		call	!!%code(_writeByteLcd)
 136:../src/lcd.c  **** 	delayNoInt(40);
 426                             		.loc 1 136 0
 427 0282 30 28 00                		movw	ax, #40
 428 0285 B8 00                   		movw	[sp], ax
 429 0287 FC 00 00 00             		call	!!%code(_delayNoInt)
 137:../src/lcd.c  **** 
 138:../src/lcd.c  **** 
 139:../src/lcd.c  **** 
 140:../src/lcd.c  **** }
 430                             		.loc 1 140 0
 431 028b 10 04                   		addw	sp, #4
 432 028d D7                      		ret
 433                             	.LFE4:
 435                             		.global	_testLCDConnections
 437                             	_testLCDConnections:
 438                             	.LFB5:
 141:../src/lcd.c  **** 
 142:../src/lcd.c  **** /**
 143:../src/lcd.c  ****  * Provided function - unknown use
 144:../src/lcd.c  ****  */
 145:../src/lcd.c  **** void testLCDConnections(void)
 146:../src/lcd.c  **** {
 439                             		.loc 1 146 0
 147:../src/lcd.c  **** 	P7 &= 0x80; // All low
 440                             		.loc 1 147 0
 441 028e C9 F2 07 FF             		movw	r10, #-249
 442 0292 C9 F0 07 FF             		movw	r8, #-249
 443 0296 AD F0                   		movw	ax, r8
 444 0298 BD F4                   		movw	r12, ax
 445 029a FA F4                   		movw	hl, r12
 446 029c 8B                      		mov	a, [hl]
 447 029d 9D F0                   		mov	r8, a
 448 029f 5A F0 80                		and	r8, #-128
 449 02a2 AD F2                   		movw	ax, r10
 450 02a4 BD F4                   		movw	r12, ax
 451 02a6 DA F4                   		movw	bc, r12
 452 02a8 8D F0                   		mov	a, r8
 453 02aa 48 00 00                		mov	[bc], a
 148:../src/lcd.c  **** 	NOP(); // Put a breakpoint here
 454                             		.loc 1 148 0
 455                             	 ; 148 "../src/lcd.c" 1
 456 02ad 00                      		nop
 457                             	 ; 0 "" 2
 149:../src/lcd.c  **** 	// and step (F6) from here
 150:../src/lcd.c  **** 	LCD_RS = 1; // RS high
 458                             		.loc 1 150 0
 459 02ae C9 F0 07 FF             		movw	r8, #-249
 460 02b2 AD F0                   		movw	ax, r8
 461 02b4 BD F4                   		movw	r12, ax
 462 02b6 FA F4                   		movw	hl, r12
 463 02b8 8B                      		mov	a, [hl]
 464 02b9 9D F2                   		mov	r10, a
 465 02bb 6A F2 40                		or	r10, #64
 466 02be AD F0                   		movw	ax, r8
 467 02c0 DA F4                   		movw	bc, r12
 468 02c2 8D F2                   		mov	a, r10
 469 02c4 48 00 00                		mov	[bc], a
 151:../src/lcd.c  **** 	NOP();
 470                             		.loc 1 151 0
 471                             	 ; 151 "../src/lcd.c" 1
 472 02c7 00                      		nop
 473                             	 ; 0 "" 2
 152:../src/lcd.c  **** 	LCD_RS = 0; // RS low
 474                             		.loc 1 152 0
 475 02c8 C9 F0 07 FF             		movw	r8, #-249
 476 02cc AD F0                   		movw	ax, r8
 477 02ce BD F4                   		movw	r12, ax
 478 02d0 FA F4                   		movw	hl, r12
 479 02d2 8B                      		mov	a, [hl]
 480 02d3 9D F2                   		mov	r10, a
 481 02d5 5A F2 BF                		and	r10, #-65
 482 02d8 AD F0                   		movw	ax, r8
 483 02da DA F4                   		movw	bc, r12
 484 02dc 8D F2                   		mov	a, r10
 485 02de 48 00 00                		mov	[bc], a
 153:../src/lcd.c  **** 	NOP();
 486                             		.loc 1 153 0
 487                             	 ; 153 "../src/lcd.c" 1
 488 02e1 00                      		nop
 489                             	 ; 0 "" 2
 154:../src/lcd.c  **** 	LCD_RW = 1; // RNW high
 490                             		.loc 1 154 0
 491 02e2 C9 F0 07 FF             		movw	r8, #-249
 492 02e6 AD F0                   		movw	ax, r8
 493 02e8 BD F4                   		movw	r12, ax
 494 02ea FA F4                   		movw	hl, r12
 495 02ec 8B                      		mov	a, [hl]
 496 02ed 9D F2                   		mov	r10, a
 497 02ef 6A F2 20                		or	r10, #32
 498 02f2 AD F0                   		movw	ax, r8
 499 02f4 DA F4                   		movw	bc, r12
 500 02f6 8D F2                   		mov	a, r10
 501 02f8 48 00 00                		mov	[bc], a
 155:../src/lcd.c  **** 	NOP();
 502                             		.loc 1 155 0
 503                             	 ; 155 "../src/lcd.c" 1
 504 02fb 00                      		nop
 505                             	 ; 0 "" 2
 156:../src/lcd.c  **** 	LCD_RW = 0; // RNW low
 506                             		.loc 1 156 0
 507 02fc C9 F0 07 FF             		movw	r8, #-249
 508 0300 AD F0                   		movw	ax, r8
 509 0302 BD F4                   		movw	r12, ax
 510 0304 FA F4                   		movw	hl, r12
 511 0306 8B                      		mov	a, [hl]
 512 0307 9D F2                   		mov	r10, a
 513 0309 5A F2 DF                		and	r10, #-33
 514 030c AD F0                   		movw	ax, r8
 515 030e DA F4                   		movw	bc, r12
 516 0310 8D F2                   		mov	a, r10
 517 0312 48 00 00                		mov	[bc], a
 157:../src/lcd.c  **** 	NOP();
 518                             		.loc 1 157 0
 519                             	 ; 157 "../src/lcd.c" 1
 520 0315 00                      		nop
 521                             	 ; 0 "" 2
 158:../src/lcd.c  **** 	LCD_E = 1; // E high
 522                             		.loc 1 158 0
 523 0316 C9 F0 07 FF             		movw	r8, #-249
 524 031a AD F0                   		movw	ax, r8
 525 031c BD F4                   		movw	r12, ax
 526 031e FA F4                   		movw	hl, r12
 527 0320 8B                      		mov	a, [hl]
 528 0321 9D F2                   		mov	r10, a
 529 0323 6A F2 10                		or	r10, #16
 530 0326 AD F0                   		movw	ax, r8
 531 0328 DA F4                   		movw	bc, r12
 532 032a 8D F2                   		mov	a, r10
 533 032c 48 00 00                		mov	[bc], a
 159:../src/lcd.c  **** 	NOP();
 534                             		.loc 1 159 0
 535                             	 ; 159 "../src/lcd.c" 1
 536 032f 00                      		nop
 537                             	 ; 0 "" 2
 160:../src/lcd.c  **** 	LCD_E = 0; // E low
 538                             		.loc 1 160 0
 539 0330 C9 F0 07 FF             		movw	r8, #-249
 540 0334 AD F0                   		movw	ax, r8
 541 0336 BD F4                   		movw	r12, ax
 542 0338 FA F4                   		movw	hl, r12
 543 033a 8B                      		mov	a, [hl]
 544 033b 9D F2                   		mov	r10, a
 545 033d 5A F2 EF                		and	r10, #-17
 546 0340 AD F0                   		movw	ax, r8
 547 0342 DA F4                   		movw	bc, r12
 548 0344 8D F2                   		mov	a, r10
 549 0346 48 00 00                		mov	[bc], a
 161:../src/lcd.c  **** 	NOP();
 550                             		.loc 1 161 0
 551                             	 ; 161 "../src/lcd.c" 1
 552 0349 00                      		nop
 553                             	 ; 0 "" 2
 162:../src/lcd.c  **** 	LCD_D0 = 1; // DB0/DB4 high
 554                             		.loc 1 162 0
 555 034a C9 F0 07 FF             		movw	r8, #-249
 556 034e AD F0                   		movw	ax, r8
 557 0350 BD F4                   		movw	r12, ax
 558 0352 FA F4                   		movw	hl, r12
 559 0354 8B                      		mov	a, [hl]
 560 0355 9D F2                   		mov	r10, a
 561 0357 6A F2 01                		or	r10, #1
 562 035a AD F0                   		movw	ax, r8
 563 035c DA F4                   		movw	bc, r12
 564 035e 8D F2                   		mov	a, r10
 565 0360 48 00 00                		mov	[bc], a
 163:../src/lcd.c  **** 	NOP();
 566                             		.loc 1 163 0
 567                             	 ; 163 "../src/lcd.c" 1
 568 0363 00                      		nop
 569                             	 ; 0 "" 2
 164:../src/lcd.c  **** 	LCD_D1 = 1; // DB1/DB5 high
 570                             		.loc 1 164 0
 571 0364 C9 F0 07 FF             		movw	r8, #-249
 572 0368 AD F0                   		movw	ax, r8
 573 036a BD F4                   		movw	r12, ax
 574 036c FA F4                   		movw	hl, r12
 575 036e 8B                      		mov	a, [hl]
 576 036f 9D F2                   		mov	r10, a
 577 0371 6A F2 02                		or	r10, #2
 578 0374 AD F0                   		movw	ax, r8
 579 0376 DA F4                   		movw	bc, r12
 580 0378 8D F2                   		mov	a, r10
 581 037a 48 00 00                		mov	[bc], a
 165:../src/lcd.c  **** 	NOP();
 582                             		.loc 1 165 0
 583                             	 ; 165 "../src/lcd.c" 1
 584 037d 00                      		nop
 585                             	 ; 0 "" 2
 166:../src/lcd.c  **** 	LCD_D2 = 1; // DB2/DB6 high
 586                             		.loc 1 166 0
 587 037e C9 F0 07 FF             		movw	r8, #-249
 588 0382 AD F0                   		movw	ax, r8
 589 0384 BD F4                   		movw	r12, ax
 590 0386 FA F4                   		movw	hl, r12
 591 0388 8B                      		mov	a, [hl]
 592 0389 9D F2                   		mov	r10, a
 593 038b 6A F2 04                		or	r10, #4
 594 038e AD F0                   		movw	ax, r8
 595 0390 DA F4                   		movw	bc, r12
 596 0392 8D F2                   		mov	a, r10
 597 0394 48 00 00                		mov	[bc], a
 167:../src/lcd.c  **** 	NOP();
 598                             		.loc 1 167 0
 599                             	 ; 167 "../src/lcd.c" 1
 600 0397 00                      		nop
 601                             	 ; 0 "" 2
 168:../src/lcd.c  **** 	LCD_D3 = 1; // DB3/DB7 high
 602                             		.loc 1 168 0
 603 0398 C9 F0 07 FF             		movw	r8, #-249
 604 039c AD F0                   		movw	ax, r8
 605 039e BD F4                   		movw	r12, ax
 606 03a0 FA F4                   		movw	hl, r12
 607 03a2 8B                      		mov	a, [hl]
 608 03a3 9D F2                   		mov	r10, a
 609 03a5 6A F2 08                		or	r10, #8
 610 03a8 AD F0                   		movw	ax, r8
 611 03aa DA F4                   		movw	bc, r12
 612 03ac 8D F2                   		mov	a, r10
 613 03ae 48 00 00                		mov	[bc], a
 169:../src/lcd.c  **** 	NOP();
 614                             		.loc 1 169 0
 615                             	 ; 169 "../src/lcd.c" 1
 616 03b1 00                      		nop
 617                             	 ; 0 "" 2
 170:../src/lcd.c  **** 	P7 &= 0x80; // Make all low
 618                             		.loc 1 170 0
 619 03b2 C9 F2 07 FF             		movw	r10, #-249
 620 03b6 C9 F0 07 FF             		movw	r8, #-249
 621 03ba AD F0                   		movw	ax, r8
 622 03bc BD F4                   		movw	r12, ax
 623 03be FA F4                   		movw	hl, r12
 624 03c0 8B                      		mov	a, [hl]
 625 03c1 9D F0                   		mov	r8, a
 626 03c3 5A F0 80                		and	r8, #-128
 627 03c6 AD F2                   		movw	ax, r10
 628 03c8 BD F4                   		movw	r12, ax
 629 03ca DA F4                   		movw	bc, r12
 630 03cc 8D F0                   		mov	a, r8
 631 03ce 48 00 00                		mov	[bc], a
 171:../src/lcd.c  **** }
 632                             		.loc 1 171 0
 633 03d1 D7                      		ret
 634                             	.LFE5:
 636                             		.global	_lcd_clear
 638                             	_lcd_clear:
 639                             	.LFB6:
 172:../src/lcd.c  **** 
 173:../src/lcd.c  **** /**
 174:../src/lcd.c  ****  * Clears the LCD
 175:../src/lcd.c  ****  */
 176:../src/lcd.c  **** void lcd_clear()
 177:../src/lcd.c  **** {
 640                             		.loc 1 177 0
 641                             		; start of function
 642                             		; outgoing: 4 bytes
 643 03d2 20 04                   		subw	sp, #4
 644                             	.LCFI4:
 178:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, LCD_CURSOR_ON);     // Display Cursor ON
 645                             		.loc 1 178 0
 646 03d4 F1                      		clrb	a
 647 03d5 98 00                   		mov	[sp], a
 648 03d7 51 0E                   		mov	a, #14
 649 03d9 98 02                   		mov	[sp+2], a
 650 03db FC 00 00 00             		call	!!%code(_writeByteLcd)
 179:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 651                             		.loc 1 179 0
 652 03df 30 28 00                		movw	ax, #40
 653 03e2 B8 00                   		movw	[sp], ax
 654 03e4 FC 00 00 00             		call	!!%code(_delayNoInt)
 180:../src/lcd.c  **** 
 181:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);          // Clear Display
 655                             		.loc 1 181 0
 656 03e8 F1                      		clrb	a
 657 03e9 98 00                   		mov	[sp], a
 658 03eb E1                      		oneb	a
 659 03ec 98 02                   		mov	[sp+2], a
 660 03ee FC 00 00 00             		call	!!%code(_writeByteLcd)
 182:../src/lcd.c  **** 	delayNoInt(1640);				// Start timer with 1640 usec delay
 661                             		.loc 1 182 0
 662 03f2 30 68 06                		movw	ax, #1640
 663 03f5 B8 00                   		movw	[sp], ax
 664 03f7 FC 00 00 00             		call	!!%code(_delayNoInt)
 183:../src/lcd.c  **** 
 184:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, CURSOR_MODE_INC);    // Entry Mode set
 665                             		.loc 1 184 0
 666 03fb F1                      		clrb	a
 667 03fc 98 00                   		mov	[sp], a
 668 03fe 51 06                   		mov	a, #6
 669 0400 98 02                   		mov	[sp+2], a
 670 0402 FC 00 00 00             		call	!!%code(_writeByteLcd)
 185:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 671                             		.loc 1 185 0
 672 0406 30 28 00                		movw	ax, #40
 673 0409 B8 00                   		movw	[sp], ax
 674 040b FC 00 00 00             		call	!!%code(_delayNoInt)
 186:../src/lcd.c  **** 
 187:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 675                             		.loc 1 187 0
 676 040f F1                      		clrb	a
 677 0410 98 00                   		mov	[sp], a
 678 0412 51 80                   		mov	a, #-128
 679 0414 98 02                   		mov	[sp+2], a
 680 0416 FC 00 00 00             		call	!!%code(_writeByteLcd)
 188:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 681                             		.loc 1 188 0
 682 041a 30 28 00                		movw	ax, #40
 683 041d B8 00                   		movw	[sp], ax
 684 041f FC 00 00 00             		call	!!%code(_delayNoInt)
 189:../src/lcd.c  **** }
 685                             		.loc 1 189 0
 686 0423 10 04                   		addw	sp, #4
 687 0425 D7                      		ret
 688                             	.LFE6:
 690                             		.global	_print_lcd
 692                             	_print_lcd:
 693                             	.LFB7:
 190:../src/lcd.c  **** 
 191:../src/lcd.c  **** /**
 192:../src/lcd.c  ****  * Prints a message to the LCD
 193:../src/lcd.c  ****  * @param message text to be displayed
 194:../src/lcd.c  ****  */
 195:../src/lcd.c  **** void print_lcd(uint8_t *message)
 196:../src/lcd.c  **** {
 694                             		.loc 1 196 0
 695                             		; start of function
 696                             		; locals: 4 bytes
 697                             		; outgoing: 4 bytes
 698 0426 20 08                   		subw	sp, #8
 699                             	.LCFI5:
 197:../src/lcd.c  **** 	uint8_t len = strlen(message);
 700                             		.loc 1 197 0
 701 0428 A8 0C                   		movw	ax, [sp+12]
 702 042a BD F0                   		movw	r8, ax
 703 042c B8 00                   		movw	[sp], ax
 704 042e FC 00 00 00             		call	!!%code(_strlen)
 705 0432 8D F0                   		mov	a, r8
 706 0434 98 05                   		mov	[sp+5], a
 198:../src/lcd.c  **** 	lcd_clear();
 707                             		.loc 1 198 0
 708 0436 FC 00 00 00             		call	!!%code(_lcd_clear)
 199:../src/lcd.c  **** 	delay(10000);
 709                             		.loc 1 199 0
 710 043a 30 10 27                		movw	ax, #10000
 711 043d B8 00                   		movw	[sp], ax
 712 043f FC 00 00 00             		call	!!%code(_delay)
 200:../src/lcd.c  **** 
 201:../src/lcd.c  **** 	int i;
 202:../src/lcd.c  **** 	for (i = 0; i < len; i++)
 713                             		.loc 1 202 0
 714 0443 F6                      		clrw	ax
 715 0444 B8 06                   		movw	[sp+6], ax
 716 0446 EC AD 04 00             		br	!!.L13
 717                             	.L16:
 203:../src/lcd.c  **** 	{
 204:../src/lcd.c  **** 		if (message[i] <= 0x7F) writeByteLcd(1U, message[i]);
 718                             		.loc 1 204 0
 719 044a A8 06                   		movw	ax, [sp+6]
 720 044c BD F0                   		movw	r8, ax
 721 044e A8 0C                   		movw	ax, [sp+12]
 722 0450 06 F0                   		addw	ax, r8
 723 0452 BD F0                   		movw	r8, ax
 724 0454 BD F2                   		movw	r10, ax
 725 0456 FA F2                   		movw	hl, r10
 726 0458 8B                      		mov	a, [hl]
 727 0459 9D F0                   		mov	r8, a
 728 045b D1                      		cmp0	a
 729 045c 71 FF                   		 xor1	CY, a.7
 730 045e 61 D8                   		 sknc
 731 0460 EC 80 04 00             		 br	!!.L14
 732                             		.loc 1 204 0 is_stmt 0 discriminator 1
 733 0464 A8 06                   		movw	ax, [sp+6]
 734 0466 BD F0                   		movw	r8, ax
 735 0468 A8 0C                   		movw	ax, [sp+12]
 736 046a 06 F0                   		addw	ax, r8
 737 046c BD F0                   		movw	r8, ax
 738 046e BD F2                   		movw	r10, ax
 739 0470 FA F2                   		movw	hl, r10
 740 0472 8B                      		mov	a, [hl]
 741 0473 9D F0                   		mov	r8, a
 742 0475 E1                      		oneb	a
 743 0476 98 00                   		mov	[sp], a
 744 0478 8D F0                   		mov	a, r8
 745 047a 98 02                   		mov	[sp+2], a
 746 047c FC 00 00 00             		call	!!%code(_writeByteLcd)
 747                             	.L14:
 205:../src/lcd.c  **** 		delay(100);
 748                             		.loc 1 205 0 is_stmt 1
 749 0480 30 64 00                		movw	ax, #100
 750 0483 B8 00                   		movw	[sp], ax
 751 0485 FC 00 00 00             		call	!!%code(_delay)
 206:../src/lcd.c  **** 		if (i == 7)
 752                             		.loc 1 206 0
 753 0489 A8 06                   		movw	ax, [sp+6]
 754 048b 44 07 00                		cmpw	ax, #7
 755 048e 61 E8                   		 skz
 756 0490 EC A8 04 00             		 br	!!.L15
 207:../src/lcd.c  **** 		{
 208:../src/lcd.c  **** 			writeByteLcd(0U, 0xC0);
 757                             		.loc 1 208 0
 758 0494 F1                      		clrb	a
 759 0495 98 00                   		mov	[sp], a
 760 0497 51 C0                   		mov	a, #-64
 761 0499 98 02                   		mov	[sp+2], a
 762 049b FC 00 00 00             		call	!!%code(_writeByteLcd)
 209:../src/lcd.c  **** 			delay(100);
 763                             		.loc 1 209 0
 764 049f 30 64 00                		movw	ax, #100
 765 04a2 B8 00                   		movw	[sp], ax
 766 04a4 FC 00 00 00             		call	!!%code(_delay)
 767                             	.L15:
 202:../src/lcd.c  **** 	{
 768                             		.loc 1 202 0 discriminator 2
 769 04a8 A8 06                   		movw	ax, [sp+6]
 770 04aa A1                      		incw	ax
 771 04ab B8 06                   		movw	[sp+6], ax
 772                             	.L13:
 202:../src/lcd.c  **** 	{
 773                             		.loc 1 202 0 is_stmt 0 discriminator 1
 774 04ad 88 05                   		mov	a, [sp+5]
 775 04af 70                      		mov	x, a 
 776 04b0 51 00                   		mov	a, #0
 777 04b2 BD F2                   		movw	r10, ax
 778 04b4 A8 06                   		movw	ax, [sp+6]
 779 04b6 BD F0                   		movw	r8, ax
 780 04b8 AD F2                   		movw	ax, r10
 781 04ba 46 F0                   		cmpw	ax, r8
 782 04bc 71 FF                   		 xor1	CY, a.7
 783 04be 71 77 F1                		 xor1	CY, r9.7
 784 04c1 61 F3                   		 sknh
 785 04c3 EC 4A 04 00             		 br	!!.L16
 210:../src/lcd.c  **** 		}
 211:../src/lcd.c  **** 	}
 212:../src/lcd.c  **** }
 786                             		.loc 1 212 0 is_stmt 1
 787 04c7 10 08                   		addw	sp, #8
 788 04c9 D7                      		ret
 789                             	.LFE7:
 791                             		.global	_delay
 793                             	_delay:
 794                             	.LFB8:
 213:../src/lcd.c  **** 
 214:../src/lcd.c  **** /**
 215:../src/lcd.c  ****  * Approximate for-loop delay.
 216:../src/lcd.c  ****  * Delays x processor ticks.
 217:../src/lcd.c  ****  * @param delay for-loop ticks to delay
 218:../src/lcd.c  ****  */
 219:../src/lcd.c  **** void delay(uint16_t delay){
 795                             		.loc 1 219 0
 220:../src/lcd.c  **** 	for ( ; delay > 0 ; delay--);
 796                             		.loc 1 220 0
 797 04ca EC D5 04 00             		br	!!.L18
 798                             	.L19:
 799                             		.loc 1 220 0 is_stmt 0 discriminator 2
 800 04ce A8 04                   		movw	ax, [sp+4]
 801 04d0 BD F0                   		movw	r8, ax
 802 04d2 B1                      		decw	ax
 803 04d3 B8 04                   		movw	[sp+4], ax
 804                             	.L18:
 805                             		.loc 1 220 0 discriminator 1
 806 04d5 A8 04                   		movw	ax, [sp+4]
 807 04d7 44 00 00                		cmpw	ax, #0
 808 04da 61 E8                   		 skz
 809 04dc EC CE 04 00             		 br	!!.L19
 221:../src/lcd.c  **** }
 810                             		.loc 1 221 0 is_stmt 1
 811 04e0 D7                      		ret
 812                             	.LFE8:
 814                             		.global	_word_to_ascii
 816                             	_word_to_ascii:
 817                             	.LFB9:
 222:../src/lcd.c  **** 
 223:../src/lcd.c  **** /**
 224:../src/lcd.c  ****  * Converts Infra-red Manchester Encoding to normal Binary format for LCD display
 225:../src/lcd.c  ****  * @param word IR Manchester encoded data
 226:../src/lcd.c  ****  * @param lcd_word Text to be displayed to LCD
 227:../src/lcd.c  ****  */
 228:../src/lcd.c  **** void word_to_ascii(uint16_t word, uint8_t *lcd_word){
 818                             		.loc 1 228 0
 819                             		; start of function
 820                             		; locals: 4 bytes
 821 04e1 20 04                   		subw	sp, #4
 822                             	.LCFI6:
 229:../src/lcd.c  **** 	volatile uint8_t k;
 230:../src/lcd.c  **** 	for (k = 0; k < 16; k++)
 823                             		.loc 1 230 0
 824 04e3 F1                      		clrb	a
 825 04e4 98 01                   		mov	[sp+1], a
 826 04e6 EC 38 05 00             		br	!!.L21
 827                             	.L22:
 828                             	.LBB2:
 231:../src/lcd.c  **** 	{
 232:../src/lcd.c  **** 		uint8_t shift = word >> (15 - k);
 829                             		.loc 1 232 0 discriminator 3
 830 04ea 88 01                   		mov	a, [sp+1]
 831 04ec 9D F0                   		mov	r8, a
 832 04ee CD F1 00                		mov	r9, #0
 833 04f1 30 0F 00                		movw	ax, #15
 834 04f4 26 F0                   		subw	ax, r8
 835 04f6 BD F0                   		movw	r8, ax
 836 04f8 8D F0                   		mov	a, r8
 837 04fa 76                      		mov	l, a
 838 04fb A8 08                   		movw	ax, [sp+8]
 839 04fd 86                      		inc l
 840 04fe 96                      		dec l
 841 04ff DD 05                   		bz $2f
 842 0501 31 1E                   		1: shrw	ax, 1
 843 0503 96                      		dec l
 844 0504 DF FB                   		bnz $1b
 845                             		2:
 846 0506 BD F0                   		movw	r8, ax
 847 0508 8D F0                   		mov	a, r8
 848 050a 98 03                   		mov	[sp+3], a
 233:../src/lcd.c  **** 		uint8_t number = shift & 0x1;
 849                             		.loc 1 233 0 discriminator 3
 850 050c 5C 01                   		and	a, #1
 851 050e 98 02                   		mov	[sp+2], a
 234:../src/lcd.c  **** 		lcd_word[k] = number + '0';
 852                             		.loc 1 234 0 discriminator 3
 853 0510 88 01                   		mov	a, [sp+1]
 854 0512 9D F0                   		mov	r8, a
 855 0514 CD F1 00                		mov	r9, #0
 856 0517 A8 0A                   		movw	ax, [sp+10]
 857 0519 06 F0                   		addw	ax, r8
 858 051b BD F0                   		movw	r8, ax
 859 051d 88 02                   		mov	a, [sp+2]
 860 051f 0C 30                   		add	a, #48
 861 0521 9D F2                   		mov	r10, a
 862 0523 AD F0                   		movw	ax, r8
 863 0525 BD F4                   		movw	r12, ax
 864 0527 DA F4                   		movw	bc, r12
 865 0529 8D F2                   		mov	a, r10
 866 052b 48 00 00                		mov	[bc], a
 867                             	.LBE2:
 230:../src/lcd.c  **** 	{
 868                             		.loc 1 230 0 discriminator 3
 869 052e 88 01                   		mov	a, [sp+1]
 870 0530 9D F0                   		mov	r8, a
 871 0532 A4 F0                   		inc	r8
 872 0534 8D F0                   		mov	a, r8
 873 0536 98 01                   		mov	[sp+1], a
 874                             	.L21:
 230:../src/lcd.c  **** 	{
 875                             		.loc 1 230 0 is_stmt 0 discriminator 1
 876 0538 88 01                   		mov	a, [sp+1]
 877 053a 9D F0                   		mov	r8, a
 878 053c 4A F0 0F                		cmp	r8, #15
 879 053f 61 E3                   		 skh
 880 0541 EC EA 04 00             		 br	!!.L22
 235:../src/lcd.c  **** 	}
 236:../src/lcd.c  **** }
 881                             		.loc 1 236 0 is_stmt 1
 882 0545 10 04                   		addw	sp, #4
 883 0547 D7                      		ret
 884                             	.LFE9:
 886                             		.global	_welcome
 888                             	_welcome:
 889                             	.LFB10:
 237:../src/lcd.c  **** 
 238:../src/lcd.c  **** /**
 239:../src/lcd.c  ****  * Welcome the user on LCD
 240:../src/lcd.c  ****  */
 241:../src/lcd.c  **** void welcome(void)
 242:../src/lcd.c  **** {
 890                             		.loc 1 242 0
 891                             		; start of function
 892                             		; locals: 40 bytes
 893                             		; outgoing: 4 bytes
 894 0548 20 2C                   		subw	sp, #44
 895                             	.LCFI7:
 243:../src/lcd.c  **** 	int scrollCount = 0;
 896                             		.loc 1 243 0
 897 054a F6                      		clrw	ax
 898 054b B8 2A                   		movw	[sp+42], ax
 244:../src/lcd.c  **** 	int j = 0;
 899                             		.loc 1 244 0
 900 054d F6                      		clrw	ax
 901 054e B8 28                   		movw	[sp+40], ax
 245:../src/lcd.c  **** 	int i = 0;
 902                             		.loc 1 245 0
 903 0550 F6                      		clrw	ax
 904 0551 B8 26                   		movw	[sp+38], ax
 246:../src/lcd.c  **** 
 247:../src/lcd.c  **** 	char msg[] = {USERNAME};
 905                             		.loc 1 247 0
 906 0553 30 20 20                		movw	ax, #8224
 907 0556 B8 04                   		movw	[sp+4], ax
 908 0558 30 20 20                		movw	ax, #8224
 909 055b B8 06                   		movw	[sp+6], ax
 910 055d 30 20 20                		movw	ax, #8224
 911 0560 B8 08                   		movw	[sp+8], ax
 912 0562 30 20 20                		movw	ax, #8224
 913 0565 B8 0A                   		movw	[sp+10], ax
 914 0567 30 20 20                		movw	ax, #8224
 915 056a B8 0C                   		movw	[sp+12], ax
 916 056c 30 20 20                		movw	ax, #8224
 917 056f B8 0E                   		movw	[sp+14], ax
 918 0571 30 20 20                		movw	ax, #8224
 919 0574 B8 10                   		movw	[sp+16], ax
 920 0576 30 20 20                		movw	ax, #8224
 921 0579 B8 12                   		movw	[sp+18], ax
 922 057b 30 4E 65                		movw	ax, #25934
 923 057e B8 14                   		movw	[sp+20], ax
 924 0580 30 6C 20                		movw	ax, #8300
 925 0583 B8 16                   		movw	[sp+22], ax
 926 0585 30 54 2E                		movw	ax, #11860
 927 0588 B8 18                   		movw	[sp+24], ax
 928 058a 30 20 31                		movw	ax, #12576
 929 058d B8 1A                   		movw	[sp+26], ax
 930 058f 30 38 31                		movw	ax, #12600
 931 0592 B8 1C                   		movw	[sp+28], ax
 932 0594 30 37 39                		movw	ax, #14647
 933 0597 B8 1E                   		movw	[sp+30], ax
 934 0599 30 34 36                		movw	ax, #13876
 935 059c B8 20                   		movw	[sp+32], ax
 936 059e 30 30 00                		movw	ax, #48
 937 05a1 B8 22                   		movw	[sp+34], ax
 248:../src/lcd.c  **** 
 249:../src/lcd.c  **** 	int length = sizeof(msg)/sizeof(char);
 938                             		.loc 1 249 0
 939 05a3 30 20 00                		movw	ax, #32
 940 05a6 B8 24                   		movw	[sp+36], ax
 250:../src/lcd.c  **** 
 251:../src/lcd.c  **** 	//For LCD index i
 252:../src/lcd.c  **** 	for(i = 0 ; i < (length-16) ; i++)
 941                             		.loc 1 252 0
 942 05a8 F6                      		clrw	ax
 943 05a9 B8 26                   		movw	[sp+38], ax
 944 05ab EC 3E 06 00             		br	!!.L24
 945                             	.L28:
 946                             	.LBB3:
 253:../src/lcd.c  **** 	{
 254:../src/lcd.c  **** 		//For message character j
 255:../src/lcd.c  **** 		for (j = 0 ; j < 16 ; j++)
 947                             		.loc 1 255 0
 948 05af F6                      		clrw	ax
 949 05b0 B8 28                   		movw	[sp+40], ax
 950 05b2 EC 0A 06 00             		br	!!.L25
 951                             	.L27:
 256:../src/lcd.c  **** 		{
 257:../src/lcd.c  **** 			//Offset message for scroll effect
 258:../src/lcd.c  **** 			writeByteLcd(1U, msg[(j+scrollCount)]);
 952                             		.loc 1 258 0
 953 05b6 A8 2A                   		movw	ax, [sp+42]
 954 05b8 16                      		movw	hl, ax
 955 05b9 A8 28                   		movw	ax, [sp+40]
 956 05bb 07                      		addw	ax, hl
 957 05bc BD F0                   		movw	r8, ax
 958 05be AE F8                   		movw	ax, sp
 959 05c0 BD F4                   		movw	r12, ax
 960 05c2 04 04 00                		addw	ax, #4
 961 05c5 BD F2                   		movw	r10, ax
 962 05c7 06 F0                   		addw	ax, r8
 963 05c9 BD F0                   		movw	r8, ax
 964 05cb BD F2                   		movw	r10, ax
 965 05cd FA F2                   		movw	hl, r10
 966 05cf 8B                      		mov	a, [hl]
 967 05d0 9D F0                   		mov	r8, a
 968 05d2 E1                      		oneb	a
 969 05d3 98 00                   		mov	[sp], a
 970 05d5 8D F0                   		mov	a, r8
 971 05d7 98 02                   		mov	[sp+2], a
 972 05d9 FC 00 00 00             		call	!!%code(_writeByteLcd)
 259:../src/lcd.c  **** 			delayNoInt(100);
 973                             		.loc 1 259 0
 974 05dd 30 64 00                		movw	ax, #100
 975 05e0 B8 00                   		movw	[sp], ax
 976 05e2 FC 00 00 00             		call	!!%code(_delayNoInt)
 260:../src/lcd.c  **** 			//Jump to second line of LCD due to memory gap
 261:../src/lcd.c  **** 			if (j == 7)
 977                             		.loc 1 261 0
 978 05e6 A8 28                   		movw	ax, [sp+40]
 979 05e8 44 07 00                		cmpw	ax, #7
 980 05eb 61 E8                   		 skz
 981 05ed EC 05 06 00             		 br	!!.L26
 262:../src/lcd.c  **** 			{
 263:../src/lcd.c  **** 				writeByteLcd(0U, LCD_HOME_L2);
 982                             		.loc 1 263 0
 983 05f1 F1                      		clrb	a
 984 05f2 98 00                   		mov	[sp], a
 985 05f4 51 C0                   		mov	a, #-64
 986 05f6 98 02                   		mov	[sp+2], a
 987 05f8 FC 00 00 00             		call	!!%code(_writeByteLcd)
 264:../src/lcd.c  **** 				delayNoInt(100);
 988                             		.loc 1 264 0
 989 05fc 30 64 00                		movw	ax, #100
 990 05ff B8 00                   		movw	[sp], ax
 991 0601 FC 00 00 00             		call	!!%code(_delayNoInt)
 992                             	.L26:
 255:../src/lcd.c  **** 		{
 993                             		.loc 1 255 0 discriminator 2
 994 0605 A8 28                   		movw	ax, [sp+40]
 995 0607 A1                      		incw	ax
 996 0608 B8 28                   		movw	[sp+40], ax
 997                             	.L25:
 255:../src/lcd.c  **** 		{
 998                             		.loc 1 255 0 is_stmt 0 discriminator 1
 999 060a A8 28                   		movw	ax, [sp+40]
 1000 060c 44 0F 00                		cmpw	ax, #15
 1001 060f 71 FF                   		 xor1	CY, a.7
 1002 0611 61 E3                   		 skh
 1003 0613 EC B6 05 00             		 br	!!.L27
 265:../src/lcd.c  **** 			}
 266:../src/lcd.c  **** 		}
 267:../src/lcd.c  **** 		scrollCount++;
 1004                             		.loc 1 267 0 is_stmt 1 discriminator 2
 1005 0617 A8 2A                   		movw	ax, [sp+42]
 1006 0619 A1                      		incw	ax
 1007 061a B8 2A                   		movw	[sp+42], ax
 268:../src/lcd.c  **** 		writeByteLcd(0U, LCD_HOME_L1);
 1008                             		.loc 1 268 0 discriminator 2
 1009 061c F1                      		clrb	a
 1010 061d 98 00                   		mov	[sp], a
 1011 061f 51 80                   		mov	a, #-128
 1012 0621 98 02                   		mov	[sp+2], a
 1013 0623 FC 00 00 00             		call	!!%code(_writeByteLcd)
 269:../src/lcd.c  **** 		delayNoInt(100);
 1014                             		.loc 1 269 0 discriminator 2
 1015 0627 30 64 00                		movw	ax, #100
 1016 062a B8 00                   		movw	[sp], ax
 1017 062c FC 00 00 00             		call	!!%code(_delayNoInt)
 270:../src/lcd.c  **** 		msDelay(350);
 1018                             		.loc 1 270 0 discriminator 2
 1019 0630 30 5E 01                		movw	ax, #350
 1020 0633 B8 00                   		movw	[sp], ax
 1021 0635 FC 00 00 00             		call	!!%code(_msDelay)
 1022                             	.LBE3:
 252:../src/lcd.c  **** 	{
 1023                             		.loc 1 252 0 discriminator 2
 1024 0639 A8 26                   		movw	ax, [sp+38]
 1025 063b A1                      		incw	ax
 1026 063c B8 26                   		movw	[sp+38], ax
 1027                             	.L24:
 252:../src/lcd.c  **** 	{
 1028                             		.loc 1 252 0 is_stmt 0 discriminator 1
 1029 063e A8 24                   		movw	ax, [sp+36]
 1030 0640 04 F0 FF                		addw	ax, #-16
 1031 0643 BD F2                   		movw	r10, ax
 1032 0645 A8 26                   		movw	ax, [sp+38]
 1033 0647 BD F0                   		movw	r8, ax
 1034 0649 AD F2                   		movw	ax, r10
 1035 064b 46 F0                   		cmpw	ax, r8
 1036 064d 71 FF                   		 xor1	CY, a.7
 1037 064f 71 77 F1                		 xor1	CY, r9.7
 1038 0652 61 F3                   		 sknh
 1039 0654 EC AF 05 00             		 br	!!.L28
 271:../src/lcd.c  **** 	}
 272:../src/lcd.c  **** 	msDelay(500);
 1040                             		.loc 1 272 0 is_stmt 1
 1041 0658 30 F4 01                		movw	ax, #500
 1042 065b B8 00                   		movw	[sp], ax
 1043 065d FC 00 00 00             		call	!!%code(_msDelay)
 273:../src/lcd.c  **** }
 1044                             		.loc 1 273 0
 1045 0661 10 2C                   		addw	sp, #44
 1046 0663 D7                      		ret
 1047                             	.LFE10:
 1187                             	.Letext0:
 1188                             		.file 2 "../src/iodefine.h"
 1189                             		.file 3 "../src/r_cg_macrodriver.h"
