   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_gate_status,2,2
  28                             		.comm	_mode,2,2
  29                             		.comm	_uart1RxBuf,16,1
  30                             		.comm	_uart1RxCnt,2,2
  31                             		.comm	_uart1RxFlag,1,1
  32                             		.comm	_uart1RxErrFlag,1,1
  33                             		.comm	_uart1RxOvrFlag,1,1
  34                             		.comm	_uart1TxBuf,16,1
  35                             		.comm	_uart1TxCnt,2,2
  36                             		.comm	_uart1TxFlag,1,1
  37                             		.comm	_time_now,7,1
  38                             		.comm	_uart1Status,2,2
  39                             		.global	_startTMR0
  41                             	_startTMR0:
  42                             	.LFB0:
  43                             		.file 1 "../src/lcd.c"
   1:../src/lcd.c  **** /*
   2:../src/lcd.c  ****  * lcd.c
   3:../src/lcd.c  ****  *
   4:../src/lcd.c  ****  *  Created on: 05 Feb 2016
   5:../src/lcd.c  ****  *      Author: jtreurn
   6:../src/lcd.c  ****  */
   7:../src/lcd.c  **** 
   8:../src/lcd.c  **** #include "lcd.h" // or any other includes that makes sense
   9:../src/lcd.c  **** #include "r_cg_macrodriver.h"
  10:../src/lcd.c  **** #include "r_cg_cgc.h"
  11:../src/lcd.c  **** #include "r_cg_port.h"
  12:../src/lcd.c  **** #include "r_cg_serial.h"
  13:../src/lcd.c  **** #include "r_cg_timer.h"
  14:../src/lcd.c  **** #include "r_cg_userdefine.h"
  15:../src/lcd.c  **** 
  16:../src/lcd.c  **** // Notes:
  17:../src/lcd.c  **** // This is a basic low-level set of functions to drive the LCD. The functions include
  18:../src/lcd.c  **** // 	- void initLcd(void) --- set up the LCD; requires a function delayNoInt(time in usec) to operat
  19:../src/lcd.c  **** // 	- void writeNibbleLcd(uint8_t reg, uint8_t nibble) --- low level command
  20:../src/lcd.c  **** // 	- void writeByteLcd(uint8_t reg, uint8_t value) --- lowest user level command
  21:../src/lcd.c  **** //
  22:../src/lcd.c  **** // To be useful, you should write your own functions to:
  23:../src/lcd.c  **** //	- write an ASCII character to the LCD
  24:../src/lcd.c  **** //	- write a whole string to the LCD
  25:../src/lcd.c  **** //	- write a delay function delayNoInt(delay in usec)
  26:../src/lcd.c  **** 
  27:../src/lcd.c  **** void startTMR0(int delay)
  28:../src/lcd.c  **** {
  44                             		.loc 1 28 0
  29:../src/lcd.c  **** 	TMIF00 = 0U;					//clears the INTTMOO interrupt flag
  45                             		.loc 1 29 0
  46 0000 C9 F0 E2 FF             		movw	r8, #-30
  47 0004 AD F0                   		movw	ax, r8
  48 0006 BD F4                   		movw	r12, ax
  49 0008 FA F4                   		movw	hl, r12
  50 000a 8B                      		mov	a, [hl]
  51 000b 9D F2                   		mov	r10, a
  52 000d 5A F2 EF                		and	r10, #-17
  53 0010 AD F0                   		movw	ax, r8
  54 0012 DA F4                   		movw	bc, r12
  55 0014 8D F2                   		mov	a, r10
  56 0016 48 00 00                		mov	[bc], a
  30:../src/lcd.c  **** 	TDR00 = delay;
  57                             		.loc 1 30 0
  58 0019 C9 F2 18 FF             		movw	r10, #-232
  59 001d A8 04                   		movw	ax, [sp+4]
  60 001f BD F0                   		movw	r8, ax
  61 0021 AD F2                   		movw	ax, r10
  62 0023 BD F4                   		movw	r12, ax
  63 0025 DA F4                   		movw	bc, r12
  64 0027 AD F0                   		movw	ax, r8
  65 0029 78 00 00                		movw	[bc], ax
  31:../src/lcd.c  **** 	TS0 = 1U;
  66                             		.loc 1 31 0
  67 002c C9 F0 B2 01             		movw	r8, #434
  68 0030 AD F0                   		movw	ax, r8
  69 0032 BD F2                   		movw	r10, ax
  70 0034 DA F2                   		movw	bc, r10
  71 0036 E6                      		onew	ax
  72 0037 78 00 00                		movw	[bc], ax
  32:../src/lcd.c  **** }
  73                             		.loc 1 32 0
  74 003a D7                      		ret
  75                             	.LFE0:
  77                             		.global	_delayNoInt
  79                             	_delayNoInt:
  80                             	.LFB1:
  33:../src/lcd.c  **** void delayNoInt(uint16_t delay)
  34:../src/lcd.c  **** {
  81                             		.loc 1 34 0
  82                             		; start of function
  83                             		; outgoing: 2 bytes
  84 003b 20 02                   		subw	sp, #2
  85                             	.LCFI0:
  35:../src/lcd.c  **** 	startTMR0(delay);
  86                             		.loc 1 35 0
  87 003d A8 06                   		movw	ax, [sp+6]
  88 003f BD F0                   		movw	r8, ax
  89 0041 B8 00                   		movw	[sp], ax
  90 0043 FC 00 00 00             		call	!!%code(_startTMR0)
  36:../src/lcd.c  **** 	while(TMIF00 == 0)
  91                             		.loc 1 36 0
  92 0047 EC 4C 00 00             		br	!!.L3
  93                             	.L4:
  37:../src/lcd.c  **** 		NOP();
  94                             		.loc 1 37 0
  95                             	 ; 37 "../src/lcd.c" 1
  96 004b 00                      		nop
  97                             	 ; 0 "" 2
  98                             	.L3:
  36:../src/lcd.c  **** 	while(TMIF00 == 0)
  99                             		.loc 1 36 0
 100 004c C9 F0 E2 FF             		movw	r8, #-30
 101 0050 AD F0                   		movw	ax, r8
 102 0052 BD F2                   		movw	r10, ax
 103 0054 FA F2                   		movw	hl, r10
 104 0056 8B                      		mov	a, [hl]
 105 0057 9D F0                   		mov	r8, a
 106 0059 31 4A                   		shr	a, 4
 107 005b 9D F0                   		mov	r8, a
 108 005d 5A F0 01                		and	r8, #1
 109 0060 61 F8                   		sknz
 110 0062 EC 4B 00 00             		 br	!!.L4
 111                             		 # zero-comparison eliminated
  38:../src/lcd.c  **** 	R_TAU0_Channel0_Stop();			//masks the interrupt
 112                             		.loc 1 38 0
 113 0066 FC 00 00 00             		call	!!%code(_R_TAU0_Channel0_Stop)
  39:../src/lcd.c  **** }
 114                             		.loc 1 39 0
 115 006a 10 02                   		addw	sp, #2
 116 006c D7                      		ret
 117                             	.LFE1:
 119                             		.global	_writeByteLcd
 121                             	_writeByteLcd:
 122                             	.LFB2:
  40:../src/lcd.c  **** 
  41:../src/lcd.c  **** /************************************************************************
  42:../src/lcd.c  ****  * Function Name: writByteLcd()
  43:../src/lcd.c  ****  * Description  : This function writes 2 nibbles to the LCD.
  44:../src/lcd.c  ****  * Arguments    :  reg (BOOL) - 0 = register, 1 = data
  45:../src/lcd.c  ****  *              :  value (BYTE) - first the upper 4 bits and the 4 lower bits
  46:../src/lcd.c  ****  * Actions      : Nibble bus P70-P73 are set in output mode
  47:../src/lcd.c  ****  *              : LCD_RS = 1; LCD_RW -> 0; LCD_E is toggled
  48:../src/lcd.c  ****  * Return Value : None
  49:../src/lcd.c  ****  ************************************************************************/
  50:../src/lcd.c  **** 
  51:../src/lcd.c  **** void writeByteLcd(uint8_t reg, uint8_t value)
  52:../src/lcd.c  **** {
 123                             		.loc 1 52 0
 124                             		; start of function
 125                             		; locals: 2 bytes
 126                             		; outgoing: 4 bytes
 127 006d 20 06                   		subw	sp, #6
 128                             	.LCFI1:
  53:../src/lcd.c  **** 	uint8_t tempReg;
  54:../src/lcd.c  **** 
  55:../src/lcd.c  **** 	tempReg = value >> 4;			// Get high nibble
 129                             		.loc 1 55 0
 130 006f 88 0C                   		mov	a, [sp+12]
 131 0071 31 4A                   		shr	a, 4
 132 0073 98 05                   		mov	[sp+5], a
  56:../src/lcd.c  **** 	writeNibbleLcd(reg, tempReg);	// Write high nibble
 133                             		.loc 1 56 0
 134 0075 88 0A                   		mov	a, [sp+10]
 135 0077 9D F0                   		mov	r8, a
 136 0079 98 00                   		mov	[sp], a
 137 007b 88 05                   		mov	a, [sp+5]
 138 007d 9D F0                   		mov	r8, a
 139 007f 98 02                   		mov	[sp+2], a
 140 0081 FC 00 00 00             		call	!!%code(_writeNibbleLcd)
  57:../src/lcd.c  **** 
  58:../src/lcd.c  **** 	tempReg = value & 0x0F;			// Get lower nibble
 141                             		.loc 1 58 0
 142 0085 88 0C                   		mov	a, [sp+12]
 143 0087 5C 0F                   		and	a, #15
 144 0089 98 05                   		mov	[sp+5], a
  59:../src/lcd.c  **** 	writeNibbleLcd(reg, tempReg);	// Write lower nibble
 145                             		.loc 1 59 0
 146 008b 88 0A                   		mov	a, [sp+10]
 147 008d 9D F0                   		mov	r8, a
 148 008f 98 00                   		mov	[sp], a
 149 0091 88 05                   		mov	a, [sp+5]
 150 0093 9D F0                   		mov	r8, a
 151 0095 98 02                   		mov	[sp+2], a
 152 0097 FC 00 00 00             		call	!!%code(_writeNibbleLcd)
  60:../src/lcd.c  **** }
 153                             		.loc 1 60 0
 154 009b 10 06                   		addw	sp, #6
 155 009d D7                      		ret
 156                             	.LFE2:
 158                             		.global	_writeNibbleLcd
 160                             	_writeNibbleLcd:
 161                             	.LFB3:
  61:../src/lcd.c  **** 
  62:../src/lcd.c  **** /************************************************************************
  63:../src/lcd.c  ****  * Function Name: writeNibbleLcd()
  64:../src/lcd.c  ****  * Description  : This function writes a nibble to the LCD.
  65:../src/lcd.c  ****  * Arguments    : value (BYTE) - only the lower 4 bits are used
  66:../src/lcd.c  ****  * Actions      : Nibble bus P70-P73 set in output mode
  67:../src/lcd.c  ****  *              : LCD_RS = 1; LCD_RW -> 0; LCD_E is toggled
  68:../src/lcd.c  ****  * Return Value : None
  69:../src/lcd.c  ****  ************************************************************************/
  70:../src/lcd.c  **** 
  71:../src/lcd.c  **** void writeNibbleLcd(uint8_t reg, uint8_t nibble)
  72:../src/lcd.c  **** {
 162                             		.loc 1 72 0
 163                             		; start of function
 164                             		; locals: 2 bytes
 165 009e 20 02                   		subw	sp, #2
 166                             	.LCFI2:
  73:../src/lcd.c  **** 	uint8_t tempReg;
  74:../src/lcd.c  **** 
  75:../src/lcd.c  **** 	if (reg)
 167                             		.loc 1 75 0
 168 00a0 88 06                   		mov	a, [sp+6]
 169 00a2 D1                      		cmp0	a
 170 00a3 61 F8                   		 sknz
 171 00a5 EC C6 00 00             		 br	!!.L7
  76:../src/lcd.c  **** 		LCD_RS = 1U;							// Read/write RAM
 172                             		.loc 1 76 0
 173 00a9 C9 F0 07 FF             		movw	r8, #-249
 174 00ad AD F0                   		movw	ax, r8
 175 00af BD F4                   		movw	r12, ax
 176 00b1 FA F4                   		movw	hl, r12
 177 00b3 8B                      		mov	a, [hl]
 178 00b4 9D F2                   		mov	r10, a
 179 00b6 6A F2 40                		or	r10, #64
 180 00b9 AD F0                   		movw	ax, r8
 181 00bb DA F4                   		movw	bc, r12
 182 00bd 8D F2                   		mov	a, r10
 183 00bf 48 00 00                		mov	[bc], a
 184 00c2 EC DF 00 00             		br	!!.L8
 185                             	.L7:
  77:../src/lcd.c  **** 	else
  78:../src/lcd.c  **** 		LCD_RS = 0U;							// Command
 186                             		.loc 1 78 0
 187 00c6 C9 F0 07 FF             		movw	r8, #-249
 188 00ca AD F0                   		movw	ax, r8
 189 00cc BD F4                   		movw	r12, ax
 190 00ce FA F4                   		movw	hl, r12
 191 00d0 8B                      		mov	a, [hl]
 192 00d1 9D F2                   		mov	r10, a
 193 00d3 5A F2 BF                		and	r10, #-65
 194 00d6 AD F0                   		movw	ax, r8
 195 00d8 DA F4                   		movw	bc, r12
 196 00da 8D F2                   		mov	a, r10
 197 00dc 48 00 00                		mov	[bc], a
 198                             	.L8:
  79:../src/lcd.c  **** 
  80:../src/lcd.c  **** 	LCD_RW   = 0U;								// Set to Write mode
 199                             		.loc 1 80 0
 200 00df C9 F0 07 FF             		movw	r8, #-249
 201 00e3 AD F0                   		movw	ax, r8
 202 00e5 BD F4                   		movw	r12, ax
 203 00e7 FA F4                   		movw	hl, r12
 204 00e9 8B                      		mov	a, [hl]
 205 00ea 9D F2                   		mov	r10, a
 206 00ec 5A F2 DF                		and	r10, #-33
 207 00ef AD F0                   		movw	ax, r8
 208 00f1 DA F4                   		movw	bc, r12
 209 00f3 8D F2                   		mov	a, r10
 210 00f5 48 00 00                		mov	[bc], a
  81:../src/lcd.c  **** 	PM7     &= 0xF0;        					// Set Port 7 Data nibble to output mode
 211                             		.loc 1 81 0
 212 00f8 C9 F2 27 FF             		movw	r10, #-217
 213 00fc C9 F0 27 FF             		movw	r8, #-217
 214 0100 AD F0                   		movw	ax, r8
 215 0102 BD F4                   		movw	r12, ax
 216 0104 FA F4                   		movw	hl, r12
 217 0106 8B                      		mov	a, [hl]
 218 0107 9D F0                   		mov	r8, a
 219 0109 5A F0 F0                		and	r8, #-16
 220 010c AD F2                   		movw	ax, r10
 221 010e BD F4                   		movw	r12, ax
 222 0110 DA F4                   		movw	bc, r12
 223 0112 8D F0                   		mov	a, r8
 224 0114 48 00 00                		mov	[bc], a
  82:../src/lcd.c  **** 	tempReg  = (P7 & 0xF0) | (nibble & 0x0F);  	// Combine nibble and P7
 225                             		.loc 1 82 0
 226 0117 C9 F0 07 FF             		movw	r8, #-249
 227 011b AD F0                   		movw	ax, r8
 228 011d BD F2                   		movw	r10, ax
 229 011f FA F2                   		movw	hl, r10
 230 0121 8B                      		mov	a, [hl]
 231 0122 9D F0                   		mov	r8, a
 232 0124 5C F0                   		and	a, #-16
 233 0126 9D F1                   		mov	r9, a
 234 0128 88 08                   		mov	a, [sp+8]
 235 012a 9D F0                   		mov	r8, a
 236 012c 5A F0 0F                		and	r8, #15
 237 012f 8D F1                   		mov	a, r9
 238 0131 6B F0                   		or	a, r8
 239 0133 9D F0                   		mov	r8, a
 240 0135 98 01                   		mov	[sp+1], a
  83:../src/lcd.c  **** 	P7       = tempReg;     					// Load Port 7 data nibble
 241                             		.loc 1 83 0
 242 0137 C9 F0 07 FF             		movw	r8, #-249
 243 013b 88 01                   		mov	a, [sp+1]
 244 013d 9D F2                   		mov	r10, a
 245 013f AD F0                   		movw	ax, r8
 246 0141 BD F4                   		movw	r12, ax
 247 0143 DA F4                   		movw	bc, r12
 248 0145 8D F2                   		mov	a, r10
 249 0147 48 00 00                		mov	[bc], a
  84:../src/lcd.c  **** 	SET_LCD_EN_HIGH;							// LCD_E  = 1U; (Enable high)
 250                             		.loc 1 84 0
 251 014a C9 F0 07 FF             		movw	r8, #-249
 252 014e AD F0                   		movw	ax, r8
 253 0150 BD F4                   		movw	r12, ax
 254 0152 FA F4                   		movw	hl, r12
 255 0154 8B                      		mov	a, [hl]
 256 0155 9D F2                   		mov	r10, a
 257 0157 6A F2 10                		or	r10, #16
 258 015a AD F0                   		movw	ax, r8
 259 015c DA F4                   		movw	bc, r12
 260 015e 8D F2                   		mov	a, r10
 261 0160 48 00 00                		mov	[bc], a
  85:../src/lcd.c  **** 	// Wait > 0.3 usec
  86:../src/lcd.c  **** 	NOP(); NOP(); NOP(); NOP(); NOP(); NOP();
 262                             		.loc 1 86 0
 263                             	 ; 86 "../src/lcd.c" 1
 264 0163 00                      		nop
 265                             	 ; 0 "" 2
 266                             	 ; 86 "../src/lcd.c" 1
 267 0164 00                      		nop
 268                             	 ; 0 "" 2
 269                             	 ; 86 "../src/lcd.c" 1
 270 0165 00                      		nop
 271                             	 ; 0 "" 2
 272                             	 ; 86 "../src/lcd.c" 1
 273 0166 00                      		nop
 274                             	 ; 0 "" 2
 275                             	 ; 86 "../src/lcd.c" 1
 276 0167 00                      		nop
 277                             	 ; 0 "" 2
 278                             	 ; 86 "../src/lcd.c" 1
 279 0168 00                      		nop
 280                             	 ; 0 "" 2
  87:../src/lcd.c  **** 
  88:../src/lcd.c  **** 	SET_LCD_EN_LOW;								// LCD_E  = 0U; (Set Enable low)
 281                             		.loc 1 88 0
 282 0169 C9 F0 07 FF             		movw	r8, #-249
 283 016d AD F0                   		movw	ax, r8
 284 016f BD F4                   		movw	r12, ax
 285 0171 FA F4                   		movw	hl, r12
 286 0173 8B                      		mov	a, [hl]
 287 0174 9D F2                   		mov	r10, a
 288 0176 5A F2 EF                		and	r10, #-17
 289 0179 AD F0                   		movw	ax, r8
 290 017b DA F4                   		movw	bc, r12
 291 017d 8D F2                   		mov	a, r10
 292 017f 48 00 00                		mov	[bc], a
  89:../src/lcd.c  **** 	NOP(); NOP();   							// Wait (2 x T_CLK)
 293                             		.loc 1 89 0
 294                             	 ; 89 "../src/lcd.c" 1
 295 0182 00                      		nop
 296                             	 ; 0 "" 2
 297                             	 ; 89 "../src/lcd.c" 1
 298 0183 00                      		nop
 299                             	 ; 0 "" 2
  90:../src/lcd.c  **** 	//    PM7 |= 0x0F;    							// Set Port 7 Data to input mode
  91:../src/lcd.c  **** 	LCD_RW = 1U;    							// Set to Read mode
 300                             		.loc 1 91 0
 301 0184 C9 F0 07 FF             		movw	r8, #-249
 302 0188 AD F0                   		movw	ax, r8
 303 018a BD F4                   		movw	r12, ax
 304 018c FA F4                   		movw	hl, r12
 305 018e 8B                      		mov	a, [hl]
 306 018f 9D F2                   		mov	r10, a
 307 0191 6A F2 20                		or	r10, #32
 308 0194 AD F0                   		movw	ax, r8
 309 0196 DA F4                   		movw	bc, r12
 310 0198 8D F2                   		mov	a, r10
 311 019a 48 00 00                		mov	[bc], a
  92:../src/lcd.c  **** }
 312                             		.loc 1 92 0
 313 019d 10 02                   		addw	sp, #2
 314 019f D7                      		ret
 315                             	.LFE3:
 317                             		.global	_initLcd
 319                             	_initLcd:
 320                             	.LFB4:
  93:../src/lcd.c  **** 
  94:../src/lcd.c  **** 
  95:../src/lcd.c  **** /************************************************************************
  96:../src/lcd.c  ****  * Function Name: initLcd()
  97:../src/lcd.c  ****  * Description  : This function initializes the LCD.
  98:../src/lcd.c  ****  * Arguments    :  none
  99:../src/lcd.c  ****  * Actions      : Provide all the init instructions - clear screen
 100:../src/lcd.c  ****  * Return Value : None
 101:../src/lcd.c  ****  ************************************************************************/
 102:../src/lcd.c  **** 
 103:../src/lcd.c  **** void initLcd(void)
 104:../src/lcd.c  **** {
 321                             		.loc 1 104 0
 322                             		; start of function
 323                             		; outgoing: 4 bytes
 324 01a0 20 04                   		subw	sp, #4
 325                             	.LCFI3:
 105:../src/lcd.c  **** 	TMMK00 = 1U;					// Do not use interrupts here, just wait for the flags
 326                             		.loc 1 105 0
 327 01a2 C9 F0 E6 FF             		movw	r8, #-26
 328 01a6 AD F0                   		movw	ax, r8
 329 01a8 BD F4                   		movw	r12, ax
 330 01aa FA F4                   		movw	hl, r12
 331 01ac 8B                      		mov	a, [hl]
 332 01ad 9D F2                   		mov	r10, a
 333 01af 6A F2 10                		or	r10, #16
 334 01b2 AD F0                   		movw	ax, r8
 335 01b4 DA F4                   		movw	bc, r12
 336 01b6 8D F2                   		mov	a, r10
 337 01b8 48 00 00                		mov	[bc], a
 106:../src/lcd.c  **** 
 107:../src/lcd.c  **** 	delayNoInt(15000);				// wait 15 msec for LCD power up
 338                             		.loc 1 107 0
 339 01bb 30 98 3A                		movw	ax, #15000
 340 01be B8 00                   		movw	[sp], ax
 341 01c0 FC 00 00 00             		call	!!%code(_delayNoInt)
 108:../src/lcd.c  **** 
 109:../src/lcd.c  **** 	writeNibbleLcd(LCD_CTRL_WR, 0x3); 	// Command 1 -> 8 bits
 342                             		.loc 1 109 0
 343 01c4 F1                      		clrb	a
 344 01c5 98 00                   		mov	[sp], a
 345 01c7 51 03                   		mov	a, #3
 346 01c9 98 02                   		mov	[sp+2], a
 347 01cb FC 00 00 00             		call	!!%code(_writeNibbleLcd)
 110:../src/lcd.c  **** 	delayNoInt(4100);				// Start timer with 4100 usec delay
 348                             		.loc 1 110 0
 349 01cf 30 04 10                		movw	ax, #4100
 350 01d2 B8 00                   		movw	[sp], ax
 351 01d4 FC 00 00 00             		call	!!%code(_delayNoInt)
 111:../src/lcd.c  **** 
 112:../src/lcd.c  **** 	writeNibbleLcd(LCD_CTRL_WR, 0x3);	// Command 2 -> 8 bits
 352                             		.loc 1 112 0
 353 01d8 F1                      		clrb	a
 354 01d9 98 00                   		mov	[sp], a
 355 01db 51 03                   		mov	a, #3
 356 01dd 98 02                   		mov	[sp+2], a
 357 01df FC 00 00 00             		call	!!%code(_writeNibbleLcd)
 113:../src/lcd.c  **** 	delayNoInt(100);				// Start timer with 100 usec delay
 358                             		.loc 1 113 0
 359 01e3 30 64 00                		movw	ax, #100
 360 01e6 B8 00                   		movw	[sp], ax
 361 01e8 FC 00 00 00             		call	!!%code(_delayNoInt)
 114:../src/lcd.c  **** 
 115:../src/lcd.c  **** 	writeNibbleLcd(LCD_CTRL_WR, 0x3);	// Command 3 -> 8 bits
 362                             		.loc 1 115 0
 363 01ec F1                      		clrb	a
 364 01ed 98 00                   		mov	[sp], a
 365 01ef 51 03                   		mov	a, #3
 366 01f1 98 02                   		mov	[sp+2], a
 367 01f3 FC 00 00 00             		call	!!%code(_writeNibbleLcd)
 116:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 368                             		.loc 1 116 0
 369 01f7 30 28 00                		movw	ax, #40
 370 01fa B8 00                   		movw	[sp], ax
 371 01fc FC 00 00 00             		call	!!%code(_delayNoInt)
 117:../src/lcd.c  **** 
 118:../src/lcd.c  **** 	writeNibbleLcd(LCD_CTRL_WR, 0x2);	// Command 4 -> 4 bits
 372                             		.loc 1 118 0
 373 0200 F1                      		clrb	a
 374 0201 98 00                   		mov	[sp], a
 375 0203 51 02                   		mov	a, #2
 376 0205 98 02                   		mov	[sp+2], a
 377 0207 FC 00 00 00             		call	!!%code(_writeNibbleLcd)
 119:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 378                             		.loc 1 119 0
 379 020b 30 28 00                		movw	ax, #40
 380 020e B8 00                   		movw	[sp], ax
 381 0210 FC 00 00 00             		call	!!%code(_delayNoInt)
 120:../src/lcd.c  **** 
 121:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, FUNCTION_SET);  // Set 2 lines, 5x7 dots
 382                             		.loc 1 121 0
 383 0214 F1                      		clrb	a
 384 0215 98 00                   		mov	[sp], a
 385 0217 51 28                   		mov	a, #40
 386 0219 98 02                   		mov	[sp+2], a
 387 021b FC 00 00 00             		call	!!%code(_writeByteLcd)
 122:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 388                             		.loc 1 122 0
 389 021f 30 28 00                		movw	ax, #40
 390 0222 B8 00                   		movw	[sp], ax
 391 0224 FC 00 00 00             		call	!!%code(_delayNoInt)
 123:../src/lcd.c  **** 
 124:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, LCD_CURSOR_ON);     // Display Cursor ON
 392                             		.loc 1 124 0
 393 0228 F1                      		clrb	a
 394 0229 98 00                   		mov	[sp], a
 395 022b 51 0E                   		mov	a, #14
 396 022d 98 02                   		mov	[sp+2], a
 397 022f FC 00 00 00             		call	!!%code(_writeByteLcd)
 125:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 398                             		.loc 1 125 0
 399 0233 30 28 00                		movw	ax, #40
 400 0236 B8 00                   		movw	[sp], ax
 401 0238 FC 00 00 00             		call	!!%code(_delayNoInt)
 126:../src/lcd.c  **** 
 127:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);          // Clear Display
 402                             		.loc 1 127 0
 403 023c F1                      		clrb	a
 404 023d 98 00                   		mov	[sp], a
 405 023f E1                      		oneb	a
 406 0240 98 02                   		mov	[sp+2], a
 407 0242 FC 00 00 00             		call	!!%code(_writeByteLcd)
 128:../src/lcd.c  **** 	delayNoInt(1640);				// Start timer with 1640 usec delay
 408                             		.loc 1 128 0
 409 0246 30 68 06                		movw	ax, #1640
 410 0249 B8 00                   		movw	[sp], ax
 411 024b FC 00 00 00             		call	!!%code(_delayNoInt)
 129:../src/lcd.c  **** 
 130:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, CURSOR_MODE_INC);    // Entry Mode set
 412                             		.loc 1 130 0
 413 024f F1                      		clrb	a
 414 0250 98 00                   		mov	[sp], a
 415 0252 51 06                   		mov	a, #6
 416 0254 98 02                   		mov	[sp+2], a
 417 0256 FC 00 00 00             		call	!!%code(_writeByteLcd)
 131:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 418                             		.loc 1 131 0
 419 025a 30 28 00                		movw	ax, #40
 420 025d B8 00                   		movw	[sp], ax
 421 025f FC 00 00 00             		call	!!%code(_delayNoInt)
 132:../src/lcd.c  **** 
 133:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 422                             		.loc 1 133 0
 423 0263 F1                      		clrb	a
 424 0264 98 00                   		mov	[sp], a
 425 0266 51 80                   		mov	a, #-128
 426 0268 98 02                   		mov	[sp+2], a
 427 026a FC 00 00 00             		call	!!%code(_writeByteLcd)
 134:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 428                             		.loc 1 134 0
 429 026e 30 28 00                		movw	ax, #40
 430 0271 B8 00                   		movw	[sp], ax
 431 0273 FC 00 00 00             		call	!!%code(_delayNoInt)
 135:../src/lcd.c  **** 
 136:../src/lcd.c  **** 	writeByteLcd(0U, CURSOR_MODE_INC);
 432                             		.loc 1 136 0
 433 0277 F1                      		clrb	a
 434 0278 98 00                   		mov	[sp], a
 435 027a 51 06                   		mov	a, #6
 436 027c 98 02                   		mov	[sp+2], a
 437 027e FC 00 00 00             		call	!!%code(_writeByteLcd)
 137:../src/lcd.c  **** 	delayNoInt(40);
 438                             		.loc 1 137 0
 439 0282 30 28 00                		movw	ax, #40
 440 0285 B8 00                   		movw	[sp], ax
 441 0287 FC 00 00 00             		call	!!%code(_delayNoInt)
 138:../src/lcd.c  **** 
 139:../src/lcd.c  **** 
 140:../src/lcd.c  **** 
 141:../src/lcd.c  **** }
 442                             		.loc 1 141 0
 443 028b 10 04                   		addw	sp, #4
 444 028d D7                      		ret
 445                             	.LFE4:
 447                             		.global	_testLCDConnections
 449                             	_testLCDConnections:
 450                             	.LFB5:
 142:../src/lcd.c  **** 
 143:../src/lcd.c  **** void testLCDConnections(void)
 144:../src/lcd.c  **** {
 451                             		.loc 1 144 0
 145:../src/lcd.c  **** 	P7 &= 0x80; // All low
 452                             		.loc 1 145 0
 453 028e C9 F2 07 FF             		movw	r10, #-249
 454 0292 C9 F0 07 FF             		movw	r8, #-249
 455 0296 AD F0                   		movw	ax, r8
 456 0298 BD F4                   		movw	r12, ax
 457 029a FA F4                   		movw	hl, r12
 458 029c 8B                      		mov	a, [hl]
 459 029d 9D F0                   		mov	r8, a
 460 029f 5A F0 80                		and	r8, #-128
 461 02a2 AD F2                   		movw	ax, r10
 462 02a4 BD F4                   		movw	r12, ax
 463 02a6 DA F4                   		movw	bc, r12
 464 02a8 8D F0                   		mov	a, r8
 465 02aa 48 00 00                		mov	[bc], a
 146:../src/lcd.c  **** 	NOP(); // Put a breakpoint here
 466                             		.loc 1 146 0
 467                             	 ; 146 "../src/lcd.c" 1
 468 02ad 00                      		nop
 469                             	 ; 0 "" 2
 147:../src/lcd.c  **** 	// and step (F6) from here
 148:../src/lcd.c  **** 	LCD_RS = 1; // RS high
 470                             		.loc 1 148 0
 471 02ae C9 F0 07 FF             		movw	r8, #-249
 472 02b2 AD F0                   		movw	ax, r8
 473 02b4 BD F4                   		movw	r12, ax
 474 02b6 FA F4                   		movw	hl, r12
 475 02b8 8B                      		mov	a, [hl]
 476 02b9 9D F2                   		mov	r10, a
 477 02bb 6A F2 40                		or	r10, #64
 478 02be AD F0                   		movw	ax, r8
 479 02c0 DA F4                   		movw	bc, r12
 480 02c2 8D F2                   		mov	a, r10
 481 02c4 48 00 00                		mov	[bc], a
 149:../src/lcd.c  **** 	NOP();
 482                             		.loc 1 149 0
 483                             	 ; 149 "../src/lcd.c" 1
 484 02c7 00                      		nop
 485                             	 ; 0 "" 2
 150:../src/lcd.c  **** 	LCD_RS = 0; // RS low
 486                             		.loc 1 150 0
 487 02c8 C9 F0 07 FF             		movw	r8, #-249
 488 02cc AD F0                   		movw	ax, r8
 489 02ce BD F4                   		movw	r12, ax
 490 02d0 FA F4                   		movw	hl, r12
 491 02d2 8B                      		mov	a, [hl]
 492 02d3 9D F2                   		mov	r10, a
 493 02d5 5A F2 BF                		and	r10, #-65
 494 02d8 AD F0                   		movw	ax, r8
 495 02da DA F4                   		movw	bc, r12
 496 02dc 8D F2                   		mov	a, r10
 497 02de 48 00 00                		mov	[bc], a
 151:../src/lcd.c  **** 	NOP();
 498                             		.loc 1 151 0
 499                             	 ; 151 "../src/lcd.c" 1
 500 02e1 00                      		nop
 501                             	 ; 0 "" 2
 152:../src/lcd.c  **** 	LCD_RW = 1; // RNW high
 502                             		.loc 1 152 0
 503 02e2 C9 F0 07 FF             		movw	r8, #-249
 504 02e6 AD F0                   		movw	ax, r8
 505 02e8 BD F4                   		movw	r12, ax
 506 02ea FA F4                   		movw	hl, r12
 507 02ec 8B                      		mov	a, [hl]
 508 02ed 9D F2                   		mov	r10, a
 509 02ef 6A F2 20                		or	r10, #32
 510 02f2 AD F0                   		movw	ax, r8
 511 02f4 DA F4                   		movw	bc, r12
 512 02f6 8D F2                   		mov	a, r10
 513 02f8 48 00 00                		mov	[bc], a
 153:../src/lcd.c  **** 	NOP();
 514                             		.loc 1 153 0
 515                             	 ; 153 "../src/lcd.c" 1
 516 02fb 00                      		nop
 517                             	 ; 0 "" 2
 154:../src/lcd.c  **** 	LCD_RW = 0; // RNW low
 518                             		.loc 1 154 0
 519 02fc C9 F0 07 FF             		movw	r8, #-249
 520 0300 AD F0                   		movw	ax, r8
 521 0302 BD F4                   		movw	r12, ax
 522 0304 FA F4                   		movw	hl, r12
 523 0306 8B                      		mov	a, [hl]
 524 0307 9D F2                   		mov	r10, a
 525 0309 5A F2 DF                		and	r10, #-33
 526 030c AD F0                   		movw	ax, r8
 527 030e DA F4                   		movw	bc, r12
 528 0310 8D F2                   		mov	a, r10
 529 0312 48 00 00                		mov	[bc], a
 155:../src/lcd.c  **** 	NOP();
 530                             		.loc 1 155 0
 531                             	 ; 155 "../src/lcd.c" 1
 532 0315 00                      		nop
 533                             	 ; 0 "" 2
 156:../src/lcd.c  **** 	LCD_E = 1; // E high
 534                             		.loc 1 156 0
 535 0316 C9 F0 07 FF             		movw	r8, #-249
 536 031a AD F0                   		movw	ax, r8
 537 031c BD F4                   		movw	r12, ax
 538 031e FA F4                   		movw	hl, r12
 539 0320 8B                      		mov	a, [hl]
 540 0321 9D F2                   		mov	r10, a
 541 0323 6A F2 10                		or	r10, #16
 542 0326 AD F0                   		movw	ax, r8
 543 0328 DA F4                   		movw	bc, r12
 544 032a 8D F2                   		mov	a, r10
 545 032c 48 00 00                		mov	[bc], a
 157:../src/lcd.c  **** 	NOP();
 546                             		.loc 1 157 0
 547                             	 ; 157 "../src/lcd.c" 1
 548 032f 00                      		nop
 549                             	 ; 0 "" 2
 158:../src/lcd.c  **** 	LCD_E = 0; // E low
 550                             		.loc 1 158 0
 551 0330 C9 F0 07 FF             		movw	r8, #-249
 552 0334 AD F0                   		movw	ax, r8
 553 0336 BD F4                   		movw	r12, ax
 554 0338 FA F4                   		movw	hl, r12
 555 033a 8B                      		mov	a, [hl]
 556 033b 9D F2                   		mov	r10, a
 557 033d 5A F2 EF                		and	r10, #-17
 558 0340 AD F0                   		movw	ax, r8
 559 0342 DA F4                   		movw	bc, r12
 560 0344 8D F2                   		mov	a, r10
 561 0346 48 00 00                		mov	[bc], a
 159:../src/lcd.c  **** 	NOP();
 562                             		.loc 1 159 0
 563                             	 ; 159 "../src/lcd.c" 1
 564 0349 00                      		nop
 565                             	 ; 0 "" 2
 160:../src/lcd.c  **** 	LCD_D0 = 1; // DB0/DB4 high
 566                             		.loc 1 160 0
 567 034a C9 F0 07 FF             		movw	r8, #-249
 568 034e AD F0                   		movw	ax, r8
 569 0350 BD F4                   		movw	r12, ax
 570 0352 FA F4                   		movw	hl, r12
 571 0354 8B                      		mov	a, [hl]
 572 0355 9D F2                   		mov	r10, a
 573 0357 6A F2 01                		or	r10, #1
 574 035a AD F0                   		movw	ax, r8
 575 035c DA F4                   		movw	bc, r12
 576 035e 8D F2                   		mov	a, r10
 577 0360 48 00 00                		mov	[bc], a
 161:../src/lcd.c  **** 	NOP();
 578                             		.loc 1 161 0
 579                             	 ; 161 "../src/lcd.c" 1
 580 0363 00                      		nop
 581                             	 ; 0 "" 2
 162:../src/lcd.c  **** 	LCD_D1 = 1; // DB1/DB5 high
 582                             		.loc 1 162 0
 583 0364 C9 F0 07 FF             		movw	r8, #-249
 584 0368 AD F0                   		movw	ax, r8
 585 036a BD F4                   		movw	r12, ax
 586 036c FA F4                   		movw	hl, r12
 587 036e 8B                      		mov	a, [hl]
 588 036f 9D F2                   		mov	r10, a
 589 0371 6A F2 02                		or	r10, #2
 590 0374 AD F0                   		movw	ax, r8
 591 0376 DA F4                   		movw	bc, r12
 592 0378 8D F2                   		mov	a, r10
 593 037a 48 00 00                		mov	[bc], a
 163:../src/lcd.c  **** 	NOP();
 594                             		.loc 1 163 0
 595                             	 ; 163 "../src/lcd.c" 1
 596 037d 00                      		nop
 597                             	 ; 0 "" 2
 164:../src/lcd.c  **** 	LCD_D2 = 1; // DB2/DB6 high
 598                             		.loc 1 164 0
 599 037e C9 F0 07 FF             		movw	r8, #-249
 600 0382 AD F0                   		movw	ax, r8
 601 0384 BD F4                   		movw	r12, ax
 602 0386 FA F4                   		movw	hl, r12
 603 0388 8B                      		mov	a, [hl]
 604 0389 9D F2                   		mov	r10, a
 605 038b 6A F2 04                		or	r10, #4
 606 038e AD F0                   		movw	ax, r8
 607 0390 DA F4                   		movw	bc, r12
 608 0392 8D F2                   		mov	a, r10
 609 0394 48 00 00                		mov	[bc], a
 165:../src/lcd.c  **** 	NOP();
 610                             		.loc 1 165 0
 611                             	 ; 165 "../src/lcd.c" 1
 612 0397 00                      		nop
 613                             	 ; 0 "" 2
 166:../src/lcd.c  **** 	LCD_D3 = 1; // DB3/DB7 high
 614                             		.loc 1 166 0
 615 0398 C9 F0 07 FF             		movw	r8, #-249
 616 039c AD F0                   		movw	ax, r8
 617 039e BD F4                   		movw	r12, ax
 618 03a0 FA F4                   		movw	hl, r12
 619 03a2 8B                      		mov	a, [hl]
 620 03a3 9D F2                   		mov	r10, a
 621 03a5 6A F2 08                		or	r10, #8
 622 03a8 AD F0                   		movw	ax, r8
 623 03aa DA F4                   		movw	bc, r12
 624 03ac 8D F2                   		mov	a, r10
 625 03ae 48 00 00                		mov	[bc], a
 167:../src/lcd.c  **** 	NOP();
 626                             		.loc 1 167 0
 627                             	 ; 167 "../src/lcd.c" 1
 628 03b1 00                      		nop
 629                             	 ; 0 "" 2
 168:../src/lcd.c  **** 	P7 &= 0x80; // Make all low
 630                             		.loc 1 168 0
 631 03b2 C9 F2 07 FF             		movw	r10, #-249
 632 03b6 C9 F0 07 FF             		movw	r8, #-249
 633 03ba AD F0                   		movw	ax, r8
 634 03bc BD F4                   		movw	r12, ax
 635 03be FA F4                   		movw	hl, r12
 636 03c0 8B                      		mov	a, [hl]
 637 03c1 9D F0                   		mov	r8, a
 638 03c3 5A F0 80                		and	r8, #-128
 639 03c6 AD F2                   		movw	ax, r10
 640 03c8 BD F4                   		movw	r12, ax
 641 03ca DA F4                   		movw	bc, r12
 642 03cc 8D F0                   		mov	a, r8
 643 03ce 48 00 00                		mov	[bc], a
 169:../src/lcd.c  **** }
 644                             		.loc 1 169 0
 645 03d1 D7                      		ret
 646                             	.LFE5:
 648                             		.global	_lcd_clear
 650                             	_lcd_clear:
 651                             	.LFB6:
 170:../src/lcd.c  **** 
 171:../src/lcd.c  **** void lcd_clear()
 172:../src/lcd.c  **** {
 652                             		.loc 1 172 0
 653                             		; start of function
 654                             		; outgoing: 4 bytes
 655 03d2 20 04                   		subw	sp, #4
 656                             	.LCFI4:
 173:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, LCD_CURSOR_ON);     // Display Cursor ON
 657                             		.loc 1 173 0
 658 03d4 F1                      		clrb	a
 659 03d5 98 00                   		mov	[sp], a
 660 03d7 51 0E                   		mov	a, #14
 661 03d9 98 02                   		mov	[sp+2], a
 662 03db FC 00 00 00             		call	!!%code(_writeByteLcd)
 174:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 663                             		.loc 1 174 0
 664 03df 30 28 00                		movw	ax, #40
 665 03e2 B8 00                   		movw	[sp], ax
 666 03e4 FC 00 00 00             		call	!!%code(_delayNoInt)
 175:../src/lcd.c  **** 
 176:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);          // Clear Display
 667                             		.loc 1 176 0
 668 03e8 F1                      		clrb	a
 669 03e9 98 00                   		mov	[sp], a
 670 03eb E1                      		oneb	a
 671 03ec 98 02                   		mov	[sp+2], a
 672 03ee FC 00 00 00             		call	!!%code(_writeByteLcd)
 177:../src/lcd.c  **** 	delayNoInt(1640);				// Start timer with 1640 usec delay
 673                             		.loc 1 177 0
 674 03f2 30 68 06                		movw	ax, #1640
 675 03f5 B8 00                   		movw	[sp], ax
 676 03f7 FC 00 00 00             		call	!!%code(_delayNoInt)
 178:../src/lcd.c  **** 
 179:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, CURSOR_MODE_INC);    // Entry Mode set
 677                             		.loc 1 179 0
 678 03fb F1                      		clrb	a
 679 03fc 98 00                   		mov	[sp], a
 680 03fe 51 06                   		mov	a, #6
 681 0400 98 02                   		mov	[sp+2], a
 682 0402 FC 00 00 00             		call	!!%code(_writeByteLcd)
 180:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 683                             		.loc 1 180 0
 684 0406 30 28 00                		movw	ax, #40
 685 0409 B8 00                   		movw	[sp], ax
 686 040b FC 00 00 00             		call	!!%code(_delayNoInt)
 181:../src/lcd.c  **** 
 182:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 687                             		.loc 1 182 0
 688 040f F1                      		clrb	a
 689 0410 98 00                   		mov	[sp], a
 690 0412 51 80                   		mov	a, #-128
 691 0414 98 02                   		mov	[sp+2], a
 692 0416 FC 00 00 00             		call	!!%code(_writeByteLcd)
 183:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 693                             		.loc 1 183 0
 694 041a 30 28 00                		movw	ax, #40
 695 041d B8 00                   		movw	[sp], ax
 696 041f FC 00 00 00             		call	!!%code(_delayNoInt)
 184:../src/lcd.c  **** }
 697                             		.loc 1 184 0
 698 0423 10 04                   		addw	sp, #4
 699 0425 D7                      		ret
 700                             	.LFE6:
 702                             		.global	_print_lcd
 704                             	_print_lcd:
 705                             	.LFB7:
 185:../src/lcd.c  **** 
 186:../src/lcd.c  **** void print_lcd(uint8_t *message)
 187:../src/lcd.c  **** {
 706                             		.loc 1 187 0
 707                             		; start of function
 708                             		; locals: 4 bytes
 709                             		; outgoing: 4 bytes
 710 0426 20 08                   		subw	sp, #8
 711                             	.LCFI5:
 188:../src/lcd.c  **** 	uint8_t len = strlen(message);
 712                             		.loc 1 188 0
 713 0428 A8 0C                   		movw	ax, [sp+12]
 714 042a BD F0                   		movw	r8, ax
 715 042c B8 00                   		movw	[sp], ax
 716 042e FC 00 00 00             		call	!!%code(_strlen)
 717 0432 8D F0                   		mov	a, r8
 718 0434 98 05                   		mov	[sp+5], a
 189:../src/lcd.c  **** 	lcd_clear();
 719                             		.loc 1 189 0
 720 0436 FC 00 00 00             		call	!!%code(_lcd_clear)
 190:../src/lcd.c  **** 	delay(10000);
 721                             		.loc 1 190 0
 722 043a 30 10 27                		movw	ax, #10000
 723 043d B8 00                   		movw	[sp], ax
 724 043f FC 00 00 00             		call	!!%code(_delay)
 191:../src/lcd.c  **** 
 192:../src/lcd.c  **** 	int i;
 193:../src/lcd.c  **** 	//if (len > lcd_message_max) len = lcd_message_max;
 194:../src/lcd.c  **** 	for (i = 0; i < len; i++)
 725                             		.loc 1 194 0
 726 0443 F6                      		clrw	ax
 727 0444 B8 06                   		movw	[sp+6], ax
 728 0446 EC AD 04 00             		br	!!.L13
 729                             	.L16:
 195:../src/lcd.c  **** 	{
 196:../src/lcd.c  **** 		if (message[i] <= 0x7F){
 730                             		.loc 1 196 0
 731 044a A8 06                   		movw	ax, [sp+6]
 732 044c BD F0                   		movw	r8, ax
 733 044e A8 0C                   		movw	ax, [sp+12]
 734 0450 06 F0                   		addw	ax, r8
 735 0452 BD F0                   		movw	r8, ax
 736 0454 BD F2                   		movw	r10, ax
 737 0456 FA F2                   		movw	hl, r10
 738 0458 8B                      		mov	a, [hl]
 739 0459 9D F0                   		mov	r8, a
 740 045b D1                      		cmp0	a
 741 045c 71 FF                   		 xor1	CY, a.7
 742 045e 61 D8                   		 sknc
 743 0460 EC 80 04 00             		 br	!!.L14
 197:../src/lcd.c  **** 			writeByteLcd(1U, message[i]);
 744                             		.loc 1 197 0
 745 0464 A8 06                   		movw	ax, [sp+6]
 746 0466 BD F0                   		movw	r8, ax
 747 0468 A8 0C                   		movw	ax, [sp+12]
 748 046a 06 F0                   		addw	ax, r8
 749 046c BD F0                   		movw	r8, ax
 750 046e BD F2                   		movw	r10, ax
 751 0470 FA F2                   		movw	hl, r10
 752 0472 8B                      		mov	a, [hl]
 753 0473 9D F0                   		mov	r8, a
 754 0475 E1                      		oneb	a
 755 0476 98 00                   		mov	[sp], a
 756 0478 8D F0                   		mov	a, r8
 757 047a 98 02                   		mov	[sp+2], a
 758 047c FC 00 00 00             		call	!!%code(_writeByteLcd)
 759                             	.L14:
 198:../src/lcd.c  **** 		}
 199:../src/lcd.c  **** 		delay(100);
 760                             		.loc 1 199 0
 761 0480 30 64 00                		movw	ax, #100
 762 0483 B8 00                   		movw	[sp], ax
 763 0485 FC 00 00 00             		call	!!%code(_delay)
 200:../src/lcd.c  **** 		if (i == 7){
 764                             		.loc 1 200 0
 765 0489 A8 06                   		movw	ax, [sp+6]
 766 048b 44 07 00                		cmpw	ax, #7
 767 048e 61 E8                   		 skz
 768 0490 EC A8 04 00             		 br	!!.L15
 201:../src/lcd.c  **** //			int k;
 202:../src/lcd.c  **** //			for (k = 0; k < 32; k++)
 203:../src/lcd.c  **** //			{
 204:../src/lcd.c  **** //				writeByteLcd(0U, LCD_CURSOR_RIGHT);
 205:../src/lcd.c  **** //				delay(100);
 206:../src/lcd.c  **** //			}
 207:../src/lcd.c  **** 			writeByteLcd(0U, 0xC0);
 769                             		.loc 1 207 0
 770 0494 F1                      		clrb	a
 771 0495 98 00                   		mov	[sp], a
 772 0497 51 C0                   		mov	a, #-64
 773 0499 98 02                   		mov	[sp+2], a
 774 049b FC 00 00 00             		call	!!%code(_writeByteLcd)
 208:../src/lcd.c  **** 			delay(100);
 775                             		.loc 1 208 0
 776 049f 30 64 00                		movw	ax, #100
 777 04a2 B8 00                   		movw	[sp], ax
 778 04a4 FC 00 00 00             		call	!!%code(_delay)
 779                             	.L15:
 194:../src/lcd.c  **** 	{
 780                             		.loc 1 194 0 discriminator 2
 781 04a8 A8 06                   		movw	ax, [sp+6]
 782 04aa A1                      		incw	ax
 783 04ab B8 06                   		movw	[sp+6], ax
 784                             	.L13:
 194:../src/lcd.c  **** 	{
 785                             		.loc 1 194 0 is_stmt 0 discriminator 1
 786 04ad 88 05                   		mov	a, [sp+5]
 787 04af 70                      		mov	x, a 
 788 04b0 51 00                   		mov	a, #0
 789 04b2 BD F2                   		movw	r10, ax
 790 04b4 A8 06                   		movw	ax, [sp+6]
 791 04b6 BD F0                   		movw	r8, ax
 792 04b8 AD F2                   		movw	ax, r10
 793 04ba 46 F0                   		cmpw	ax, r8
 794 04bc 71 FF                   		 xor1	CY, a.7
 795 04be 71 77 F1                		 xor1	CY, r9.7
 796 04c1 61 F3                   		 sknh
 797 04c3 EC 4A 04 00             		 br	!!.L16
 209:../src/lcd.c  **** 		}
 210:../src/lcd.c  **** 	}
 211:../src/lcd.c  **** 
 212:../src/lcd.c  **** 	// scroll one right
 213:../src/lcd.c  **** 	//writeByteLcd(0U, 0x1C);
 214:../src/lcd.c  **** 	//	delay(100);
 215:../src/lcd.c  **** 	EI();
 798                             		.loc 1 215 0 is_stmt 1
 799                             	 ; 215 "../src/lcd.c" 1
 800 04c7 71 7A FA                		ei
 801                             	 ; 0 "" 2
 216:../src/lcd.c  **** }
 802                             		.loc 1 216 0
 803 04ca 10 08                   		addw	sp, #8
 804 04cc D7                      		ret
 805                             	.LFE7:
 807                             		.global	_delay
 809                             	_delay:
 810                             	.LFB8:
 217:../src/lcd.c  **** 
 218:../src/lcd.c  **** void delay(uint16_t delay){
 811                             		.loc 1 218 0
 219:../src/lcd.c  **** 	for ( ; delay > 0 ; delay--);
 812                             		.loc 1 219 0
 813 04cd EC D8 04 00             		br	!!.L18
 814                             	.L19:
 815                             		.loc 1 219 0 is_stmt 0 discriminator 2
 816 04d1 A8 04                   		movw	ax, [sp+4]
 817 04d3 BD F0                   		movw	r8, ax
 818 04d5 B1                      		decw	ax
 819 04d6 B8 04                   		movw	[sp+4], ax
 820                             	.L18:
 821                             		.loc 1 219 0 discriminator 1
 822 04d8 A8 04                   		movw	ax, [sp+4]
 823 04da 44 00 00                		cmpw	ax, #0
 824 04dd 61 E8                   		 skz
 825 04df EC D1 04 00             		 br	!!.L19
 220:../src/lcd.c  **** }
 826                             		.loc 1 220 0 is_stmt 1
 827 04e3 D7                      		ret
 828                             	.LFE8:
 830                             		.global	_word_to_ascii
 832                             	_word_to_ascii:
 833                             	.LFB9:
 221:../src/lcd.c  **** 
 222:../src/lcd.c  **** void word_to_ascii(uint16_t word, uint8_t *lcd_word){
 834                             		.loc 1 222 0
 835                             		; start of function
 836                             		; locals: 4 bytes
 837 04e4 20 04                   		subw	sp, #4
 838                             	.LCFI6:
 223:../src/lcd.c  **** 	volatile uint8_t k;
 224:../src/lcd.c  **** 	for (k = 0; k < 16; k++){
 839                             		.loc 1 224 0
 840 04e6 F1                      		clrb	a
 841 04e7 98 01                   		mov	[sp+1], a
 842 04e9 EC 3B 05 00             		br	!!.L21
 843                             	.L22:
 844                             	.LBB2:
 225:../src/lcd.c  **** 		uint8_t shift = word >> (15 - k);
 845                             		.loc 1 225 0 discriminator 3
 846 04ed 88 01                   		mov	a, [sp+1]
 847 04ef 9D F0                   		mov	r8, a
 848 04f1 CD F1 00                		mov	r9, #0
 849 04f4 30 0F 00                		movw	ax, #15
 850 04f7 26 F0                   		subw	ax, r8
 851 04f9 BD F0                   		movw	r8, ax
 852 04fb 8D F0                   		mov	a, r8
 853 04fd 76                      		mov	l, a
 854 04fe A8 08                   		movw	ax, [sp+8]
 855 0500 86                      		inc l
 856 0501 96                      		dec l
 857 0502 DD 05                   		bz $2f
 858 0504 31 1E                   		1: shrw	ax, 1
 859 0506 96                      		dec l
 860 0507 DF FB                   		bnz $1b
 861                             		2:
 862 0509 BD F0                   		movw	r8, ax
 863 050b 8D F0                   		mov	a, r8
 864 050d 98 03                   		mov	[sp+3], a
 226:../src/lcd.c  **** 		uint8_t number = shift & 0x1;
 865                             		.loc 1 226 0 discriminator 3
 866 050f 5C 01                   		and	a, #1
 867 0511 98 02                   		mov	[sp+2], a
 227:../src/lcd.c  **** 		lcd_word[k] = number + '0';
 868                             		.loc 1 227 0 discriminator 3
 869 0513 88 01                   		mov	a, [sp+1]
 870 0515 9D F0                   		mov	r8, a
 871 0517 CD F1 00                		mov	r9, #0
 872 051a A8 0A                   		movw	ax, [sp+10]
 873 051c 06 F0                   		addw	ax, r8
 874 051e BD F0                   		movw	r8, ax
 875 0520 88 02                   		mov	a, [sp+2]
 876 0522 0C 30                   		add	a, #48
 877 0524 9D F2                   		mov	r10, a
 878 0526 AD F0                   		movw	ax, r8
 879 0528 BD F4                   		movw	r12, ax
 880 052a DA F4                   		movw	bc, r12
 881 052c 8D F2                   		mov	a, r10
 882 052e 48 00 00                		mov	[bc], a
 883                             	.LBE2:
 224:../src/lcd.c  **** 		uint8_t shift = word >> (15 - k);
 884                             		.loc 1 224 0 discriminator 3
 885 0531 88 01                   		mov	a, [sp+1]
 886 0533 9D F0                   		mov	r8, a
 887 0535 A4 F0                   		inc	r8
 888 0537 8D F0                   		mov	a, r8
 889 0539 98 01                   		mov	[sp+1], a
 890                             	.L21:
 224:../src/lcd.c  **** 		uint8_t shift = word >> (15 - k);
 891                             		.loc 1 224 0 is_stmt 0 discriminator 1
 892 053b 88 01                   		mov	a, [sp+1]
 893 053d 9D F0                   		mov	r8, a
 894 053f 4A F0 0F                		cmp	r8, #15
 895 0542 61 E3                   		 skh
 896 0544 EC ED 04 00             		 br	!!.L22
 228:../src/lcd.c  **** 	}
 229:../src/lcd.c  **** }
 897                             		.loc 1 229 0 is_stmt 1
 898 0548 10 04                   		addw	sp, #4
 899 054a D7                      		ret
 900                             	.LFE9:
 1028                             	.Letext0:
 1029                             		.file 2 "../src/iodefine.h"
 1030                             		.file 3 "../src/r_cg_macrodriver.h"
 1031                             		.file 4 "../src/r_cg_rtc.h"
 1032                             		.file 5 "../src/r_cg_userdefine.h"
 1033                             		.file 6 "../src/global.c"
 1034                             		.file 7 "<built-in>"
