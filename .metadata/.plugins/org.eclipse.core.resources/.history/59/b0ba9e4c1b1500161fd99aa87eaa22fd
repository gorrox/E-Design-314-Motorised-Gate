/*
 * lcd.c
 *
 *  Created on: 05 Feb 2016
 *      Author: jtreurn
 */

#include "lcd.h" // or any other includes that makes sense
#include "r_cg_macrodriver.h"
#include "r_cg_cgc.h"
#include "r_cg_port.h"
#include "r_cg_serial.h"
#include "r_cg_timer.h"
#include "r_cg_userdefine.h"

// Notes:
// This is a basic low-level set of functions to drive the LCD. The functions include
// 	- void initLcd(void) --- set up the LCD; requires a function delayNoInt(time in usec) to operate
// 	- void writeNibbleLcd(uint8_t reg, uint8_t nibble) --- low level command
// 	- void writeByteLcd(uint8_t reg, uint8_t value) --- lowest user level command
//
// To be useful, you should write your own functions to:
//	- write an ASCII character to the LCD
//	- write a whole string to the LCD
//	- write a delay function delayNoInt(delay in usec)

/**
 * Starts the timer that forms the delay function
 * @param delay time to delay
 */
void startTMR0(int delay)
{
	TMIF00 = 0U;					//clears the INTTMOO interrupt flag
	TDR00 = delay;
	TS0 = 1U;
}
void delayNoInt(uint16_t delay)
{
	startTMR0(delay);
	while(TMIF00 == 0)
		NOP();
	R_TAU0_Channel0_Stop();			//masks the interrupt
}

/************************************************************************
 * Function Name: writByteLcd()
 * Description  : This function writes 2 nibbles to the LCD.
 * Arguments    :  reg (BOOL) - 0 = register, 1 = data
 *              :  value (BYTE) - first the upper 4 bits and the 4 lower bits
 * Actions      : Nibble bus P70-P73 are set in output mode
 *              : LCD_RS = 1; LCD_RW -> 0; LCD_E is toggled
 * Return Value : None
 ************************************************************************/

void writeByteLcd(uint8_t reg, uint8_t value)
{
	uint8_t tempReg;

	tempReg = value >> 4;			// Get high nibble
	writeNibbleLcd(reg, tempReg);	// Write high nibble

	tempReg = value & 0x0F;			// Get lower nibble
	writeNibbleLcd(reg, tempReg);	// Write lower nibble
}

/************************************************************************
 * Function Name: writeNibbleLcd()
 * Description  : This function writes a nibble to the LCD.
 * Arguments    : value (BYTE) - only the lower 4 bits are used
 * Actions      : Nibble bus P70-P73 set in output mode
 *              : LCD_RS = 1; LCD_RW -> 0; LCD_E is toggled
 * Return Value : None
 ************************************************************************/

void writeNibbleLcd(uint8_t reg, uint8_t nibble)
{
	uint8_t tempReg;

	if (reg)
		LCD_RS = 1U;							// Read/write RAM
	else
		LCD_RS = 0U;							// Command

	LCD_RW   = 0U;								// Set to Write mode
	PM7     &= 0xF0;        					// Set Port 7 Data nibble to output mode
	tempReg  = (P7 & 0xF0) | (nibble & 0x0F);  	// Combine nibble and P7
	P7       = tempReg;     					// Load Port 7 data nibble
	SET_LCD_EN_HIGH;							// LCD_E  = 1U; (Enable high)
	// Wait > 0.3 usec
	NOP(); NOP(); NOP(); NOP(); NOP(); NOP();

	SET_LCD_EN_LOW;								// LCD_E  = 0U; (Set Enable low)
	NOP(); NOP();   							// Wait (2 x T_CLK)
	//    PM7 |= 0x0F;    							// Set Port 7 Data to input mode
	LCD_RW = 1U;    							// Set to Read mode
}


/************************************************************************
 * Function Name: initLcd()
 * Description  : This function initializes the LCD.
 * Arguments    :  none
 * Actions      : Provide all the init instructions - clear screen
 * Return Value : None
 ************************************************************************/

void initLcd(void)
{
	TMMK00 = 1U;					// Do not use interrupts here, just wait for the flags

	delayNoInt(15000);				// wait 15 msec for LCD power up

	writeNibbleLcd(LCD_CTRL_WR, 0x3); 	// Command 1 -> 8 bits
	delayNoInt(4100);				// Start timer with 4100 usec delay

	writeNibbleLcd(LCD_CTRL_WR, 0x3);	// Command 2 -> 8 bits
	delayNoInt(100);				// Start timer with 100 usec delay

	writeNibbleLcd(LCD_CTRL_WR, 0x3);	// Command 3 -> 8 bits
	delayNoInt(40);					// Start timer with 40 usec delay

	writeNibbleLcd(LCD_CTRL_WR, 0x2);	// Command 4 -> 4 bits
	delayNoInt(40);					// Start timer with 40 usec delay

	writeByteLcd(LCD_CTRL_WR, FUNCTION_SET);  // Set 2 lines, 5x7 dots
	delayNoInt(40);					// Start timer with 40 usec delay

	writeByteLcd(LCD_CTRL_WR, LCD_CURSOR_ON);     // Display Cursor ON
	delayNoInt(40);					// Start timer with 40 usec delay

	writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);          // Clear Display
	delayNoInt(1640);				// Start timer with 1640 usec delay

	writeByteLcd(LCD_CTRL_WR, CURSOR_MODE_INC);    // Entry Mode set
	delayNoInt(40);					// Start timer with 40 usec delay

	writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
	delayNoInt(40);					// Start timer with 40 usec delay

	writeByteLcd(0U, CURSOR_MODE_INC);
	delayNoInt(40);



}

void testLCDConnections(void)
{
	P7 &= 0x80; // All low
	NOP(); // Put a breakpoint here
	// and step (F6) from here
	LCD_RS = 1; // RS high
	NOP();
	LCD_RS = 0; // RS low
	NOP();
	LCD_RW = 1; // RNW high
	NOP();
	LCD_RW = 0; // RNW low
	NOP();
	LCD_E = 1; // E high
	NOP();
	LCD_E = 0; // E low
	NOP();
	LCD_D0 = 1; // DB0/DB4 high
	NOP();
	LCD_D1 = 1; // DB1/DB5 high
	NOP();
	LCD_D2 = 1; // DB2/DB6 high
	NOP();
	LCD_D3 = 1; // DB3/DB7 high
	NOP();
	P7 &= 0x80; // Make all low
}

/**
 * Clears the LCD
 */
void lcd_clear()
{
	writeByteLcd(LCD_CTRL_WR, LCD_CURSOR_ON);     // Display Cursor ON
	delayNoInt(40);					// Start timer with 40 usec delay

	writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);          // Clear Display
	delayNoInt(1640);				// Start timer with 1640 usec delay

	writeByteLcd(LCD_CTRL_WR, CURSOR_MODE_INC);    // Entry Mode set
	delayNoInt(40);					// Start timer with 40 usec delay

	writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
	delayNoInt(40);					// Start timer with 40 usec delay
}

/**
 * Prints a message to the LCD
 * @param message text to be displayed
 */
void print_lcd(uint8_t *message)
{
	uint8_t len = strlen(message);
	lcd_clear();
	delay(10000);

	int i;
	for (i = 0; i < len; i++)
	{
		if (message[i] <= 0x7F) writeByteLcd(1U, message[i]);
		delay(100);
		if (i == 7)
		{
			writeByteLcd(0U, 0xC0);
			delay(100);
		}
	}
}

/**
 * Approximate for-loop delay.
 * Delays x processor ticks.
 * @param delay for-loop ticks to delay
 */
void delay(uint16_t delay){
	for ( ; delay > 0 ; delay--);
}

/**
 * Converts Infra-red Manchester Encoding to normal Binary format for LCD display
 * @param word IR Manchester encoded data
 * @param lcd_word Text to be displayed to LCD
 */
void word_to_ascii(uint16_t word, uint8_t *lcd_word){
	volatile uint8_t k;
	for (k = 0; k < 16; k++)
	{
		uint8_t shift = word >> (15 - k);
		uint8_t number = shift & 0x1;
		lcd_word[k] = number + '0';
	}
}

/**
 * Welcome the user on LCD
 */
void welcome(void)
{
	int scrollCount = 0;
	int j = 0;
	int i = 0;

	char msg[] = {"                Nel T. 18179460"};

	int length = sizeof(msg)/sizeof(char);

	//For LCD index i
	for(i = 0 ; i < (length-16) ; i++)
	{
		//For message character j
		for (j = 0 ; j < 16 ; j++)
		{
			//Offset message for scroll effect
			writeByteLcd(1U, msg[(j+scrollCount)]);
			delayNoInt(100);
			//Jump to second line of LCD due to memory gap
			if (j == 7)
			{
				writeByteLcd(0U, LCD_HOME_L2);
				delayNoInt(100);
			}
		}
		scrollCount++;
		writeByteLcd(0U, LCD_HOME_L1);
		delayNoInt(100);
		msDelay(350);
	}
	msDelay(500);
}
