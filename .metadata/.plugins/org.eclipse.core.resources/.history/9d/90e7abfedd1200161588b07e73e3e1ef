/*
 * adc.c
 *
 *  Created on: May 5, 2016
 *      Author: trist
 */

#include "adc.h"

//FUNCTIONS
void ADC(void);

/**
 * get adc reading (single-shot reading of 1 channel)
 * @return: 10-bit adc result
 */
uint16_t adc_get_reading(){
	uint16_t adc_result;
	P7^=0x80;
	R_ADC_Start();
	while(!adc_ready);
	adc_ready=0;
	R_ADC_Get_Result(&adc_result);
	R_ADC_Stop();
	return adc_result;
}

/**
 * service the adc interrupt and get multiple readings
 */
void adc_multi_channel_interrupt_service_routine(){
	static uint8_t cur_channel = 0;
	switch (INTAD_FSM_state) {
	case AD_SAMPLING:
		R_ADC_Get_Result((&(ADC_value[cur_channel])));
		cur_channel++;
		if (cur_channel == NUM_CHANNELS) {
			INTAD_FSM_state = AD_IDLE;
			cur_channel = 0;
			ADC_done = 1;
		}
		break;
	case AD_IDLE:
	default:
		INTAD_FSM_state = AD_IDLE;
		break;
	}
}

/**
 * get multiple channels from the adc
 */
void adc_get_multiple_channels(){
	INTAD_FSM_state = AD_SAMPLING;
	ADC_done = 0;
	R_ADC_Start(); /* Start ADC (ADCS = 0n) */
	while (!ADC_done)
		;

	/*
	if (debug_adc_serial){
		serial_print_adc(ADC_value[2]);
		serial_print_adc(ADC_value[3]);
		echo('\n');
	}
	*/

	volatile tiny_adc_reading = ADC_value[2] >> 3;
	//motor_power_ratio(tiny_adc_reading,128);
}
