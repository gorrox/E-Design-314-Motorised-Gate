/*
 * global.c
 *
 *  Created on: Feb 21, 2016
 *      Author: Tristan Nel - 18179460
 */

#include "global.h"
#include "r_cg_rtc.h"

/**
 * Primary loop function:
 * - React to proximity switches (poll)
 * - React to PCB buttons
 * - React to Infra-red command
 * - React to IR-data-to-LCD
 * - Motor Current Measurement (ADC)
 * - UART data receive
 * - UART data send
 * - Pulse Width Modulation for motor
 */
void core(void)
{
	while (1U)
	{
		/* React to flags... */
		mtrBtn();					/* Proximity switches (poll) */
		boardBtn();					/* PCB buttons */
		IRcmd();					/* Infra-red command */
		IRtoLCD();					/* IR-data-to-LCD */
		ADC();						/* Motor Current Measurement (ADC) */
		uartReceive();				/* UART data receive */
		uartSend();					/* UART data send */
		pwm(CYC_PER_SEC, DIV); 		/* Motor: Pulse Width Modulation */
	}
}

/**
 * PRIMARY FUNCTIONS
 */

/**
 * Function to initialize:
 * - Variables & Flags
 * - Interrupts
 * - UART
 * - Timers
 * - ADC
 * - RTC
 * - Welcome the user
 * - Start in Normal Mode
 * - Prime UART to Receive
 * - Infra-red Message
 */
void init(void)
{
	/* Variables & Flags */
	uart1RxFlag = 0U;
	uart1TxFlag = 0U;
	gate_cmd = 0;
	auto_close_cntr = 0;
	auto_close = 0;
	collision_det_counter = 0;
	collision_det = 0;
	myCounter = 0;
	dataPrint = 0;
	dataResponse = 1;
	dataReady = 0;
	prev_gate_status = UNKNOWN;
	gate_status = UNKNOWN;
	DVR_nSLEEP = 0;
	/* Interrupts*/
	EI();
	R_INTC7_Start();
	/* UART */
	R_UART1_Start();
	/* Timers */
	R_TAU0_Channel0_Start();
	R_TAU0_Channel1_Lower8bits_Start();
	R_TAU0_Channel2_Start();
	R_TMR_RD0_Start();
	/* ADC */
	R_ADC_Start();
	/* RTC */
	R_RTC_Start();
	/* Welcome user */
	initLcd();
	welcome();
	initLcd();
	/* Start in Normal mode */
	ctrlMode = NORMAL;
	echo(0x80);
	delayNoInt(100);
	uart1TxFlag = 0U;
	print_lcd("Normal mode");
	/* Prime UART to Receive */
	uart1RxBuf[0] = 'r';
	uart1Status = R_UART1_Receive(&uart1RxBuf[0],1);
	/* Infra-red Message */
	ir_rxMessage = 0x0000;
}

/**
 * Function to process proximity switch presses
 * Stops gate if contact is detected and changes gate status
 */
void mtrBtn(void)
{
	if (switch_edge)
	{
		switch_edge = 0;

		if (SWITCH_OPENED)
		{
			if (DVR_PHASE == DVR_PHASE_OPEN)
			{
				prev_gate_status = gate_status;
				gate_status = OPENED;
				if (prev_gate_status != gate_status)
				{
					dataPrint = 0;
					DVR_nSLEEP = 0;
					print_lcd("Opened");
					msDelay(5);
					auto_close = 1;
				}
			}

		}
		else if (SWITCH_CLOSED)
		{
			if (DVR_PHASE == DVR_PHASE_CLOSE) // if opening activated
			{
				prev_gate_status = gate_status;
				gate_status = CLOSED;
				if (prev_gate_status != gate_status)
				{
					dataPrint = 0;
					DVR_nSLEEP = 0;
					print_lcd("Closed");
					msDelay(5);
				}
			}
		}
	}
}

/**
 * Function to process PCB button presses:
 * - Open gate
 * - Close gate
 * - Estop
 * - Menu Step (not implemented)
 */
void boardBtn(void)
{
	if (check_btns)
	{
		check_btns = 0;

		if (ctrlMode == NORMAL)
		{
			if (!BTN_STOP)
			{
				dataPrint = 0;
				stopGate();
				print_lcd("Gate stopped.");
				return;
			}

			if (!BTN_STEP)
			{
				//TODO
				return;
			}
		}

		else if(ctrlMode == TEST)
		{
			if (!BTN_OPEN)
			{
				openGate();
				print_lcd("Gate opening...");
				return;
			}

			if (!BTN_CLOSE)
			{
				closeGate();
				print_lcd("Gate closing...");
				return;
			}
		}
	}
}

/**
 * Function to display last IR command to LCD
 */
void IRtoLCD(void)
{
	if (dataReady && dataPrint && (ctrlMode == TEST))
	{
		uint8_t ascii_word[16];
		word_to_ascii(ir_rxMessage, ascii_word);
		print_lcd(ascii_word);
		dataPrint = 0;
	}
}

/**
 * Function to process UART Receive flag.
 * Executes commands corresponding to the received hex data.
 */
void uartReceive(void)
{
	if (uart1RxFlag)
	{
		uart1RxFlag = 0U;
		switch(uart1RxBuf[0])
		{
			case 0x80: /*Enter Normal mode */
				ctrlMode = NORMAL;
				echo(0x80);
				dataPrint = 0;
				print_lcd("Normal mode");
				break;
			case 0x81:	/* Enter Test mode */
				ctrlMode = TEST;
				echo(0x81);
				dataPrint = 0;
				print_lcd("Test mode");
				buzzerBeep(3);
				break;
			case 0xF0:	/* Buzzer on */
				echo(0xF0);
				R_PCLBUZ0_Start();
				break;
			case 0xF1:	/* Buzzer off */
				echo(0xF1);
				R_PCLBUZ0_Stop();
				break;
			case 0xF2:	/* Set Real Time Clock to buffered 5 Bytes */
				echo(0xF2);
				setRTC();
				break;
			case 0xF3:	/* Report current Real Time Clock via UART */
				sendRTC();
				break;
			case 0xF4:	/* Display buffered data to LCD */
				if(ctrlMode == TEST)
				{
					bufferToLCD();
				}
				break;
			case 0xF7:	/* Report current via UART */
				echoData(0xF7, initial_current/5);
				break;
			case 0xF8:	/* Close gate */
				echo(0xF8);
				closeGate();
				print_lcd("Gate closing...");
				break;
			case 0xF9:	/* Open gate */
				echo(0xF9);
				openGate();
				print_lcd("Gate opening...");
				break;
			case 0xFC:	/* Report Infra-red command via UART */
				echo(0xFC);
				msDelay(10);
				/* Separate data */
				uint8_t cmd = ir_rxMessage & 0x7;
				uint8_t addr = (ir_rxMessage >> 3) & 0xFF;
				uint8_t tog = (ir_rxMessage >> 11) & 0x1;
				echoData(addr, ((tog<<7) + cmd));
				break;
			case 0xFF:	/* Report gate status via UART */
				msDelay(10);
				switch(gate_status)
				{
					case OPENED:
						echoData(0xFF, 0x82);
						print_lcd("Opened");
						break;
					case CLOSED:
						echoData(0xFF, 0x81);
						print_lcd("Closed");
						break;
					case UNKNOWN:
						echoData(0xFF, 0x00);
						print_lcd("Unknown");
						break;
					case ESTOP:
						echoData(0xFF, 0x84);
						print_lcd("Emergency stop");
						break;
				}
				break;
			default:	/* Store data in buffer if not full */
				if(myCounter < RX_BUF_LEN)
				{
					myBuffer[myCounter] = uart1RxBuf[0];
					myCounter++;
				}
		}
		uart1Status = R_UART1_Receive(uart1RxBuf,1);	/* Prime to Receive next data */
	}
}

/**
 * Function to process the UART Send flag
 */
void uartSend(void)
{
	if (uart1TxFlag)
	{
		uart1TxFlag = 0U;
	}
}

/**
 * Function to output Pulse Width Modulation signal to motor
 * The output is constant, and the motor's utilisation of the PWM
 * is toggled by its nSLEEP
 * PWM = divisor/cycles_per_second %
 * @param cycles_per_second
 * @param divisor
 * @see global.h
 */
void pwm(int cycles_per_second, int divisor)
{
	if (pwm_edge)
	{
		pwm_edge=0;
		pwm_counter++;
		pwm_counter%=cycles_per_second;					/*Rolls over*/
		if (pwm_counter < divisor) DVR_ENABLE = 1;		/*Reaches max of 'divisor'*/
		else DVR_ENABLE = 0;
	}
}

/**
 * END PRIMARY FUNCTIONS
 */

/**
 * AUXILIARY FUNCTIONS
 */

/**
 * Delay for t milliseconds
 */
void msDelay(int t)
{
	int a = 0;
	for(a = 0; a < t; a++)
	{
		delayNoInt(1000);
	}
}

/**
 * Function to echo one Byte of data via UART to PC
 * @param hex byte to be sent
 */
void echo(uint8_t hex)
{
	uart1TxBuf[0] = hex;
	uart1Status = R_UART1_Send(uart1TxBuf,1);
}

/**
 * Function to echo two Bytes of data via UART to PC
 * @param hex first Byte to be sent
 * @param hex2 second Byte to be sent
 */
void echoData(uint8_t hex, uint8_t hex2)
{
	uart1TxBuf[0] = hex;
	uart1TxBuf[1] = hex2;
	uart1Status = R_UART1_Send(uart1TxBuf,2);
}

/**
 * Function to write data in the buffer to the LCD
 */
void bufferToLCD(void)
{
	echo(0xF4);
	initLcd();
	int display_x = 0;
	int display_y = 0;
	int display_scroll = 0;
	int display_length = 16;
	int display_loop = 1;
	int overflow;

	//Determine overflow
	if (myCounter > 15) {
		overflow = myCounter - 15;
	}
	else {
		overflow = 1;
	}

	//For LCD index i
	for(display_y = 0 ; display_y < overflow ; display_y++)
	{
		//For message character j
		for (display_x = 0 ; display_x < myCounter ; display_x++)
		{
			writeByteLcd(1U, myBuffer[(display_x+display_scroll)]);
			delayNoInt(3250);
			if (display_x == 7){
				writeByteLcd(0U, LCD_HOME_L2);
				delayNoInt(100);
			}
		}
		display_scroll++;
		writeByteLcd(0U, LCD_HOME_L1);
		delayNoInt(100);
		msDelay(350);
	}
	myCounter = 0;
}

/**
 * Opens the gate
 */
void openGate(void)
{
	//gate_cmd = 1;
	DVR_PHASE = DVR_PHASE_OPEN;
	DVR_nSLEEP = 1;
	prev_gate_status = gate_status;
	gate_status = UNKNOWN;
	//msDelay(COLLISION_DET_DELAY);
}

/**
 * Closes the gate
 */
void closeGate(void)
{
	//gate_cmd = 1;
	DVR_PHASE = DVR_PHASE_CLOSE;
	DVR_nSLEEP = 1;
	prev_gate_status = gate_status;
	gate_status = UNKNOWN;
	if (auto_close)
	{
		auto_close = 0;
		auto_close_cntr = 0;
	}
	//msDelay(COLLISION_DET_DELAY);
}

/**
 * Stops the gate (emergency stop)
 */
void stopGate(void)
{
	DVR_nSLEEP = 0;
	prev_gate_status = gate_status;
	gate_status = ESTOP;
}

/**
 * Sets the Real Time Clock to the last 5 Bytes stored in the UART Receive buffer
 */
void setRTC(void)
{
	time_now.sec = toBCD(myBuffer[myCounter - 1]);
	time_now.min = toBCD(myBuffer[myCounter - 2]);
	time_now.hour = toBCD(myBuffer[myCounter - 3]);
	time_now.day = toBCD(myBuffer[myCounter - 4]);
	time_now.month = toBCD(myBuffer[myCounter - 5]);
	R_RTC_Stop();
	R_RTC_Set_CounterValue(time_now);
	R_RTC_Start();
	int i;
	for (i = 0; i < RX_BUF_LEN; i++)
	{
		myBuffer[i] = 0x0;
	}
	myCounter = 0;
}

/**
 * Sends the current Real Time Clock value via UART
 */
void sendRTC(void)
{
	int i;
	for (i = 0; i < RX_BUF_LEN; i++)
	{
		myBuffer[i] = 0x0;
	}
	myCounter = 0;
	R_RTC_Get_CounterValue(&time_now);
	myBuffer[0] = 0xF3;
	myBuffer[1] = toHex(time_now.month);
	myBuffer[2] = toHex(time_now.day);
	myBuffer[3] = toHex(time_now.hour);
	myBuffer[4] = toHex(time_now.min);
	myBuffer[5] = toHex(time_now.sec);

	R_UART1_Send(myBuffer, 6);
}

/**
 * Causes the buzzer to emit a series of beeps at 20 millisecond intervals
 * @param beeps number of consecutive beeps
 */
void buzzerBeep(uint8_t beeps)
{
	while (beeps){
		R_PCLBUZ0_Start();
		msDelay(20);
		R_PCLBUZ0_Stop();
		beeps--;
		if (beeps) msDelay(40);
	}
}

/**
 * Converts Binary Coded Decimal to Hexadecimal
 * Maximum input/output value is 99
 * @param decimal BCD value
 * @return Hexadecimal value
 */
uint8_t toHex(uint8_t decimal)
{
	return (decimal & 0x0F) + ((decimal >> 4) * 10);
}

/**
 * Converts Hexadecimal to Binary Coded Decimal
 * Maximum input/output value is 99
 * @param hex Hexadecimal value
 * @return Binary Coded Decimal value
 */
uint8_t toBCD(uint8_t hex)
{
	uint8_t nibble_l = hex % 10; //Isolate lower nibble
	uint8_t nibble_h = ((hex / 10) % 10) << 4; //Isolate higher nibble
	uint8_t byte = nibble_h | nibble_l; //Combine them as two consecutive values
	return byte;
}

/**
 * END AUXILIARY FUNCTIONS
 */
