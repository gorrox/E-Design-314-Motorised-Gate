/*
 * global.c
 *
 *  Created on: Apr 11, 2016
 *      Author: trist
 */

#include "global.h"
/**
 * Function to initialise the program variables, timers, connections, interrupts etc.
 */
void init(void)
{
    R_TAU0_Channel0_Start(); 	//PWM carrier
    R_TAU0_Channel3_Start();	//Manchester RC5 modulator
    btnOpenTrigger = 0;
    btnOpenTrigger = 0;
    R_INTC0_Start(); 			// Buttons
    R_INTC1_Start();
    frameBase = frameBaseDef;
    tx = 0;
}

/**
 * Primary loop function, handles event flags (buttons pressed)
 */
void core(void)
{
	while (1U)
	{
		if (btnOpenTrigger) btnOpenTriggered();
		else if (btnCloseTrigger) btnCloseTriggered();
	}
}

/**
 * Transmits stored array of 14 bits via IR LED
 * Uses Manchester RC5 encoding
 */
void transmit(void)
{
	static volatile uint8_t fullHalfBitCounter = frameHalfBitLength;
	static volatile uint8_t frameHalfBitCounter = frameHalfBitLength;
	volatile uint8_t bit; /*Buffer*/

	if (fullHalfBitCounter) /*Busy transmitting*/
	{
		if (frameHalfBitCounter)
		{
			bit = (msg >> ((frameHalfBitCounter + 1)/2 -1)); /*Data bit*/
			bit &= 0x1; /*Lowest LSB*/
			modulate = (!bit ^ (frameHalfBitCounter%2));
			if (!modulate) P1_bit.no0 = 0;
			frameHalfBitCounter--;
		}
		else
		{
			modulate = 0;
			P1_bit.no0 = 0;
		}
		fullHalfBitCounter--;
	}
	else /*Not busy transmitting*/
	{
		/*Reset*/
		fullHalfBitCounter = fullHalfBitLength;
		frameHalfBitCounter = frameHalfBitLength;
	}

}

/**
 * Function to handle Open Gate button event:
 * - If pressed alone, open gate
 * - If let go while Close Gate is not pressed, stop transmitting
 * - If pressed while Close Gate is pressed, emergency stop
 * - If let go while Close Gate is pressed, close gate
 */
void btnOpenTriggered()
{
	if (!btnOpen && btnClose)
	{
		/*Pressed Open alone, just open gate*/
		frameBase ^= toggle; 			/*Toggle Bit*/
		msg = frameBase + openCode; 	/*Set transmission to Open Gate command*/
		tx = 1;
	}
	else if (btnOpen && btnClose)
	{
		/*Let go of Open, Close is not being pressed, stop transmitting*/
		tx = 0;
		P1_bit.no0 = 0;
	}
	else if (!btnOpen && !btnClose)
	{
		/*Pressed Open while Close is pressed (both)*/
		frameBase ^= toggle; 			/*Toggle Bit*/
		msg = frameBase + bothCode;		/*Set transmission to Emergency stop command*/
		tx = 1;
	}
	else if (btnOpen && !btnClose)
	{
		/*Let go of Open while Close is pressed (Idle)*/
		tx = 0;
		P1_bit.no0 = 0;
	}
	btnOpenTrigger = 0;
}

/**
 * Function to handle Close Gate button event:
 * - If pressed alone, close gate
 * - If let go while Open Gate is not pressed, stop transmitting
 * - If pressed while Open Gate is pressed, emergency stop
 * - If let go while Open Gate is pressed, open gate
 */
void btnCloseTriggered()
{
	if (!btnClose && btnOpen)
	{
		/*Pressed Close alone, just close gate*/
		frameBase ^= toggle; 			/*Toggle Bit*/
		msg = frameBase + closeCode; 	/*Set transmission to Close Gate command*/
		tx = 1;
	}
	else if (btnClose && btnOpen)
	{
		/*Let go of Close, Open is not being pressed, stop transmitting*/
		tx = 0;
		P1_bit.no0 = 0;
	}
	else if (!btnClose && !btnOpen)
	{
		/*Pressed Close while Open is pressed (both)*/
		frameBase ^= toggle; 			/*Toggle Bit*/
		msg = frameBase + bothCode;		/*Set transmission to Emergency stop command*/
		tx = 1;
	}
	else if (btnClose && !btnOpen)
	{
		/*Let go of Close while Open is pressed (Idle)*/
		tx = 0;
		P1_bit.no0 = 0;
	}
	btnCloseTrigger = 0;
}
