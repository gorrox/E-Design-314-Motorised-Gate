/***********************************************************************************************************************
* DISCLAIMER
* This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products.
* No other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
* applicable laws, including copyright laws. 
* THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIESREGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED
* OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY
* LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE FOR ANY DIRECT,
* INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR
* ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
* Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability 
* of this software. By using this software, you agree to the additional terms and conditions found by accessing the 
* following link:
* http://www.renesas.com/disclaimer
*
* Copyright (C) 2011, 2015 Renesas Electronics Corporation. All rights reserved.
***********************************************************************************************************************/

/***********************************************************************************************************************
* File Name    : r_main.c
* Version      : CodeGenerator for RL78/G14 V2.04.02.01 [15 May 2015]
* Device(s)    : R5F104LE
* Tool-Chain   : GCCRL78
* Description  : This file implements main function.
* Creation Date: 5/4/2016
***********************************************************************************************************************/

/***********************************************************************************************************************
Includes
***********************************************************************************************************************/
#include "r_cg_macrodriver.h"
#include "r_cg_cgc.h"
#include "r_cg_port.h"
#include "r_cg_intc.h"
#include "r_cg_serial.h"
#include "r_cg_adc.h"
#include "r_cg_timer.h"
#include "r_cg_rtc.h"
#include "r_cg_pclbuz.h"
/* Start user code for include. Do not edit comment generated here */
#include "lcd.h"
#include "string.h"
#include "infrared.h"
/* End user code. Do not edit comment generated here */
#include "global.h"

/***********************************************************************************************************************
Global variables and functions
***********************************************************************************************************************/
/* Start user code for global. Do not edit comment generated here */

/* End user code. Do not edit comment generated here */
void R_MAIN_UserInit(void);

/***********************************************************************************************************************
* Function Name: main
* Description  : This function implements main function.
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
void main(void)
{
    R_MAIN_UserInit();
    /* Start user code. Do not edit comment generated here */
    uart1RxBuf[0] = 'r'; 								//Init to non-arbitrary
    uart1Status = R_UART1_Receive(&uart1RxBuf[0],1); 	//Prime UART to receive
    //PM7&=0x7F;
    ir_rxMessage = 0x0000;
    while (1U)
    {
    	mtrBtn();			//Check and react: switch pressed

    	boardBtn();			//Check and react: board buttons

    	IRcmd();			//Check and react: IR command

    	if (dataReady && dataPrint)	//Check and react: print to LCD
		{
			uint8_t ascii_word[16];
			word_to_ascii(ir_rxMessage, ascii_word);
			print_lcd(ascii_word);
			dataPrint = 0;
		}

        if (uart1RxFlag)	//Input received
        {
        	uart1RxFlag = 0U;

			if(uart1RxBuf[0] == 0x81)		//TEST MODE
			{
				mode = 1;
				echo(0x81);
				print_lcd("Test mode");
				buzzerBeep(3);
			}

			else if(uart1RxBuf[0] == 0x80)	//NORMAL MODE
			{
				mode = 0;
				echo(0x80);
				print_lcd("Normal mode");
			}

			else if(uart1RxBuf[0] == 0xF0)	//BUZZER ON
			{
				echo(0xF0);
				R_PCLBUZ0_Start();
			}

			else if(uart1RxBuf[0] == 0xF1)	//BUZZER OFF
			{
				echo(0xF1);
				R_PCLBUZ0_Stop();
			}

			else if(uart1RxBuf[0] == 0xF9)	//OPEN GATE
			{
				echo(0xF9);
				openGate();
				print_lcd("Gate opening...");
			}

			else if(uart1RxBuf[0] == 0xF8)	//CLOSE GATE
			{
				echo(0xF8);
				closeGate();
				print_lcd("Gate closing...");
			}

			else if(uart1RxBuf[0] == 0xF7)	//READ CURRENT
			{
				echo(0xF7);
				//TODO
			}

			else if(uart1RxBuf[0] == 0xFF)	//READ STATUS
			{
				echo(0xFF);
				msDelay(10);
				switch(gate_status)
				{
					case GS_OPENED:
						echo(0x82);
						print_lcd("Opened");
						break;
					case GS_CLOSED:
						echo(0x81);
						print_lcd("Closed");
						break;
					case GS_UNKNOWN:
						echo(0x84);
						print_lcd("Unknown");
						break;
					case GS_ESTOP:
						//echo(0x84);
						print_lcd("Emergency stop");
						break;
				}
			}

			else if (uart1RxBuf[0] == 0xFC)	//READ IR CMD
			{
				echo(0xFC);
				msDelay(10);
				//Wait for complete message?
				//echo(ir_rxMessage);
				uint8_t cmd = ir_rxMessage & 0x7;
				uint8_t addr = (ir_rxMessage >> 3) & 0xFF;
				uint8_t tog = (ir_rxMessage >> 11) & 0x6;
				echoData(addr, ((tog<<6) + cmd));
				//echo(addr);
				//echo((tog<<6) + cmd);
			}

			else if (uart1RxBuf[0] == 0xF2) //SET RTC TO PREV 5 BYTES
			{
				echo(0xF2);
				time_now.sec = toBCD(myBuffer[myCounter - 1]);
				time_now.min = toBCD(myBuffer[myCounter - 2]);
				time_now.hour = toBCD(myBuffer[myCounter - 3]);
				time_now.day = toBCD(myBuffer[myCounter - 4]);
				time_now.month = toBCD(myBuffer[myCounter - 5]);
				R_RTC_Stop();
				R_RTC_Set_CounterValue(time_now);
				R_RTC_Start();
				int i;
				for (i = 0; i < RX_BUF_LEN; i++)
				{
					myBuffer[i] = 0x0;
				}
				myCounter = 0;
			}

			else if (uart1RxBuf[0] == 0xF3) //SEND RTC VIA UART
			{
				int i;
				for (i = 0; i < RX_BUF_LEN; i++)
				{
					myBuffer[i] = 0x0;
				}
				myCounter = 0;
				R_RTC_Get_CounterValue(&time_now);
				myBuffer[0] = 0xF3;
				myBuffer[1] = toHex(time_now.month);
				myBuffer[2] = toHex(time_now.day);
				myBuffer[3] = toHex(time_now.hour);
				myBuffer[4] = toHex(time_now.min);
				myBuffer[5] = toHex(time_now.sec);

				R_UART1_Send(myBuffer, 6);
			}

			//Buffer not full and input is not a command
			else if((myCounter < RX_BUF_LEN)&&(uart1RxBuf[0] < 0x7F))
			{
				myBuffer[myCounter] = uart1RxBuf[0];
				myCounter++;
			}
			//'Display to LCD' is activated during Test Mode
			else if((mode == 1)&&(uart1RxBuf[0] == 0xF4))
			{
				echo(0xF4);
				initLcd();
				int display_x = 0;
				int display_y = 0;
				int display_scroll = 0;
				int display_length = 16;
				int display_loop = 1;
				int overflow;

				//Determine overflow
				if (myCounter > 15) {
					overflow = myCounter - 15;
				}
				else {
					overflow = 1;
				}

				//For LCD index i
				for(display_y = 0 ; display_y < overflow ; display_y++)
				{
					//For message character j
					for (display_x = 0 ; display_x < myCounter ; display_x++)
					{
						writeByteLcd(1U, myBuffer[(display_x+display_scroll)]);
						delayNoInt(3250);
						if (display_x == 7){
							writeByteLcd(0U, LCD_HOME_L2);
							delayNoInt(100);
						}
					}
					display_scroll++;
					writeByteLcd(0U, LCD_HOME_L1);
					delayNoInt(100);
					msDelay(350);
				}
				myCounter = 0;
			}

			uart1Status = R_UART1_Receive(uart1RxBuf,1);			// Prime UART2 Rx
        }

        if (uart1TxFlag)	//Output sent
        {
        	uart1TxFlag = 0U; //Clear Tx flag
        }

        pwm(100, 25); 		//PWM always running, motor toggled by DVR_nSLEEP

    }
    /* End user code. Do not edit comment generated here */
}


/***********************************************************************************************************************
* Function Name: R_MAIN_UserInit
* Description  : This function adds user code before implementing main function.
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
void R_MAIN_UserInit(void)
{
    /* Start user code. Do not edit comment generated here */
	init();
    /* End user code. Do not edit comment generated here */
}

/* Start user code for adding. Do not edit comment generated here */

/* End user code. Do not edit comment generated here */
