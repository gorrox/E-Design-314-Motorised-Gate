   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.section	.text.startTMR0,"ax",@progbits
  28                             		.global	_startTMR0
  30                             	_startTMR0:
  31                             	.LFB0:
  32                             		.file 1 "../src/lcd.c"
   1:../src/lcd.c  **** /*
   2:../src/lcd.c  ****  * lcd.c
   3:../src/lcd.c  ****  *
   4:../src/lcd.c  ****  *  Created on: 05 Feb 2016
   5:../src/lcd.c  ****  *      Author: jtreurn
   6:../src/lcd.c  ****  */
   7:../src/lcd.c  **** 
   8:../src/lcd.c  **** #include "lcd.h" // or any other includes that makes sense
   9:../src/lcd.c  **** #include "r_cg_macrodriver.h"
  10:../src/lcd.c  **** #include "r_cg_cgc.h"
  11:../src/lcd.c  **** #include "r_cg_port.h"
  12:../src/lcd.c  **** #include "r_cg_serial.h"
  13:../src/lcd.c  **** #include "r_cg_timer.h"
  14:../src/lcd.c  **** #include "r_cg_userdefine.h"
  15:../src/lcd.c  **** 
  16:../src/lcd.c  **** // Notes:
  17:../src/lcd.c  **** // This is a basic low-level set of functions to drive the LCD. The functions include
  18:../src/lcd.c  **** // 	- void initLcd(void) --- set up the LCD; requires a function delayNoInt(time in usec) to operat
  19:../src/lcd.c  **** // 	- void writeNibbleLcd(uint8_t reg, uint8_t nibble) --- low level command
  20:../src/lcd.c  **** // 	- void writeByteLcd(uint8_t reg, uint8_t value) --- lowest user level command
  21:../src/lcd.c  **** //
  22:../src/lcd.c  **** // To be useful, you should write your own functions to:
  23:../src/lcd.c  **** //	- write an ASCII character to the LCD
  24:../src/lcd.c  **** //	- write a whole string to the LCD
  25:../src/lcd.c  **** //	- write a delay function delayNoInt(delay in usec)
  26:../src/lcd.c  **** 
  27:../src/lcd.c  **** void startTMR0(int delay)
  28:../src/lcd.c  **** {
  33                             		.loc 1 28 0
  34                             	.LVL0:
  29:../src/lcd.c  **** 	TMIF00 = 0U;					//clears the INTTMOO interrupt flag
  35                             		.loc 1 29 0
  36 0000 71 48 E2 FF             		clr1	!-30.4
  30:../src/lcd.c  **** 	TDR00 = delay;
  37                             		.loc 1 30 0
  38 0004 A8 04                   		movw	ax, [sp+4]
  39 0006 BF 18 FF                		movw	!-232, ax
  31:../src/lcd.c  **** 	TS0 = 1U;
  40                             		.loc 1 31 0
  41 0009 E6                      		onew	ax
  42 000a BF B2 01                		movw	!434, ax
  32:../src/lcd.c  **** }
  43                             		.loc 1 32 0
  44 000d D7                      		ret
  45                             	.LFE0:
  47                             		.section	.text.delayNoInt,"ax",@progbits
  48                             		.global	_delayNoInt
  50                             	_delayNoInt:
  51                             	.LFB1:
  33:../src/lcd.c  **** void delayNoInt(uint16_t delay)
  34:../src/lcd.c  **** {
  52                             		.loc 1 34 0
  53                             		; start of function
  54                             		; outgoing: 2 bytes
  55                             	.LVL1:
  56 0000 20 02                   		subw	sp, #2
  57                             	.LCFI0:
  35:../src/lcd.c  **** 	startTMR0(delay);
  58                             		.loc 1 35 0
  59 0002 A8 06                   		movw	ax, [sp+6]
  60 0004 B8 00                   		movw	[sp], ax
  61 0006 FC 00 00 00             		call	!!%code(_startTMR0)
  62                             	.LVL2:
  63                             	.L3:
  36:../src/lcd.c  **** 	while(TMIF00 == 0)
  64                             		.loc 1 36 0
  65 000a 8F E2 FF                		mov	a, !-30
  66 000d 31 4A                   		shr	a, 4
  67 000f 31 03 05                		bt	A.0, $.L6
  37:../src/lcd.c  **** 		NOP();
  68                             		.loc 1 37 0
  69                             	 ; 37 "../src/lcd.c" 1
  70 0012 00                      		nop
  71                             	 ; 0 "" 2
  72 0013 EC 0A 00 00             		br	!!.L3
  73                             	.L6:
  38:../src/lcd.c  **** 	R_TAU0_Channel0_Stop();			//masks the interrupt
  74                             		.loc 1 38 0
  75 0017 FC 00 00 00             		call	!!%code(_R_TAU0_Channel0_Stop)
  76                             	.LVL3:
  39:../src/lcd.c  **** }
  77                             		.loc 1 39 0
  78 001b 10 02                   		addw	sp, #2
  79 001d D7                      		ret
  80                             	.LFE1:
  82                             		.section	.text.writeNibbleLcd,"ax",@progbits
  83                             		.global	_writeNibbleLcd
  85                             	_writeNibbleLcd:
  86                             	.LFB3:
  40:../src/lcd.c  **** 
  41:../src/lcd.c  **** /************************************************************************
  42:../src/lcd.c  **** * Function Name: writByteLcd()
  43:../src/lcd.c  **** * Description  : This function writes 2 nibbles to the LCD.
  44:../src/lcd.c  **** * Arguments    :  reg (BOOL) - 0 = register, 1 = data
  45:../src/lcd.c  **** *              :  value (BYTE) - first the upper 4 bits and the 4 lower bits
  46:../src/lcd.c  **** * Actions      : Nibble bus P70-P73 are set in output mode
  47:../src/lcd.c  **** *              : LCD_RS = 1; LCD_RW -> 0; LCD_E is toggled
  48:../src/lcd.c  **** * Return Value : None
  49:../src/lcd.c  **** ************************************************************************/
  50:../src/lcd.c  **** 
  51:../src/lcd.c  **** void writeByteLcd(uint8_t reg, uint8_t value)
  52:../src/lcd.c  **** {
  53:../src/lcd.c  **** 	uint8_t tempReg;
  54:../src/lcd.c  **** 
  55:../src/lcd.c  ****     tempReg = value >> 4;			// Get high nibble
  56:../src/lcd.c  ****     writeNibbleLcd(reg, tempReg);	// Write high nibble
  57:../src/lcd.c  **** 
  58:../src/lcd.c  **** 	tempReg = value & 0x0F;			// Get lower nibble
  59:../src/lcd.c  ****     writeNibbleLcd(reg, tempReg);	// Write lower nibble
  60:../src/lcd.c  **** }
  61:../src/lcd.c  **** 
  62:../src/lcd.c  **** /************************************************************************
  63:../src/lcd.c  **** * Function Name: writeNibbleLcd()
  64:../src/lcd.c  **** * Description  : This function writes a nibble to the LCD.
  65:../src/lcd.c  **** * Arguments    : value (BYTE) - only the lower 4 bits are used
  66:../src/lcd.c  **** * Actions      : Nibble bus P70-P73 set in output mode
  67:../src/lcd.c  **** *              : LCD_RS = 1; LCD_RW -> 0; LCD_E is toggled
  68:../src/lcd.c  **** * Return Value : None
  69:../src/lcd.c  **** ************************************************************************/
  70:../src/lcd.c  **** 
  71:../src/lcd.c  **** void writeNibbleLcd(uint8_t reg, uint8_t nibble)
  72:../src/lcd.c  **** {
  87                             		.loc 1 72 0
  88                             	.LVL4:
  73:../src/lcd.c  **** 	uint8_t tempReg;
  74:../src/lcd.c  **** 
  75:../src/lcd.c  ****     if (reg)
  89                             		.loc 1 75 0
  90 0000 88 04                   		mov	a, [sp+4]
  91 0002 D1                      		cmp0	a
  92 0003 61 F8                   		 sknz
  93 0005 EC 11 00 00             		 br	!!.L8
  76:../src/lcd.c  ****         LCD_RS = 1U;							// Read/write RAM
  94                             		.loc 1 76 0
  95 0009 71 60 07 FF             		set1	!-249.6
  96 000d EC 15 00 00             		br	!!.L9
  97                             	.L8:
  77:../src/lcd.c  ****     else
  78:../src/lcd.c  ****         LCD_RS = 0U;							// Command
  98                             		.loc 1 78 0
  99 0011 71 68 07 FF             		clr1	!-249.6
 100                             	.L9:
  79:../src/lcd.c  **** 
  80:../src/lcd.c  ****     LCD_RW   = 0U;								// Set to Write mode
 101                             		.loc 1 80 0
 102 0015 71 58 07 FF             		clr1	!-249.5
  81:../src/lcd.c  ****     PM7     &= 0xF0;        					// Set Port 7 Data nibble to output mode
 103                             		.loc 1 81 0
 104 0019 8F 27 FF                		mov	a, !-217
 105 001c 5C F0                   		and	a, #-16
 106 001e 9F 27 FF                		mov	!-217, a
 107                             	.LVL5:
  82:../src/lcd.c  ****     tempReg  = (P7 & 0xF0) | (nibble & 0x0F);  	// Combine nibble and P7
 108                             		.loc 1 82 0
 109 0021 88 06                   		mov	a, [sp+6]
 110 0023 5C 0F                   		and	a, #15
 111 0025 9D F1                   		mov	r9, a
 112 0027 8F 07 FF                		mov	a, !-249
 113 002a 5C F0                   		and	a, #-16
 114 002c 9D F0                   		mov	r8, a
 115                             	.LVL6:
  83:../src/lcd.c  ****     P7       = tempReg;     					// Load Port 7 data nibble
 116                             		.loc 1 83 0
 117 002e 8D F1                   		mov	a, r9
 118                             	.LVL7:
 119 0030 6B F0                   		or	a, r8
 120                             	.LVL8:
 121 0032 9F 07 FF                		mov	!-249, a
  84:../src/lcd.c  ****     SET_LCD_EN_HIGH;							// LCD_E  = 1U; (Enable high)
 122                             		.loc 1 84 0
 123 0035 71 40 07 FF             		set1	!-249.4
  85:../src/lcd.c  ****         // Wait > 0.3 usec
  86:../src/lcd.c  ****     NOP(); NOP(); NOP(); NOP(); NOP(); NOP();
 124                             		.loc 1 86 0
 125                             	 ; 86 "../src/lcd.c" 1
 126 0039 00                      		nop
 127                             	 ; 0 "" 2
 128                             	 ; 86 "../src/lcd.c" 1
 129 003a 00                      		nop
 130                             	 ; 0 "" 2
 131                             	 ; 86 "../src/lcd.c" 1
 132 003b 00                      		nop
 133                             	 ; 0 "" 2
 134                             	 ; 86 "../src/lcd.c" 1
 135 003c 00                      		nop
 136                             	 ; 0 "" 2
 137                             	 ; 86 "../src/lcd.c" 1
 138 003d 00                      		nop
 139                             	 ; 0 "" 2
 140                             	 ; 86 "../src/lcd.c" 1
 141 003e 00                      		nop
 142                             	 ; 0 "" 2
  87:../src/lcd.c  **** 
  88:../src/lcd.c  ****     SET_LCD_EN_LOW;								// LCD_E  = 0U; (Set Enable low)
 143                             		.loc 1 88 0
 144 003f 71 48 07 FF             		clr1	!-249.4
  89:../src/lcd.c  ****     NOP(); NOP();   							// Wait (2 x T_CLK)
 145                             		.loc 1 89 0
 146                             	 ; 89 "../src/lcd.c" 1
 147 0043 00                      		nop
 148                             	 ; 0 "" 2
 149                             	 ; 89 "../src/lcd.c" 1
 150 0044 00                      		nop
 151                             	 ; 0 "" 2
  90:../src/lcd.c  **** //    PM7 |= 0x0F;    							// Set Port 7 Data to input mode
  91:../src/lcd.c  ****     LCD_RW = 1U;    							// Set to Read mode
 152                             		.loc 1 91 0
 153 0045 71 50 07 FF             		set1	!-249.5
  92:../src/lcd.c  **** }
 154                             		.loc 1 92 0
 155 0049 D7                      		ret
 156                             	.LFE3:
 158                             		.section	.text.writeByteLcd,"ax",@progbits
 159                             		.global	_writeByteLcd
 161                             	_writeByteLcd:
 162                             	.LFB2:
  52:../src/lcd.c  **** 	uint8_t tempReg;
 163                             		.loc 1 52 0
 164                             		; start of function
 165                             		; push 2: r16
 166                             		; outgoing: 4 bytes
 167                             	.LVL9:
 168 0000 61 EF                   		sel	rb2
 169 0002 C1                      		push	ax ; r16
 170                             	.LCFI1:
 171 0003 61 CF                   		sel	rb0
 172 0005 20 04                   		subw	sp, #4
 173                             	.LCFI2:
 174 0007 88 0C                   		mov	a, [sp+12]
 175 0009 9D E8                   		mov	r16, a
 176                             	.LVL10:
  56:../src/lcd.c  **** 
 177                             		.loc 1 56 0
 178 000b 88 0A                   		mov	a, [sp+10]
 179 000d 98 00                   		mov	[sp], a
 180 000f 8D E8                   		mov	a, r16
 181 0011 31 4A                   		shr	a, 4
 182                             	.LVL11:
 183 0013 98 02                   		mov	[sp+2], a
 184 0015 FC 00 00 00             		call	!!%code(_writeNibbleLcd)
 185                             	.LVL12:
  59:../src/lcd.c  **** }
 186                             		.loc 1 59 0
 187 0019 88 0A                   		mov	a, [sp+10]
 188 001b 98 00                   		mov	[sp], a
 189 001d 8D E8                   		mov	a, r16
 190 001f 5C 0F                   		and	a, #15
 191                             	.LVL13:
 192 0021 98 02                   		mov	[sp+2], a
 193 0023 FC 00 00 00             		call	!!%code(_writeNibbleLcd)
 194                             	.LVL14:
  60:../src/lcd.c  **** 
 195                             		.loc 1 60 0
 196 0027 10 04                   		addw	sp, #4
 197 0029 61 EF                   		sel	rb2
 198 002b C0                      		pop	ax ; r16
 199 002c 61 CF                   		sel	rb0
 200 002e D7                      		ret
 201                             	.LFE2:
 203                             		.section	.text.initLcd,"ax",@progbits
 204                             		.global	_initLcd
 206                             	_initLcd:
 207                             	.LFB4:
  93:../src/lcd.c  **** 
  94:../src/lcd.c  **** 
  95:../src/lcd.c  **** /************************************************************************
  96:../src/lcd.c  **** * Function Name: initLcd()
  97:../src/lcd.c  **** * Description  : This function initializes the LCD.
  98:../src/lcd.c  **** * Arguments    :  none
  99:../src/lcd.c  **** * Actions      : Provide all the init instructions - clear screen
 100:../src/lcd.c  **** * Return Value : None
 101:../src/lcd.c  **** ************************************************************************/
 102:../src/lcd.c  **** 
 103:../src/lcd.c  **** void initLcd(void)
 104:../src/lcd.c  **** {
 208                             		.loc 1 104 0
 209                             		; start of function
 210                             		; outgoing: 4 bytes
 211 0000 20 04                   		subw	sp, #4
 212                             	.LCFI3:
 105:../src/lcd.c  **** 	TMMK00 = 1U;					// Do not use interrupts here, just wait for the flags
 213                             		.loc 1 105 0
 214 0002 71 40 E6 FF             		set1	!-26.4
 106:../src/lcd.c  **** 
 107:../src/lcd.c  **** 	delayNoInt(15000);				// wait 15 msec for LCD power up
 215                             		.loc 1 107 0
 216 0006 30 98 3A                		movw	ax, #15000
 217 0009 B8 00                   		movw	[sp], ax
 218 000b FC 00 00 00             		call	!!%code(_delayNoInt)
 219                             	.LVL15:
 108:../src/lcd.c  **** 
 109:../src/lcd.c  ****     writeNibbleLcd(LCD_CTRL_WR, 0x3); 	// Command 1 -> 8 bits
 220                             		.loc 1 109 0
 221 000f F1                      		clrb	a
 222 0010 98 00                   		mov	[sp], a
 223 0012 51 03                   		mov	a, #3
 224 0014 98 02                   		mov	[sp+2], a
 225 0016 FC 00 00 00             		call	!!%code(_writeNibbleLcd)
 226                             	.LVL16:
 110:../src/lcd.c  ****     delayNoInt(4100);				// Start timer with 4100 usec delay
 227                             		.loc 1 110 0
 228 001a 30 04 10                		movw	ax, #4100
 229 001d B8 00                   		movw	[sp], ax
 230 001f FC 00 00 00             		call	!!%code(_delayNoInt)
 231                             	.LVL17:
 111:../src/lcd.c  **** 
 112:../src/lcd.c  ****     writeNibbleLcd(LCD_CTRL_WR, 0x3);	// Command 2 -> 8 bits
 232                             		.loc 1 112 0
 233 0023 F1                      		clrb	a
 234 0024 98 00                   		mov	[sp], a
 235 0026 51 03                   		mov	a, #3
 236 0028 98 02                   		mov	[sp+2], a
 237 002a FC 00 00 00             		call	!!%code(_writeNibbleLcd)
 238                             	.LVL18:
 113:../src/lcd.c  ****     delayNoInt(100);				// Start timer with 100 usec delay
 239                             		.loc 1 113 0
 240 002e 30 64 00                		movw	ax, #100
 241 0031 B8 00                   		movw	[sp], ax
 242 0033 FC 00 00 00             		call	!!%code(_delayNoInt)
 243                             	.LVL19:
 114:../src/lcd.c  **** 
 115:../src/lcd.c  ****     writeNibbleLcd(LCD_CTRL_WR, 0x3);	// Command 3 -> 8 bits
 244                             		.loc 1 115 0
 245 0037 F1                      		clrb	a
 246 0038 98 00                   		mov	[sp], a
 247 003a 51 03                   		mov	a, #3
 248 003c 98 02                   		mov	[sp+2], a
 249 003e FC 00 00 00             		call	!!%code(_writeNibbleLcd)
 250                             	.LVL20:
 116:../src/lcd.c  ****     delayNoInt(40);					// Start timer with 40 usec delay
 251                             		.loc 1 116 0
 252 0042 30 28 00                		movw	ax, #40
 253 0045 B8 00                   		movw	[sp], ax
 254 0047 FC 00 00 00             		call	!!%code(_delayNoInt)
 255                             	.LVL21:
 117:../src/lcd.c  **** 
 118:../src/lcd.c  ****     writeNibbleLcd(LCD_CTRL_WR, 0x2);	// Command 4 -> 4 bits
 256                             		.loc 1 118 0
 257 004b F1                      		clrb	a
 258 004c 98 00                   		mov	[sp], a
 259 004e 51 02                   		mov	a, #2
 260 0050 98 02                   		mov	[sp+2], a
 261 0052 FC 00 00 00             		call	!!%code(_writeNibbleLcd)
 262                             	.LVL22:
 119:../src/lcd.c  ****     delayNoInt(40);					// Start timer with 40 usec delay
 263                             		.loc 1 119 0
 264 0056 30 28 00                		movw	ax, #40
 265 0059 B8 00                   		movw	[sp], ax
 266 005b FC 00 00 00             		call	!!%code(_delayNoInt)
 267                             	.LVL23:
 120:../src/lcd.c  **** 
 121:../src/lcd.c  ****     writeByteLcd(LCD_CTRL_WR, FUNCTION_SET);  // Set 2 lines, 5x7 dots
 268                             		.loc 1 121 0
 269 005f F1                      		clrb	a
 270 0060 98 00                   		mov	[sp], a
 271 0062 51 28                   		mov	a, #40
 272 0064 98 02                   		mov	[sp+2], a
 273 0066 FC 00 00 00             		call	!!%code(_writeByteLcd)
 274                             	.LVL24:
 122:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 275                             		.loc 1 122 0
 276 006a 30 28 00                		movw	ax, #40
 277 006d B8 00                   		movw	[sp], ax
 278 006f FC 00 00 00             		call	!!%code(_delayNoInt)
 279                             	.LVL25:
 123:../src/lcd.c  **** 
 124:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, LCD_CURSOR_ON);     // Display Cursor ON
 280                             		.loc 1 124 0
 281 0073 F1                      		clrb	a
 282 0074 98 00                   		mov	[sp], a
 283 0076 51 0E                   		mov	a, #14
 284 0078 98 02                   		mov	[sp+2], a
 285 007a FC 00 00 00             		call	!!%code(_writeByteLcd)
 286                             	.LVL26:
 125:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 287                             		.loc 1 125 0
 288 007e 30 28 00                		movw	ax, #40
 289 0081 B8 00                   		movw	[sp], ax
 290 0083 FC 00 00 00             		call	!!%code(_delayNoInt)
 291                             	.LVL27:
 126:../src/lcd.c  **** 
 127:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, LCD_CLEAR);          // Clear Display
 292                             		.loc 1 127 0
 293 0087 F1                      		clrb	a
 294 0088 98 00                   		mov	[sp], a
 295 008a E1                      		oneb	a
 296 008b 98 02                   		mov	[sp+2], a
 297 008d FC 00 00 00             		call	!!%code(_writeByteLcd)
 298                             	.LVL28:
 128:../src/lcd.c  **** 	delayNoInt(1640);				// Start timer with 1640 usec delay
 299                             		.loc 1 128 0
 300 0091 30 68 06                		movw	ax, #1640
 301 0094 B8 00                   		movw	[sp], ax
 302 0096 FC 00 00 00             		call	!!%code(_delayNoInt)
 303                             	.LVL29:
 129:../src/lcd.c  **** 
 130:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, CURSOR_MODE_INC);    // Entry Mode set
 304                             		.loc 1 130 0
 305 009a F1                      		clrb	a
 306 009b 98 00                   		mov	[sp], a
 307 009d 51 06                   		mov	a, #6
 308 009f 98 02                   		mov	[sp+2], a
 309 00a1 FC 00 00 00             		call	!!%code(_writeByteLcd)
 310                             	.LVL30:
 131:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 311                             		.loc 1 131 0
 312 00a5 30 28 00                		movw	ax, #40
 313 00a8 B8 00                   		movw	[sp], ax
 314 00aa FC 00 00 00             		call	!!%code(_delayNoInt)
 315                             	.LVL31:
 132:../src/lcd.c  **** 
 133:../src/lcd.c  **** 	writeByteLcd(LCD_CTRL_WR, LCD_HOME_L1);
 316                             		.loc 1 133 0
 317 00ae F1                      		clrb	a
 318 00af 98 00                   		mov	[sp], a
 319 00b1 51 80                   		mov	a, #-128
 320 00b3 98 02                   		mov	[sp+2], a
 321 00b5 FC 00 00 00             		call	!!%code(_writeByteLcd)
 322                             	.LVL32:
 134:../src/lcd.c  **** 	delayNoInt(40);					// Start timer with 40 usec delay
 323                             		.loc 1 134 0
 324 00b9 30 28 00                		movw	ax, #40
 325 00bc B8 00                   		movw	[sp], ax
 326 00be FC 00 00 00             		call	!!%code(_delayNoInt)
 327                             	.LVL33:
 135:../src/lcd.c  **** 
 136:../src/lcd.c  **** 	writeByteLcd(0U, CURSOR_MODE_INC);
 328                             		.loc 1 136 0
 329 00c2 F1                      		clrb	a
 330 00c3 98 00                   		mov	[sp], a
 331 00c5 51 06                   		mov	a, #6
 332 00c7 98 02                   		mov	[sp+2], a
 333 00c9 FC 00 00 00             		call	!!%code(_writeByteLcd)
 334                             	.LVL34:
 137:../src/lcd.c  **** 	delayNoInt(40);
 335                             		.loc 1 137 0
 336 00cd 30 28 00                		movw	ax, #40
 337 00d0 B8 00                   		movw	[sp], ax
 338 00d2 FC 00 00 00             		call	!!%code(_delayNoInt)
 339                             	.LVL35:
 138:../src/lcd.c  **** 
 139:../src/lcd.c  **** }
 340                             		.loc 1 139 0
 341 00d6 10 04                   		addw	sp, #4
 342 00d8 D7                      		ret
 343                             	.LFE4:
 345                             		.section	.text.testLCDConnections,"ax",@progbits
 346                             		.global	_testLCDConnections
 348                             	_testLCDConnections:
 349                             	.LFB5:
 140:../src/lcd.c  **** 
 141:../src/lcd.c  **** void testLCDConnections(void)
 142:../src/lcd.c  **** {
 350                             		.loc 1 142 0
 143:../src/lcd.c  ****  P7 &= 0x80; // All low
 351                             		.loc 1 143 0
 352 0000 8F 07 FF                		mov	a, !-249
 353 0003 5C 80                   		and	a, #-128
 354 0005 9F 07 FF                		mov	!-249, a
 144:../src/lcd.c  ****  NOP(); // Put a breakpoint here
 355                             		.loc 1 144 0
 356                             	 ; 144 "../src/lcd.c" 1
 357 0008 00                      		nop
 358                             	 ; 0 "" 2
 145:../src/lcd.c  ****  // and step (F6) from here
 146:../src/lcd.c  ****  LCD_RS = 1; // RS high
 359                             		.loc 1 146 0
 360 0009 71 60 07 FF             		set1	!-249.6
 147:../src/lcd.c  **** NOP();
 361                             		.loc 1 147 0
 362                             	 ; 147 "../src/lcd.c" 1
 363 000d 00                      		nop
 364                             	 ; 0 "" 2
 148:../src/lcd.c  ****  LCD_RS = 0; // RS low
 365                             		.loc 1 148 0
 366 000e 71 68 07 FF             		clr1	!-249.6
 149:../src/lcd.c  **** NOP();
 367                             		.loc 1 149 0
 368                             	 ; 149 "../src/lcd.c" 1
 369 0012 00                      		nop
 370                             	 ; 0 "" 2
 150:../src/lcd.c  ****  LCD_RW = 1; // RNW high
 371                             		.loc 1 150 0
 372 0013 71 50 07 FF             		set1	!-249.5
 151:../src/lcd.c  **** NOP();
 373                             		.loc 1 151 0
 374                             	 ; 151 "../src/lcd.c" 1
 375 0017 00                      		nop
 376                             	 ; 0 "" 2
 152:../src/lcd.c  ****  LCD_RW = 0; // RNW low
 377                             		.loc 1 152 0
 378 0018 71 58 07 FF             		clr1	!-249.5
 153:../src/lcd.c  **** NOP();
 379                             		.loc 1 153 0
 380                             	 ; 153 "../src/lcd.c" 1
 381 001c 00                      		nop
 382                             	 ; 0 "" 2
 154:../src/lcd.c  ****  LCD_E = 1; // E high
 383                             		.loc 1 154 0
 384 001d 71 40 07 FF             		set1	!-249.4
 155:../src/lcd.c  **** NOP();
 385                             		.loc 1 155 0
 386                             	 ; 155 "../src/lcd.c" 1
 387 0021 00                      		nop
 388                             	 ; 0 "" 2
 156:../src/lcd.c  ****  LCD_E = 0; // E low
 389                             		.loc 1 156 0
 390 0022 71 48 07 FF             		clr1	!-249.4
 157:../src/lcd.c  **** NOP();
 391                             		.loc 1 157 0
 392                             	 ; 157 "../src/lcd.c" 1
 393 0026 00                      		nop
 394                             	 ; 0 "" 2
 158:../src/lcd.c  ****  LCD_D0 = 1; // DB0/DB4 high
 395                             		.loc 1 158 0
 396 0027 71 00 07 FF             		set1	!-249.0
 159:../src/lcd.c  **** NOP();
 397                             		.loc 1 159 0
 398                             	 ; 159 "../src/lcd.c" 1
 399 002b 00                      		nop
 400                             	 ; 0 "" 2
 160:../src/lcd.c  ****  LCD_D1 = 1; // DB1/DB5 high
 401                             		.loc 1 160 0
 402 002c 71 10 07 FF             		set1	!-249.1
 161:../src/lcd.c  **** NOP();
 403                             		.loc 1 161 0
 404                             	 ; 161 "../src/lcd.c" 1
 405 0030 00                      		nop
 406                             	 ; 0 "" 2
 162:../src/lcd.c  ****  LCD_D2 = 1; // DB2/DB6 high
 407                             		.loc 1 162 0
 408 0031 71 20 07 FF             		set1	!-249.2
 163:../src/lcd.c  **** NOP();
 409                             		.loc 1 163 0
 410                             	 ; 163 "../src/lcd.c" 1
 411 0035 00                      		nop
 412                             	 ; 0 "" 2
 164:../src/lcd.c  ****  LCD_D3 = 1; // DB3/DB7 high
 413                             		.loc 1 164 0
 414 0036 71 30 07 FF             		set1	!-249.3
 165:../src/lcd.c  **** NOP();
 415                             		.loc 1 165 0
 416                             	 ; 165 "../src/lcd.c" 1
 417 003a 00                      		nop
 418                             	 ; 0 "" 2
 166:../src/lcd.c  ****  P7 &= 0x80; // Make all low
 419                             		.loc 1 166 0
 420 003b 8F 07 FF                		mov	a, !-249
 421 003e 5C 80                   		and	a, #-128
 422 0040 9F 07 FF                		mov	!-249, a
 167:../src/lcd.c  **** }
 423                             		.loc 1 167 0
 424 0043 D7                      		ret
 425                             	.LFE5:
 427                             		.comm	_uart1Status,2,2
 428                             		.comm	_uart1TxFlag,1,1
 429                             		.comm	_uart1TxCnt,2,2
 430                             		.comm	_uart1TxBuf,16,1
 431                             		.comm	_uart1RxOvrFlag,1,1
 432                             		.comm	_uart1RxErrFlag,1,1
 433                             		.comm	_uart1RxFlag,1,1
 434                             		.comm	_uart1RxCnt,2,2
 435                             		.comm	_uart1RxBuf,16,1
 518                             	.Letext0:
 519                             		.file 2 "../src/iodefine.h"
 520                             		.file 3 "../src/r_cg_macrodriver.h"
 521                             		.file 4 "../src/my_globals.c"
 522                             		.file 5 "../src/r_cg_timer.h"
