   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.section	.text.r_uart1_interrupt_receive,"ax",@progbits
  28                             		.global	_r_uart1_interrupt_receive
  30                             	_r_uart1_interrupt_receive:
  31                             	.LFB0:
  32                             		.file 1 "../src/r_cg_serial_user.c"
   1:../src/r_cg_serial_user.c **** /**************************************************************************************************
   2:../src/r_cg_serial_user.c **** * DISCLAIMER
   3:../src/r_cg_serial_user.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/r_cg_serial_user.c **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
   5:../src/r_cg_serial_user.c **** * applicable laws, including copyright laws. 
   6:../src/r_cg_serial_user.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIESREGARDING THIS SOFTWARE, WHETHER
   7:../src/r_cg_serial_user.c **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
   8:../src/r_cg_serial_user.c **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
   9:../src/r_cg_serial_user.c **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  10:../src/r_cg_serial_user.c **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  11:../src/r_cg_serial_user.c **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/r_cg_serial_user.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/r_cg_serial_user.c **** * of this software. By using this software, you agree to the additional terms and conditions found 
  14:../src/r_cg_serial_user.c **** * following link:
  15:../src/r_cg_serial_user.c **** * http://www.renesas.com/disclaimer
  16:../src/r_cg_serial_user.c **** *
  17:../src/r_cg_serial_user.c **** * Copyright (C) 2011, 2015 Renesas Electronics Corporation. All rights reserved.
  18:../src/r_cg_serial_user.c **** ***************************************************************************************************
  19:../src/r_cg_serial_user.c **** 
  20:../src/r_cg_serial_user.c **** /**************************************************************************************************
  21:../src/r_cg_serial_user.c **** * File Name    : r_cg_serial_user.c
  22:../src/r_cg_serial_user.c **** * Version      : CodeGenerator for RL78/G14 V2.04.02.01 [15 May 2015]
  23:../src/r_cg_serial_user.c **** * Device(s)    : R5F104LE
  24:../src/r_cg_serial_user.c **** * Tool-Chain   : GCCRL78
  25:../src/r_cg_serial_user.c **** * Description  : This file implements device driver for Serial module.
  26:../src/r_cg_serial_user.c **** * Creation Date: 15-02-16
  27:../src/r_cg_serial_user.c **** ***************************************************************************************************
  28:../src/r_cg_serial_user.c **** 
  29:../src/r_cg_serial_user.c **** /**************************************************************************************************
  30:../src/r_cg_serial_user.c **** Includes
  31:../src/r_cg_serial_user.c **** ***************************************************************************************************
  32:../src/r_cg_serial_user.c **** #include "r_cg_macrodriver.h"
  33:../src/r_cg_serial_user.c **** #include "r_cg_serial.h"
  34:../src/r_cg_serial_user.c **** /* Start user code for include. Do not edit comment generated here */
  35:../src/r_cg_serial_user.c **** /* End user code. Do not edit comment generated here */
  36:../src/r_cg_serial_user.c **** #include "r_cg_userdefine.h"
  37:../src/r_cg_serial_user.c **** 
  38:../src/r_cg_serial_user.c **** /**************************************************************************************************
  39:../src/r_cg_serial_user.c **** Global variables and functions
  40:../src/r_cg_serial_user.c **** ***************************************************************************************************
  41:../src/r_cg_serial_user.c **** extern volatile uint8_t * gp_uart1_tx_address;         /* uart1 send buffer address */
  42:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_tx_count;            /* uart1 send data number */
  43:../src/r_cg_serial_user.c **** extern volatile uint8_t * gp_uart1_rx_address;         /* uart1 receive buffer address */
  44:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_rx_count;            /* uart1 receive data number */
  45:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_rx_length;           /* uart1 receive data length */
  46:../src/r_cg_serial_user.c **** /* Start user code for global. Do not edit comment generated here */
  47:../src/r_cg_serial_user.c **** 
  48:../src/r_cg_serial_user.c **** /* End user code. Do not edit comment generated here */
  49:../src/r_cg_serial_user.c **** 
  50:../src/r_cg_serial_user.c **** /**************************************************************************************************
  51:../src/r_cg_serial_user.c **** * Function Name: r_uart1_interrupt_receive
  52:../src/r_cg_serial_user.c **** * Description  : This function is INTSR1 interrupt service routine.
  53:../src/r_cg_serial_user.c **** * Arguments    : None
  54:../src/r_cg_serial_user.c **** * Return Value : None
  55:../src/r_cg_serial_user.c **** ***************************************************************************************************
  56:../src/r_cg_serial_user.c **** void r_uart1_interrupt_receive(void)
  57:../src/r_cg_serial_user.c **** {
  33                             		.loc 1 57 0
  34                             		; start of function
  35                             		; push 14: ax bc de hl r8 r10 r12
  36 0000 61 CF                   		sel	rb0
  37 0002 C1                      		push	ax
  38                             	.LCFI0:
  39 0003 C3                      		push	bc
  40                             	.LCFI1:
  41 0004 C5                      		push	de
  42                             	.LCFI2:
  43 0005 C7                      		push	hl
  44                             	.LCFI3:
  45 0006 61 DF                   		sel	rb1
  46 0008 C1                      		push	ax ; r8
  47                             	.LCFI4:
  48 0009 C3                      		push	bc ; r10
  49                             	.LCFI5:
  50 000a C5                      		push	de ; r12
  51                             	.LCFI6:
  52 000b 61 CF                   		sel	rb0
  58:../src/r_cg_serial_user.c ****     uint8_t rx_data;
  59:../src/r_cg_serial_user.c ****     uint8_t err_type;
  60:../src/r_cg_serial_user.c ****     
  61:../src/r_cg_serial_user.c ****     err_type = (uint8_t)(SSR03 & 0x0007U);
  53                             		.loc 1 61 0
  54 000d AF 06 01                		movw	ax, !262
  55 0010 BD F0                   		movw	r8, ax
  56                             	.LVL0:
  57 0012 5A F0 07                		and	r8, #7
  62:../src/r_cg_serial_user.c ****     SIR03 = (uint16_t)err_type;
  58                             		.loc 1 62 0
  59 0015 8D F0                   		mov	a, r8
  60 0017 70                      		mov	x, a 
  61 0018 51 00                   		mov	a, #0
  62                             	.LVL1:
  63 001a BF 0E 01                		movw	!270, ax
  63:../src/r_cg_serial_user.c **** 
  64:../src/r_cg_serial_user.c ****     if (err_type != 0U)
  65:../src/r_cg_serial_user.c ****     {
  66:../src/r_cg_serial_user.c ****         r_uart1_callback_error(err_type);
  67:../src/r_cg_serial_user.c ****     }
  68:../src/r_cg_serial_user.c ****     
  69:../src/r_cg_serial_user.c ****     rx_data = RXD1;
  64                             		.loc 1 69 0
  65 001d 8F 46 FF                		mov	a, !-186
  66 0020 9D F2                   		mov	r10, a
  67                             	.LVL2:
  70:../src/r_cg_serial_user.c **** 
  71:../src/r_cg_serial_user.c ****     if (g_uart1_rx_length > g_uart1_rx_count)
  68                             		.loc 1 71 0
  69 0022 AF 00 00                		movw	ax, !_g_uart1_rx_length
  70 0025 42 00 00                		cmpw	ax, !_g_uart1_rx_count
  71 0028 61 E3                   		 skh
  72 002a EC 4F 00 00             		 br	!!.L1
  72:../src/r_cg_serial_user.c ****     {
  73:../src/r_cg_serial_user.c ****         *gp_uart1_rx_address = rx_data;
  73                             		.loc 1 73 0
  74 002e AF 00 00                		movw	ax, !_gp_uart1_rx_address
  75 0031 BD F0                   		movw	r8, ax
  76 0033 DA F0                   		movw	bc, r8
  77 0035 8D F2                   		mov	a, r10
  78 0037 48 00 00                		mov	[bc], a
  74:../src/r_cg_serial_user.c ****         gp_uart1_rx_address++;
  79                             		.loc 1 74 0
  80 003a A2 00 00                		incw	!_gp_uart1_rx_address
  75:../src/r_cg_serial_user.c ****         g_uart1_rx_count++;
  81                             		.loc 1 75 0
  82 003d A2 00 00                		incw	!_g_uart1_rx_count
  76:../src/r_cg_serial_user.c **** 
  77:../src/r_cg_serial_user.c ****         if (g_uart1_rx_length == g_uart1_rx_count)
  83                             		.loc 1 77 0
  84 0040 AF 00 00                		movw	ax, !_g_uart1_rx_length
  85 0043 42 00 00                		cmpw	ax, !_g_uart1_rx_count
  86 0046 61 E8                   		 skz
  87 0048 EC 4F 00 00             		 br	!!.L1
  88                             	.LBB10:
  89                             	.LBB11:
  78:../src/r_cg_serial_user.c ****         {
  79:../src/r_cg_serial_user.c ****             r_uart1_callback_receiveend();
  80:../src/r_cg_serial_user.c ****         }
  81:../src/r_cg_serial_user.c ****     }
  82:../src/r_cg_serial_user.c ****     else
  83:../src/r_cg_serial_user.c ****     {
  84:../src/r_cg_serial_user.c ****         r_uart1_callback_softwareoverrun(rx_data);
  85:../src/r_cg_serial_user.c ****     }
  86:../src/r_cg_serial_user.c **** }
  87:../src/r_cg_serial_user.c **** 
  88:../src/r_cg_serial_user.c **** /**************************************************************************************************
  89:../src/r_cg_serial_user.c **** * Function Name: r_uart1_interrupt_send
  90:../src/r_cg_serial_user.c **** * Description  : This function is INTST1 interrupt service routine.
  91:../src/r_cg_serial_user.c **** * Arguments    : None
  92:../src/r_cg_serial_user.c **** * Return Value : None
  93:../src/r_cg_serial_user.c **** ***************************************************************************************************
  94:../src/r_cg_serial_user.c **** void r_uart1_interrupt_send(void)
  95:../src/r_cg_serial_user.c **** {
  96:../src/r_cg_serial_user.c ****     if (g_uart1_tx_count > 0U)
  97:../src/r_cg_serial_user.c ****     {
  98:../src/r_cg_serial_user.c ****         TXD1 = *gp_uart1_tx_address;
  99:../src/r_cg_serial_user.c ****         gp_uart1_tx_address++;
 100:../src/r_cg_serial_user.c ****         g_uart1_tx_count--;
 101:../src/r_cg_serial_user.c ****     }
 102:../src/r_cg_serial_user.c ****     else
 103:../src/r_cg_serial_user.c ****     {
 104:../src/r_cg_serial_user.c ****         r_uart1_callback_sendend();
 105:../src/r_cg_serial_user.c ****     }
 106:../src/r_cg_serial_user.c **** }
 107:../src/r_cg_serial_user.c **** 
 108:../src/r_cg_serial_user.c **** /**************************************************************************************************
 109:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_receiveend
 110:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 finishes reception.
 111:../src/r_cg_serial_user.c **** * Arguments    : None
 112:../src/r_cg_serial_user.c **** * Return Value : None
 113:../src/r_cg_serial_user.c **** ***************************************************************************************************
 114:../src/r_cg_serial_user.c **** static void r_uart1_callback_receiveend(void)
 115:../src/r_cg_serial_user.c **** {
 116:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 117:../src/r_cg_serial_user.c **** 	uart1RxFlag = 1U;
  90                             		.loc 1 117 0
  91 004c E5 00 00                		oneb	!_uart1RxFlag
  92                             	.L1:
  93                             	.LBE11:
  94                             	.LBE10:
  86:../src/r_cg_serial_user.c **** 
  95                             		.loc 1 86 0
  96 004f 61 DF                   		sel	rb1
  97 0051 C4                      		pop	de ; r12
  98 0052 C2                      		pop	bc ; r10
  99 0053 C0                      		pop	ax ; r8
 100 0054 61 CF                   		sel	rb0
 101 0056 C6                      		pop	hl
 102 0057 C4                      		pop	de
 103 0058 C2                      		pop	bc
 104 0059 C0                      		pop	ax
 105 005a 61 FC                   		reti
 106                             	.LFE0:
 108                             		.section	.text.r_uart1_interrupt_send,"ax",@progbits
 109                             		.global	_r_uart1_interrupt_send
 111                             	_r_uart1_interrupt_send:
 112                             	.LFB1:
  95:../src/r_cg_serial_user.c ****     if (g_uart1_tx_count > 0U)
 113                             		.loc 1 95 0
 114                             		; start of function
 115                             		; push 12: ax bc de hl r8 r10
 116 0000 61 CF                   		sel	rb0
 117 0002 C1                      		push	ax
 118                             	.LCFI7:
 119 0003 C3                      		push	bc
 120                             	.LCFI8:
 121 0004 C5                      		push	de
 122                             	.LCFI9:
 123 0005 C7                      		push	hl
 124                             	.LCFI10:
 125 0006 61 DF                   		sel	rb1
 126 0008 C1                      		push	ax ; r8
 127                             	.LCFI11:
 128 0009 C3                      		push	bc ; r10
 129                             	.LCFI12:
 130 000a 61 CF                   		sel	rb0
  96:../src/r_cg_serial_user.c ****     {
 131                             		.loc 1 96 0
 132 000c AF 00 00                		movw	ax, !_g_uart1_tx_count
 133 000f 44 00 00                		cmpw	ax, #0
 134 0012 61 F8                   		 sknz
 135 0014 EC 2D 00 00             		 br	!!.L7
  98:../src/r_cg_serial_user.c ****         gp_uart1_tx_address++;
 136                             		.loc 1 98 0
 137 0018 AF 00 00                		movw	ax, !_gp_uart1_tx_address
 138 001b BD F0                   		movw	r8, ax
 139 001d FA F0                   		movw	hl, r8
 140 001f 8B                      		mov	a, [hl]
 141 0020 9F 44 FF                		mov	!-188, a
  99:../src/r_cg_serial_user.c ****         g_uart1_tx_count--;
 142                             		.loc 1 99 0
 143 0023 A2 00 00                		incw	!_gp_uart1_tx_address
 100:../src/r_cg_serial_user.c ****     }
 144                             		.loc 1 100 0
 145 0026 B2 00 00                		decw	!_g_uart1_tx_count
 146 0029 EC 30 00 00             		br	!!.L6
 147                             	.L7:
 148                             	.LBB12:
 149                             	.LBB13:
 118:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 119:../src/r_cg_serial_user.c **** }
 120:../src/r_cg_serial_user.c **** 
 121:../src/r_cg_serial_user.c **** /**************************************************************************************************
 122:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_softwareoverrun
 123:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 receives an overflow data.
 124:../src/r_cg_serial_user.c **** * Arguments    : rx_data -
 125:../src/r_cg_serial_user.c **** *                    receive data
 126:../src/r_cg_serial_user.c **** * Return Value : None
 127:../src/r_cg_serial_user.c **** ***************************************************************************************************
 128:../src/r_cg_serial_user.c **** static void r_uart1_callback_softwareoverrun(uint16_t rx_data)
 129:../src/r_cg_serial_user.c **** {
 130:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 131:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 132:../src/r_cg_serial_user.c **** }
 133:../src/r_cg_serial_user.c **** 
 134:../src/r_cg_serial_user.c **** /**************************************************************************************************
 135:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_sendend
 136:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 finishes transmission.
 137:../src/r_cg_serial_user.c **** * Arguments    : None
 138:../src/r_cg_serial_user.c **** * Return Value : None
 139:../src/r_cg_serial_user.c **** ***************************************************************************************************
 140:../src/r_cg_serial_user.c **** static void r_uart1_callback_sendend(void)
 141:../src/r_cg_serial_user.c **** {
 142:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 143:../src/r_cg_serial_user.c **** 	uart1TxFlag = 1U;
 150                             		.loc 1 143 0
 151 002d E5 00 00                		oneb	!_uart1TxFlag
 152                             	.L6:
 153                             	.LBE13:
 154                             	.LBE12:
 106:../src/r_cg_serial_user.c **** 
 155                             		.loc 1 106 0
 156 0030 61 DF                   		sel	rb1
 157 0032 C2                      		pop	bc ; r10
 158 0033 C0                      		pop	ax ; r8
 159 0034 61 CF                   		sel	rb0
 160 0036 C6                      		pop	hl
 161 0037 C4                      		pop	de
 162 0038 C2                      		pop	bc
 163 0039 C0                      		pop	ax
 164 003a 61 FC                   		reti
 165                             	.LFE1:
 167                             		.comm	_uart1Status,2,2
 168                             		.comm	_uart1TxFlag,1,1
 169                             		.comm	_uart1TxCnt,2,2
 170                             		.comm	_uart1TxBuf,16,1
 171                             		.comm	_uart1RxOvrFlag,1,1
 172                             		.comm	_uart1RxErrFlag,1,1
 173                             		.comm	_uart1RxFlag,1,1
 174                             		.comm	_uart1RxCnt,2,2
 175                             		.comm	_uart1RxBuf,16,1
 262                             	.Letext0:
 263                             		.file 2 "../src/r_cg_macrodriver.h"
 264                             		.file 3 "../src/my_globals.c"
