   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_uart1RxBuf,16,1
  28                             		.comm	_uart1RxCnt,2,2
  29                             		.comm	_uart1RxFlag,1,1
  30                             		.comm	_uart1RxErrFlag,1,1
  31                             		.comm	_uart1RxOvrFlag,1,1
  32                             		.comm	_uart1TxBuf,16,1
  33                             		.comm	_uart1TxCnt,2,2
  34                             		.comm	_uart1TxFlag,1,1
  35                             		.comm	_uart1Status,2,2
  36                             		.global	_r_uart1_interrupt_receive
  38                             	_r_uart1_interrupt_receive:
  39                             	.LFB0:
  40                             		.file 1 "../src/r_cg_serial_user.c"
   1:../src/r_cg_serial_user.c **** /**************************************************************************************************
   2:../src/r_cg_serial_user.c **** * DISCLAIMER
   3:../src/r_cg_serial_user.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/r_cg_serial_user.c **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
   5:../src/r_cg_serial_user.c **** * applicable laws, including copyright laws. 
   6:../src/r_cg_serial_user.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIESREGARDING THIS SOFTWARE, WHETHER
   7:../src/r_cg_serial_user.c **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
   8:../src/r_cg_serial_user.c **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
   9:../src/r_cg_serial_user.c **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  10:../src/r_cg_serial_user.c **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  11:../src/r_cg_serial_user.c **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/r_cg_serial_user.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/r_cg_serial_user.c **** * of this software. By using this software, you agree to the additional terms and conditions found 
  14:../src/r_cg_serial_user.c **** * following link:
  15:../src/r_cg_serial_user.c **** * http://www.renesas.com/disclaimer
  16:../src/r_cg_serial_user.c **** *
  17:../src/r_cg_serial_user.c **** * Copyright (C) 2011, 2015 Renesas Electronics Corporation. All rights reserved.
  18:../src/r_cg_serial_user.c **** ***************************************************************************************************
  19:../src/r_cg_serial_user.c **** 
  20:../src/r_cg_serial_user.c **** /**************************************************************************************************
  21:../src/r_cg_serial_user.c **** * File Name    : r_cg_serial_user.c
  22:../src/r_cg_serial_user.c **** * Version      : CodeGenerator for RL78/G14 V2.04.02.01 [15 May 2015]
  23:../src/r_cg_serial_user.c **** * Device(s)    : R5F104LE
  24:../src/r_cg_serial_user.c **** * Tool-Chain   : GCCRL78
  25:../src/r_cg_serial_user.c **** * Description  : This file implements device driver for Serial module.
  26:../src/r_cg_serial_user.c **** * Creation Date: 15-02-16
  27:../src/r_cg_serial_user.c **** ***************************************************************************************************
  28:../src/r_cg_serial_user.c **** 
  29:../src/r_cg_serial_user.c **** /**************************************************************************************************
  30:../src/r_cg_serial_user.c **** Includes
  31:../src/r_cg_serial_user.c **** ***************************************************************************************************
  32:../src/r_cg_serial_user.c **** #include "r_cg_macrodriver.h"
  33:../src/r_cg_serial_user.c **** #include "r_cg_serial.h"
  34:../src/r_cg_serial_user.c **** /* Start user code for include. Do not edit comment generated here */
  35:../src/r_cg_serial_user.c **** /* End user code. Do not edit comment generated here */
  36:../src/r_cg_serial_user.c **** #include "r_cg_userdefine.h"
  37:../src/r_cg_serial_user.c **** 
  38:../src/r_cg_serial_user.c **** /**************************************************************************************************
  39:../src/r_cg_serial_user.c **** Global variables and functions
  40:../src/r_cg_serial_user.c **** ***************************************************************************************************
  41:../src/r_cg_serial_user.c **** extern volatile uint8_t * gp_uart1_tx_address;         /* uart1 send buffer address */
  42:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_tx_count;            /* uart1 send data number */
  43:../src/r_cg_serial_user.c **** extern volatile uint8_t * gp_uart1_rx_address;         /* uart1 receive buffer address */
  44:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_rx_count;            /* uart1 receive data number */
  45:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_rx_length;           /* uart1 receive data length */
  46:../src/r_cg_serial_user.c **** /* Start user code for global. Do not edit comment generated here */
  47:../src/r_cg_serial_user.c **** 
  48:../src/r_cg_serial_user.c **** /* End user code. Do not edit comment generated here */
  49:../src/r_cg_serial_user.c **** 
  50:../src/r_cg_serial_user.c **** /**************************************************************************************************
  51:../src/r_cg_serial_user.c **** * Function Name: r_uart1_interrupt_receive
  52:../src/r_cg_serial_user.c **** * Description  : This function is INTSR1 interrupt service routine.
  53:../src/r_cg_serial_user.c **** * Arguments    : None
  54:../src/r_cg_serial_user.c **** * Return Value : None
  55:../src/r_cg_serial_user.c **** ***************************************************************************************************
  56:../src/r_cg_serial_user.c **** void r_uart1_interrupt_receive(void)
  57:../src/r_cg_serial_user.c **** {
  41                             		.loc 1 57 0
  42                             		; start of function
  43                             		; push 16: ax bc de hl r8 r10 r12 r14
  44                             		; locals: 2 bytes
  45                             		; outgoing: 2 bytes
  46 0000 61 CF                   		sel	rb0
  47 0002 C1                      		push	ax
  48                             	.LCFI0:
  49 0003 C3                      		push	bc
  50                             	.LCFI1:
  51 0004 C5                      		push	de
  52                             	.LCFI2:
  53 0005 C7                      		push	hl
  54                             	.LCFI3:
  55 0006 61 DF                   		sel	rb1
  56 0008 C1                      		push	ax ; r8
  57                             	.LCFI4:
  58 0009 C3                      		push	bc ; r10
  59                             	.LCFI5:
  60 000a C5                      		push	de ; r12
  61                             	.LCFI6:
  62 000b C7                      		push	hl ; r14
  63                             	.LCFI7:
  64 000c 61 CF                   		sel	rb0
  65 000e 20 04                   		subw	sp, #4
  66                             	.LCFI8:
  58:../src/r_cg_serial_user.c ****     uint8_t rx_data;
  59:../src/r_cg_serial_user.c ****     uint8_t err_type;
  60:../src/r_cg_serial_user.c ****     
  61:../src/r_cg_serial_user.c ****     err_type = (uint8_t)(SSR03 & 0x0007U);
  67                             		.loc 1 61 0
  68 0010 C9 F0 06 01             		movw	r8, #262
  69 0014 AD F0                   		movw	ax, r8
  70 0016 BD F2                   		movw	r10, ax
  71 0018 FA F2                   		movw	hl, r10
  72 001a AB                      		movw	ax, [hl]
  73 001b BD F0                   		movw	r8, ax
  74 001d 8D F0                   		mov	a, r8
  75 001f 5C 07                   		and	a, #7
  76 0021 98 03                   		mov	[sp+3], a
  62:../src/r_cg_serial_user.c ****     SIR03 = (uint16_t)err_type;
  77                             		.loc 1 62 0
  78 0023 C9 F2 0E 01             		movw	r10, #270
  79 0027 88 03                   		mov	a, [sp+3]
  80 0029 70                      		mov	x, a 
  81 002a 51 00                   		mov	a, #0
  82 002c BD F0                   		movw	r8, ax
  83 002e AD F2                   		movw	ax, r10
  84 0030 BD F4                   		movw	r12, ax
  85 0032 DA F4                   		movw	bc, r12
  86 0034 AD F0                   		movw	ax, r8
  87 0036 78 00 00                		movw	[bc], ax
  63:../src/r_cg_serial_user.c **** 
  64:../src/r_cg_serial_user.c ****     if (err_type != 0U)
  88                             		.loc 1 64 0
  89 0039 88 03                   		mov	a, [sp+3]
  90 003b D1                      		cmp0	a
  91 003c 61 F8                   		 sknz
  92 003e EC 4C 00 00             		 br	!!.L2
  65:../src/r_cg_serial_user.c ****     {
  66:../src/r_cg_serial_user.c ****         r_uart1_callback_error(err_type);
  93                             		.loc 1 66 0
  94 0042 88 03                   		mov	a, [sp+3]
  95 0044 9D F0                   		mov	r8, a
  96 0046 98 00                   		mov	[sp], a
  97 0048 FC 42 01 00             		call	!!%code(_r_uart1_callback_error)
  98                             	.L2:
  67:../src/r_cg_serial_user.c ****     }
  68:../src/r_cg_serial_user.c ****     
  69:../src/r_cg_serial_user.c ****     rx_data = RXD1;
  99                             		.loc 1 69 0
 100 004c C9 F0 46 FF             		movw	r8, #-186
 101 0050 AD F0                   		movw	ax, r8
 102 0052 BD F2                   		movw	r10, ax
 103 0054 FA F2                   		movw	hl, r10
 104 0056 8B                      		mov	a, [hl]
 105 0057 9D F0                   		mov	r8, a
 106 0059 98 02                   		mov	[sp+2], a
  70:../src/r_cg_serial_user.c **** 
  71:../src/r_cg_serial_user.c ****     if (g_uart1_rx_length > g_uart1_rx_count)
 107                             		.loc 1 71 0
 108 005b AF 00 00                		movw	ax, !_g_uart1_rx_length
 109 005e BD F2                   		movw	r10, ax
 110 0060 AF 00 00                		movw	ax, !_g_uart1_rx_count
 111 0063 BD F0                   		movw	r8, ax
 112 0065 AD F2                   		movw	ax, r10
 113 0067 46 F0                   		cmpw	ax, r8
 114 0069 61 E3                   		 skh
 115 006b EC B7 00 00             		 br	!!.L3
  72:../src/r_cg_serial_user.c ****     {
  73:../src/r_cg_serial_user.c ****         *gp_uart1_rx_address = rx_data;
 116                             		.loc 1 73 0
 117 006f AF 00 00                		movw	ax, !_gp_uart1_rx_address
 118 0072 BD F0                   		movw	r8, ax
 119 0074 88 02                   		mov	a, [sp+2]
 120 0076 9D F2                   		mov	r10, a
 121 0078 AD F0                   		movw	ax, r8
 122 007a BD F4                   		movw	r12, ax
 123 007c DA F4                   		movw	bc, r12
 124 007e 8D F2                   		mov	a, r10
 125 0080 48 00 00                		mov	[bc], a
  74:../src/r_cg_serial_user.c ****         gp_uart1_rx_address++;
 126                             		.loc 1 74 0
 127 0083 AF 00 00                		movw	ax, !_gp_uart1_rx_address
 128 0086 BD F0                   		movw	r8, ax
 129 0088 A6 F0                   		incw	r8
 130 008a AD F0                   		movw	ax, r8
 131 008c BF 00 00                		movw	!_gp_uart1_rx_address, ax
  75:../src/r_cg_serial_user.c ****         g_uart1_rx_count++;
 132                             		.loc 1 75 0
 133 008f AF 00 00                		movw	ax, !_g_uart1_rx_count
 134 0092 BD F0                   		movw	r8, ax
 135 0094 A6 F0                   		incw	r8
 136 0096 AD F0                   		movw	ax, r8
 137 0098 BF 00 00                		movw	!_g_uart1_rx_count, ax
  76:../src/r_cg_serial_user.c **** 
  77:../src/r_cg_serial_user.c ****         if (g_uart1_rx_length == g_uart1_rx_count)
 138                             		.loc 1 77 0
 139 009b AF 00 00                		movw	ax, !_g_uart1_rx_length
 140 009e BD F2                   		movw	r10, ax
 141 00a0 AF 00 00                		movw	ax, !_g_uart1_rx_count
 142 00a3 BD F0                   		movw	r8, ax
 143 00a5 AD F2                   		movw	ax, r10
 144 00a7 46 F0                   		cmpw	ax, r8
 145 00a9 61 E8                   		 skz
 146 00ab EC C4 00 00             		 br	!!.L1
  78:../src/r_cg_serial_user.c ****         {
  79:../src/r_cg_serial_user.c ****             r_uart1_callback_receiveend();
 147                             		.loc 1 79 0
 148 00af FC 39 01 00             		call	!!%code(_r_uart1_callback_receiveend)
 149 00b3 EC C4 00 00             		br	!!.L1
 150                             	.L3:
  80:../src/r_cg_serial_user.c ****         }
  81:../src/r_cg_serial_user.c ****     }
  82:../src/r_cg_serial_user.c ****     else
  83:../src/r_cg_serial_user.c ****     {
  84:../src/r_cg_serial_user.c ****         r_uart1_callback_softwareoverrun(rx_data);
 151                             		.loc 1 84 0
 152 00b7 88 02                   		mov	a, [sp+2]
 153 00b9 70                      		mov	x, a 
 154 00ba 51 00                   		mov	a, #0
 155 00bc BD F0                   		movw	r8, ax
 156 00be B8 00                   		movw	[sp], ax
 157 00c0 FC 3D 01 00             		call	!!%code(_r_uart1_callback_softwareoverrun)
 158                             	.L1:
  85:../src/r_cg_serial_user.c ****     }
  86:../src/r_cg_serial_user.c **** }
 159                             		.loc 1 86 0
 160 00c4 10 04                   		addw	sp, #4
 161 00c6 61 DF                   		sel	rb1
 162 00c8 C6                      		pop	hl ; r14
 163 00c9 C4                      		pop	de ; r12
 164 00ca C2                      		pop	bc ; r10
 165 00cb C0                      		pop	ax ; r8
 166 00cc 61 CF                   		sel	rb0
 167 00ce C6                      		pop	hl
 168 00cf C4                      		pop	de
 169 00d0 C2                      		pop	bc
 170 00d1 C0                      		pop	ax
 171 00d2 61 FC                   		reti
 172                             	.LFE0:
 174                             		.global	_r_uart1_interrupt_send
 176                             	_r_uart1_interrupt_send:
 177                             	.LFB1:
  87:../src/r_cg_serial_user.c **** 
  88:../src/r_cg_serial_user.c **** /**************************************************************************************************
  89:../src/r_cg_serial_user.c **** * Function Name: r_uart1_interrupt_send
  90:../src/r_cg_serial_user.c **** * Description  : This function is INTST1 interrupt service routine.
  91:../src/r_cg_serial_user.c **** * Arguments    : None
  92:../src/r_cg_serial_user.c **** * Return Value : None
  93:../src/r_cg_serial_user.c **** ***************************************************************************************************
  94:../src/r_cg_serial_user.c **** void r_uart1_interrupt_send(void)
  95:../src/r_cg_serial_user.c **** {
 178                             		.loc 1 95 0
 179                             		; start of function
 180                             		; push 16: ax bc de hl r8 r10 r12 r14
 181 00d4 61 CF                   		sel	rb0
 182 00d6 C1                      		push	ax
 183                             	.LCFI9:
 184 00d7 C3                      		push	bc
 185                             	.LCFI10:
 186 00d8 C5                      		push	de
 187                             	.LCFI11:
 188 00d9 C7                      		push	hl
 189                             	.LCFI12:
 190 00da 61 DF                   		sel	rb1
 191 00dc C1                      		push	ax ; r8
 192                             	.LCFI13:
 193 00dd C3                      		push	bc ; r10
 194                             	.LCFI14:
 195 00de C5                      		push	de ; r12
 196                             	.LCFI15:
 197 00df C7                      		push	hl ; r14
 198                             	.LCFI16:
 199 00e0 61 CF                   		sel	rb0
  96:../src/r_cg_serial_user.c ****     if (g_uart1_tx_count > 0U)
 200                             		.loc 1 96 0
 201 00e2 AF 00 00                		movw	ax, !_g_uart1_tx_count
 202 00e5 BD F0                   		movw	r8, ax
 203 00e7 44 00 00                		cmpw	ax, #0
 204 00ea 61 F8                   		 sknz
 205 00ec EC 27 01 00             		 br	!!.L7
  97:../src/r_cg_serial_user.c ****     {
  98:../src/r_cg_serial_user.c ****         TXD1 = *gp_uart1_tx_address;
 206                             		.loc 1 98 0
 207 00f0 C9 F2 44 FF             		movw	r10, #-188
 208 00f4 AF 00 00                		movw	ax, !_gp_uart1_tx_address
 209 00f7 BD F0                   		movw	r8, ax
 210 00f9 BD F4                   		movw	r12, ax
 211 00fb FA F4                   		movw	hl, r12
 212 00fd 8B                      		mov	a, [hl]
 213 00fe 9D F0                   		mov	r8, a
 214 0100 AD F2                   		movw	ax, r10
 215 0102 BD F4                   		movw	r12, ax
 216 0104 DA F4                   		movw	bc, r12
 217 0106 8D F0                   		mov	a, r8
 218 0108 48 00 00                		mov	[bc], a
  99:../src/r_cg_serial_user.c ****         gp_uart1_tx_address++;
 219                             		.loc 1 99 0
 220 010b AF 00 00                		movw	ax, !_gp_uart1_tx_address
 221 010e BD F0                   		movw	r8, ax
 222 0110 A6 F0                   		incw	r8
 223 0112 AD F0                   		movw	ax, r8
 224 0114 BF 00 00                		movw	!_gp_uart1_tx_address, ax
 100:../src/r_cg_serial_user.c ****         g_uart1_tx_count--;
 225                             		.loc 1 100 0
 226 0117 AF 00 00                		movw	ax, !_g_uart1_tx_count
 227 011a BD F0                   		movw	r8, ax
 228 011c B6 F0                   		decw	r8
 229 011e AD F0                   		movw	ax, r8
 230 0120 BF 00 00                		movw	!_g_uart1_tx_count, ax
 231 0123 EC 2B 01 00             		br	!!.L6
 232                             	.L7:
 101:../src/r_cg_serial_user.c ****     }
 102:../src/r_cg_serial_user.c ****     else
 103:../src/r_cg_serial_user.c ****     {
 104:../src/r_cg_serial_user.c ****         r_uart1_callback_sendend();
 233                             		.loc 1 104 0
 234 0127 FC 3E 01 00             		call	!!%code(_r_uart1_callback_sendend)
 235                             	.L6:
 105:../src/r_cg_serial_user.c ****     }
 106:../src/r_cg_serial_user.c **** }
 236                             		.loc 1 106 0
 237 012b 61 DF                   		sel	rb1
 238 012d C6                      		pop	hl ; r14
 239 012e C4                      		pop	de ; r12
 240 012f C2                      		pop	bc ; r10
 241 0130 C0                      		pop	ax ; r8
 242 0131 61 CF                   		sel	rb0
 243 0133 C6                      		pop	hl
 244 0134 C4                      		pop	de
 245 0135 C2                      		pop	bc
 246 0136 C0                      		pop	ax
 247 0137 61 FC                   		reti
 248                             	.LFE1:
 251                             	_r_uart1_callback_receiveend:
 252                             	.LFB2:
 107:../src/r_cg_serial_user.c **** 
 108:../src/r_cg_serial_user.c **** /**************************************************************************************************
 109:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_receiveend
 110:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 finishes reception.
 111:../src/r_cg_serial_user.c **** * Arguments    : None
 112:../src/r_cg_serial_user.c **** * Return Value : None
 113:../src/r_cg_serial_user.c **** ***************************************************************************************************
 114:../src/r_cg_serial_user.c **** static void r_uart1_callback_receiveend(void)
 115:../src/r_cg_serial_user.c **** {
 253                             		.loc 1 115 0
 116:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 117:../src/r_cg_serial_user.c **** 	uart1RxFlag = 1U;
 254                             		.loc 1 117 0
 255 0139 E5 00 00                		oneb	!_uart1RxFlag
 118:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 119:../src/r_cg_serial_user.c **** }
 256                             		.loc 1 119 0
 257 013c D7                      		ret
 258                             	.LFE2:
 261                             	_r_uart1_callback_softwareoverrun:
 262                             	.LFB3:
 120:../src/r_cg_serial_user.c **** 
 121:../src/r_cg_serial_user.c **** /**************************************************************************************************
 122:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_softwareoverrun
 123:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 receives an overflow data.
 124:../src/r_cg_serial_user.c **** * Arguments    : rx_data -
 125:../src/r_cg_serial_user.c **** *                    receive data
 126:../src/r_cg_serial_user.c **** * Return Value : None
 127:../src/r_cg_serial_user.c **** ***************************************************************************************************
 128:../src/r_cg_serial_user.c **** static void r_uart1_callback_softwareoverrun(uint16_t rx_data)
 129:../src/r_cg_serial_user.c **** {
 263                             		.loc 1 129 0
 130:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 131:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 132:../src/r_cg_serial_user.c **** }
 264                             		.loc 1 132 0
 265 013d D7                      		ret
 266                             	.LFE3:
 269                             	_r_uart1_callback_sendend:
 270                             	.LFB4:
 133:../src/r_cg_serial_user.c **** 
 134:../src/r_cg_serial_user.c **** /**************************************************************************************************
 135:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_sendend
 136:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 finishes transmission.
 137:../src/r_cg_serial_user.c **** * Arguments    : None
 138:../src/r_cg_serial_user.c **** * Return Value : None
 139:../src/r_cg_serial_user.c **** ***************************************************************************************************
 140:../src/r_cg_serial_user.c **** static void r_uart1_callback_sendend(void)
 141:../src/r_cg_serial_user.c **** {
 271                             		.loc 1 141 0
 142:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 143:../src/r_cg_serial_user.c **** 	uart1TxFlag = 1U;
 272                             		.loc 1 143 0
 273 013e E5 00 00                		oneb	!_uart1TxFlag
 144:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 145:../src/r_cg_serial_user.c **** }
 274                             		.loc 1 145 0
 275 0141 D7                      		ret
 276                             	.LFE4:
 279                             	_r_uart1_callback_error:
 280                             	.LFB5:
 146:../src/r_cg_serial_user.c **** 
 147:../src/r_cg_serial_user.c **** /**************************************************************************************************
 148:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_error
 149:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 reception error occurs.
 150:../src/r_cg_serial_user.c **** * Arguments    : err_type -
 151:../src/r_cg_serial_user.c **** *                    error type value
 152:../src/r_cg_serial_user.c **** * Return Value : None
 153:../src/r_cg_serial_user.c **** ***************************************************************************************************
 154:../src/r_cg_serial_user.c **** static void r_uart1_callback_error(uint8_t err_type)
 155:../src/r_cg_serial_user.c **** {
 281                             		.loc 1 155 0
 156:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 157:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 158:../src/r_cg_serial_user.c **** }
 282                             		.loc 1 158 0
 283 0142 D7                      		ret
 284                             	.LFE5:
 420                             	.Letext0:
 421                             		.file 2 "../src/r_cg_macrodriver.h"
 422                             		.file 3 "../src/my_globals.c"
