   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.comm	_uart1RxBuf,16,1
  28                             		.comm	_uart1RxCnt,2,2
  29                             		.comm	_uart1RxFlag,1,1
  30                             		.comm	_uart1RxErrFlag,1,1
  31                             		.comm	_uart1RxOvrFlag,1,1
  32                             		.comm	_uart1TxBuf,16,1
  33                             		.comm	_uart1TxCnt,2,2
  34                             		.comm	_uart1TxFlag,1,1
  35                             		.comm	_uart1Status,2,2
  36                             		.global	_testMode
  37                             	.bss
  38                             		.balign 2
  41                             	_testMode:
  42 0000 00 00                   		.zero	2
  43                             		.global	_normalMode
  44                             	.data
  45                             		.balign 2
  48                             	_normalMode:
  49 0000 01 00                   		.short	1
  50                             		.comm	_myBuffer,40,1
  51                             		.global	_myCounter
  52                             	.bss
  53                             		.balign 2
  56                             	_myCounter:
  57 0002 00 00                   		.zero	2
  58                             		.global	_welcome
  59                             	.data
  60                             		.balign 2
  63                             	_welcome:
  64 0002 01 00                   		.short	1
  65                             	.text
  66                             		.global	_main
  68                             	_main:
  69                             	.LFB0:
  70                             		.file 1 "../src/r_main.c"
   1:../src/r_main.c **** /**************************************************************************************************
   2:../src/r_main.c ****  * DISCLAIMER
   3:../src/r_main.c ****  * This software is supplied by Renesas Electronics Corporation and is only intended for use with R
   4:../src/r_main.c ****  * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is p
   5:../src/r_main.c ****  * applicable laws, including copyright laws.
   6:../src/r_main.c ****  * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIESREGARDING THIS SOFTWARE, WHETHE
   7:../src/r_main.c ****  * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICUL
   8:../src/r_main.c ****  * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED 
   9:../src/r_main.c ****  * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE
  10:../src/r_main.c ****  * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, 
  11:../src/r_main.c ****  * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/r_main.c ****  * Renesas reserves the right, without notice, to make changes to this software and to discontinue 
  13:../src/r_main.c ****  * of this software. By using this software, you agree to the additional terms and conditions found
  14:../src/r_main.c ****  * following link:
  15:../src/r_main.c ****  * http://www.renesas.com/disclaimer
  16:../src/r_main.c ****  *
  17:../src/r_main.c ****  * Copyright (C) 2011, 2015 Renesas Electronics Corporation. All rights reserved.
  18:../src/r_main.c ****  **************************************************************************************************
  19:../src/r_main.c **** 
  20:../src/r_main.c **** /**************************************************************************************************
  21:../src/r_main.c ****  * File Name    : r_main.c
  22:../src/r_main.c ****  * Version      : CodeGenerator for RL78/G14 V2.04.02.01 [15 May 2015]
  23:../src/r_main.c ****  * Device(s)    : R5F104LE
  24:../src/r_main.c ****  * Tool-Chain   : GCCRL78
  25:../src/r_main.c ****  * Description  : This file implements main function.
  26:../src/r_main.c ****  * Creation Date: 15-02-16
  27:../src/r_main.c ****  **************************************************************************************************
  28:../src/r_main.c **** 
  29:../src/r_main.c **** /**************************************************************************************************
  30:../src/r_main.c **** Includes
  31:../src/r_main.c ****  **************************************************************************************************
  32:../src/r_main.c **** #include "r_cg_macrodriver.h"
  33:../src/r_main.c **** #include "r_cg_cgc.h"
  34:../src/r_main.c **** #include "r_cg_port.h"
  35:../src/r_main.c **** #include "r_cg_serial.h"
  36:../src/r_main.c **** #include "r_cg_timer.h"
  37:../src/r_main.c **** #include "lcd.h"
  38:../src/r_main.c **** /* Start user code for include. Do not edit comment generated here */
  39:../src/r_main.c **** 
  40:../src/r_main.c **** /* End user code. Do not edit comment generated here */
  41:../src/r_main.c **** #include "r_cg_userdefine.h"
  42:../src/r_main.c **** 
  43:../src/r_main.c **** /**************************************************************************************************
  44:../src/r_main.c **** Global variables and functions
  45:../src/r_main.c ****  **************************************************************************************************
  46:../src/r_main.c **** /* Start user code for global. Do not edit comment generated here */
  47:../src/r_main.c **** 
  48:../src/r_main.c **** 
  49:../src/r_main.c **** extern uint8_t uart1RxBuf[RX_BUF_LEN];				// UART1 receive buffer
  50:../src/r_main.c **** extern uint16_t uart1RxCnt;						// UART1 receive counter
  51:../src/r_main.c **** extern uint8_t uart1RxFlag;						// UART1 receive flag
  52:../src/r_main.c **** extern uint8_t uart1RxErrFlag; 					// UART1 Receive Error Flag
  53:../src/r_main.c **** extern uint8_t uart1RxOvrFlag; 					// UART1 Receive Overrun Flag
  54:../src/r_main.c **** 
  55:../src/r_main.c **** extern uint8_t uart1TxBuf[TX_BUF_LEN];				// UART1 Transmit buffer
  56:../src/r_main.c **** extern uint16_t uart1TxCnt;						// UART1 Transmit counter
  57:../src/r_main.c **** extern uint8_t uart1TxFlag;						// UART1 Transmit flag
  58:../src/r_main.c **** 
  59:../src/r_main.c **** extern MD_STATUS uart1Status;
  60:../src/r_main.c **** 
  61:../src/r_main.c **** extern uint8_t timer_interrupt;
  62:../src/r_main.c **** 
  63:../src/r_main.c **** int testMode = 0;
  64:../src/r_main.c **** int normalMode = 1;
  65:../src/r_main.c **** char myBuffer[40];
  66:../src/r_main.c **** int myCounter = 0;
  67:../src/r_main.c **** int welcome = 1;
  68:../src/r_main.c **** 
  69:../src/r_main.c **** /* End user code. Do not edit comment generated here */
  70:../src/r_main.c **** void R_MAIN_UserInit(void);
  71:../src/r_main.c **** void MSG_Welcome(void);
  72:../src/r_main.c **** void letsWait(int t);
  73:../src/r_main.c **** 
  74:../src/r_main.c **** 
  75:../src/r_main.c **** /**************************************************************************************************
  76:../src/r_main.c ****  * Function Name: main
  77:../src/r_main.c ****  * Description  : This function implements main function.
  78:../src/r_main.c ****  * Arguments    : None
  79:../src/r_main.c ****  * Return Value : None
  80:../src/r_main.c ****  **************************************************************************************************
  81:../src/r_main.c **** void main(void)
  82:../src/r_main.c **** {
  71                             		.loc 1 82 0
  72                             		; start of function
  73                             		; locals: 12 bytes
  74                             		; outgoing: 4 bytes
  75 0000 20 10                   		subw	sp, #16
  76                             	.LCFI0:
  83:../src/r_main.c **** 	R_MAIN_UserInit();
  77                             		.loc 1 83 0
  78 0002 FC 00 00 00             		call	!!%code(_R_MAIN_UserInit)
  84:../src/r_main.c **** 	/* Start user code. Do not edit comment generated here */
  85:../src/r_main.c **** 	uart1RxBuf[0] = 'r';
  79                             		.loc 1 85 0
  80 0006 51 72                   		mov	a, #114
  81 0008 9F 00 00                		mov	!_uart1RxBuf, a
  86:../src/r_main.c **** 	uart1Status = R_UART1_Receive(&uart1RxBuf[0],1); // Prime UART2 Rx
  82                             		.loc 1 86 0
  83 000b 30 00 00                		movw	ax, #_uart1RxBuf
  84 000e B8 00                   		movw	[sp], ax
  85 0010 E6                      		onew	ax
  86 0011 B8 02                   		movw	[sp+2], ax
  87 0013 FC 00 00 00             		call	!!%code(_R_UART1_Receive)
  88 0017 AD F0                   		movw	ax, r8
  89 0019 BF 00 00                		movw	!_uart1Status, ax
  90                             	.L15:
  87:../src/r_main.c **** 
  88:../src/r_main.c **** 	while (1U)
  89:../src/r_main.c **** 	{
  90:../src/r_main.c **** 		/*
  91:../src/r_main.c **** 		if(welcome)
  92:../src/r_main.c **** 		{
  93:../src/r_main.c **** 			MSG_Welcome();
  94:../src/r_main.c **** 			initLcd();
  95:../src/r_main.c **** 		}
  96:../src/r_main.c **** 		 */
  97:../src/r_main.c **** 		if (uart1RxFlag)
  91                             		.loc 1 97 0
  92 001c 8F 00 00                		mov	a, !_uart1RxFlag
  93 001f 9D F0                   		mov	r8, a
  94 0021 D4 F0                   		cmp0	r8
  95 0023 61 F8                   		 sknz
  96 0025 EC ED 01 00             		 br	!!.L2
  98:../src/r_main.c **** 		{
  99:../src/r_main.c **** 			uart1RxFlag = 0U;
  97                             		.loc 1 99 0
  98 0029 F5 00 00                		clrb	!_uart1RxFlag
 100:../src/r_main.c **** 			welcome = 0;
  99                             		.loc 1 100 0
 100 002c F6                      		clrw	ax
 101 002d BF 00 00                		movw	!_welcome, ax
 101:../src/r_main.c **** 			if(uart1RxBuf[0] == 0x81)
 102                             		.loc 1 101 0
 103 0030 8F 00 00                		mov	a, !_uart1RxBuf
 104 0033 9D F0                   		mov	r8, a
 105 0035 4A F0 81                		cmp	r8, #-127
 106 0038 61 E8                   		 skz
 107 003a EC 60 00 00             		 br	!!.L3
 102:../src/r_main.c **** 			{
 103:../src/r_main.c **** 				testMode = 1;
 108                             		.loc 1 103 0
 109 003e E6                      		onew	ax
 110 003f BF 00 00                		movw	!_testMode, ax
 104:../src/r_main.c **** 				normalMode = 0;
 111                             		.loc 1 104 0
 112 0042 F6                      		clrw	ax
 113 0043 BF 00 00                		movw	!_normalMode, ax
 105:../src/r_main.c **** 				uart1TxBuf[0] = 0x81;
 114                             		.loc 1 105 0
 115 0046 51 81                   		mov	a, #-127
 116 0048 9F 00 00                		mov	!_uart1TxBuf, a
 106:../src/r_main.c **** 				uart1Status = R_UART1_Send(uart1TxBuf,1);
 117                             		.loc 1 106 0
 118 004b 30 00 00                		movw	ax, #_uart1TxBuf
 119 004e B8 00                   		movw	[sp], ax
 120 0050 E6                      		onew	ax
 121 0051 B8 02                   		movw	[sp+2], ax
 122 0053 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 123 0057 AD F0                   		movw	ax, r8
 124 0059 BF 00 00                		movw	!_uart1Status, ax
 125 005c EC DC 01 00             		br	!!.L4
 126                             	.L3:
 107:../src/r_main.c **** 			}
 108:../src/r_main.c **** 			else if(uart1RxBuf[0] == 0x80)
 127                             		.loc 1 108 0
 128 0060 8F 00 00                		mov	a, !_uart1RxBuf
 129 0063 9D F0                   		mov	r8, a
 130 0065 4A F0 80                		cmp	r8, #-128
 131 0068 61 E8                   		 skz
 132 006a EC 90 00 00             		 br	!!.L5
 109:../src/r_main.c **** 			{
 110:../src/r_main.c **** 				testMode = 0;
 133                             		.loc 1 110 0
 134 006e F6                      		clrw	ax
 135 006f BF 00 00                		movw	!_testMode, ax
 111:../src/r_main.c **** 				normalMode = 1;
 136                             		.loc 1 111 0
 137 0072 E6                      		onew	ax
 138 0073 BF 00 00                		movw	!_normalMode, ax
 112:../src/r_main.c **** 				uart1TxBuf[0] = 0x80;
 139                             		.loc 1 112 0
 140 0076 51 80                   		mov	a, #-128
 141 0078 9F 00 00                		mov	!_uart1TxBuf, a
 113:../src/r_main.c **** 				uart1Status = R_UART1_Send(uart1TxBuf,1);
 142                             		.loc 1 113 0
 143 007b 30 00 00                		movw	ax, #_uart1TxBuf
 144 007e B8 00                   		movw	[sp], ax
 145 0080 E6                      		onew	ax
 146 0081 B8 02                   		movw	[sp+2], ax
 147 0083 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 148 0087 AD F0                   		movw	ax, r8
 149 0089 BF 00 00                		movw	!_uart1Status, ax
 150 008c EC DC 01 00             		br	!!.L4
 151                             	.L5:
 114:../src/r_main.c **** 
 115:../src/r_main.c **** 
 116:../src/r_main.c **** 
 117:../src/r_main.c **** 			}
 118:../src/r_main.c **** 
 119:../src/r_main.c **** 			else if((myCounter < 40)&&(uart1RxBuf[0] < 0x7F))
 152                             		.loc 1 119 0
 153 0090 AF 00 00                		movw	ax, !_myCounter
 154 0093 BD F0                   		movw	r8, ax
 155 0095 44 27 00                		cmpw	ax, #39
 156 0098 71 FF                   		 xor1	CY, a.7
 157 009a 61 F3                   		 sknh
 158 009c EC CD 00 00             		 br	!!.L6
 159                             		.loc 1 119 0 is_stmt 0 discriminator 1
 160 00a0 8F 00 00                		mov	a, !_uart1RxBuf
 161 00a3 9D F0                   		mov	r8, a
 162 00a5 4A F0 7E                		cmp	r8, #126
 163 00a8 61 F3                   		 sknh
 164 00aa EC CD 00 00             		 br	!!.L6
 120:../src/r_main.c **** 			{
 121:../src/r_main.c **** 				myBuffer[myCounter] = uart1RxBuf[0];
 165                             		.loc 1 121 0 is_stmt 1
 166 00ae AF 00 00                		movw	ax, !_myCounter
 167 00b1 BD F0                   		movw	r8, ax
 168 00b3 8F 00 00                		mov	a, !_uart1RxBuf
 169 00b6 9D F2                   		mov	r10, a
 170 00b8 DA F0                   		movw	bc, r8
 171 00ba 48 00 00                		mov	_myBuffer[bc], a
 122:../src/r_main.c **** 				myCounter++;
 172                             		.loc 1 122 0
 173 00bd AF 00 00                		movw	ax, !_myCounter
 174 00c0 BD F0                   		movw	r8, ax
 175 00c2 A6 F0                   		incw	r8
 176 00c4 AD F0                   		movw	ax, r8
 177 00c6 BF 00 00                		movw	!_myCounter, ax
 178 00c9 EC DC 01 00             		br	!!.L4
 179                             	.L6:
 123:../src/r_main.c **** 			}
 124:../src/r_main.c **** 			else if((testMode == 1)&&(uart1RxBuf[0] == 0xF4))
 180                             		.loc 1 124 0
 181 00cd AF 00 00                		movw	ax, !_testMode
 182 00d0 BD F0                   		movw	r8, ax
 183 00d2 44 01 00                		cmpw	ax, #1
 184 00d5 61 E8                   		 skz
 185 00d7 EC DC 01 00             		 br	!!.L4
 186                             		.loc 1 124 0 is_stmt 0 discriminator 1
 187 00db 8F 00 00                		mov	a, !_uart1RxBuf
 188 00de 9D F0                   		mov	r8, a
 189 00e0 4A F0 F4                		cmp	r8, #-12
 190 00e3 61 E8                   		 skz
 191 00e5 EC DC 01 00             		 br	!!.L4
 192                             	.LBB2:
 125:../src/r_main.c **** 			{
 126:../src/r_main.c **** 				uart1TxBuf[0] = 0xF4;
 193                             		.loc 1 126 0 is_stmt 1
 194 00e9 51 F4                   		mov	a, #-12
 195 00eb 9F 00 00                		mov	!_uart1TxBuf, a
 127:../src/r_main.c **** 				uart1Status = R_UART1_Send(uart1TxBuf,1);
 196                             		.loc 1 127 0
 197 00ee 30 00 00                		movw	ax, #_uart1TxBuf
 198 00f1 B8 00                   		movw	[sp], ax
 199 00f3 E6                      		onew	ax
 200 00f4 B8 02                   		movw	[sp+2], ax
 201 00f6 FC 00 00 00             		call	!!%code(_R_UART1_Send)
 202 00fa AD F0                   		movw	ax, r8
 203 00fc BF 00 00                		movw	!_uart1Status, ax
 128:../src/r_main.c **** 				initLcd();
 204                             		.loc 1 128 0
 205 00ff FC 00 00 00             		call	!!%code(_initLcd)
 129:../src/r_main.c **** 				int display_x = 0;
 206                             		.loc 1 129 0
 207 0103 F6                      		clrw	ax
 208 0104 B8 0E                   		movw	[sp+14], ax
 130:../src/r_main.c **** 				int display_y = 0;
 209                             		.loc 1 130 0
 210 0106 F6                      		clrw	ax
 211 0107 B8 0C                   		movw	[sp+12], ax
 131:../src/r_main.c **** 				int display_scroll = 0;
 212                             		.loc 1 131 0
 213 0109 F6                      		clrw	ax
 214 010a B8 0A                   		movw	[sp+10], ax
 132:../src/r_main.c **** 				int display_length = 16;
 215                             		.loc 1 132 0
 216 010c 30 10 00                		movw	ax, #16
 217 010f B8 06                   		movw	[sp+6], ax
 133:../src/r_main.c **** 				int display_loop = 1;
 218                             		.loc 1 133 0
 219 0111 E6                      		onew	ax
 220 0112 B8 04                   		movw	[sp+4], ax
 134:../src/r_main.c **** 				int ashley;
 135:../src/r_main.c **** 
 136:../src/r_main.c **** 				if (myCounter > 15) {
 221                             		.loc 1 136 0
 222 0114 AF 00 00                		movw	ax, !_myCounter
 223 0117 BD F0                   		movw	r8, ax
 224 0119 44 0F 00                		cmpw	ax, #15
 225 011c 71 FF                   		 xor1	CY, a.7
 226 011e 61 E3                   		 skh
 227 0120 EC 32 01 00             		 br	!!.L7
 137:../src/r_main.c **** 					ashley = myCounter - 15;
 228                             		.loc 1 137 0
 229 0124 AF 00 00                		movw	ax, !_myCounter
 230 0127 BD F0                   		movw	r8, ax
 231 0129 04 F1 FF                		addw	ax, #-15
 232 012c B8 08                   		movw	[sp+8], ax
 233 012e EC 35 01 00             		br	!!.L8
 234                             	.L7:
 138:../src/r_main.c **** 				}
 139:../src/r_main.c **** 				else {
 140:../src/r_main.c **** 					ashley = 1;
 235                             		.loc 1 140 0
 236 0132 E6                      		onew	ax
 237 0133 B8 08                   		movw	[sp+8], ax
 238                             	.L8:
 141:../src/r_main.c **** 				}
 142:../src/r_main.c **** 
 143:../src/r_main.c **** 				for(display_y = 0 ; display_y < ashley ; display_y++)
 239                             		.loc 1 143 0
 240 0135 F6                      		clrw	ax
 241 0136 B8 0C                   		movw	[sp+12], ax
 242 0138 EC C5 01 00             		br	!!.L9
 243                             	.L13:
 144:../src/r_main.c **** 				{
 145:../src/r_main.c **** 					for (display_x = 0 ; display_x < myCounter ; display_x++)
 244                             		.loc 1 145 0
 245 013c F6                      		clrw	ax
 246 013d B8 0E                   		movw	[sp+14], ax
 247 013f EC 8A 01 00             		br	!!.L10
 248                             	.L12:
 146:../src/r_main.c **** 					{
 147:../src/r_main.c **** 						writeByteLcd(1U, myBuffer[(display_x+display_scroll)]);
 249                             		.loc 1 147 0
 250 0143 A8 0A                   		movw	ax, [sp+10]
 251 0145 16                      		movw	hl, ax
 252 0146 A8 0E                   		movw	ax, [sp+14]
 253 0148 07                      		addw	ax, hl
 254 0149 BD F0                   		movw	r8, ax
 255 014b 04 00 00                		addw	ax, #_myBuffer
 256 014e 16                      		movw	hl, ax
 257 014f 8B                      		mov	a, [hl]
 258 0150 9D F0                   		mov	r8, a
 259 0152 E1                      		oneb	a
 260 0153 98 00                   		mov	[sp], a
 261 0155 8D F0                   		mov	a, r8
 262 0157 98 02                   		mov	[sp+2], a
 263 0159 FC 00 00 00             		call	!!%code(_writeByteLcd)
 148:../src/r_main.c **** 						delayNoInt(3250);
 264                             		.loc 1 148 0
 265 015d 30 B2 0C                		movw	ax, #3250
 266 0160 B8 00                   		movw	[sp], ax
 267 0162 FC 00 00 00             		call	!!%code(_delayNoInt)
 149:../src/r_main.c **** 						if (display_x == 7){
 268                             		.loc 1 149 0
 269 0166 A8 0E                   		movw	ax, [sp+14]
 270 0168 44 07 00                		cmpw	ax, #7
 271 016b 61 E8                   		 skz
 272 016d EC 85 01 00             		 br	!!.L11
 150:../src/r_main.c **** 							writeByteLcd(0U, LCD_HOME_L2);
 273                             		.loc 1 150 0
 274 0171 F1                      		clrb	a
 275 0172 98 00                   		mov	[sp], a
 276 0174 51 C0                   		mov	a, #-64
 277 0176 98 02                   		mov	[sp+2], a
 278 0178 FC 00 00 00             		call	!!%code(_writeByteLcd)
 151:../src/r_main.c **** 							delayNoInt(100);
 279                             		.loc 1 151 0
 280 017c 30 64 00                		movw	ax, #100
 281 017f B8 00                   		movw	[sp], ax
 282 0181 FC 00 00 00             		call	!!%code(_delayNoInt)
 283                             	.L11:
 145:../src/r_main.c **** 					{
 284                             		.loc 1 145 0 discriminator 2
 285 0185 A8 0E                   		movw	ax, [sp+14]
 286 0187 A1                      		incw	ax
 287 0188 B8 0E                   		movw	[sp+14], ax
 288                             	.L10:
 145:../src/r_main.c **** 					{
 289                             		.loc 1 145 0 is_stmt 0 discriminator 1
 290 018a AF 00 00                		movw	ax, !_myCounter
 291 018d BD F0                   		movw	r8, ax
 292 018f A8 0E                   		movw	ax, [sp+14]
 293 0191 46 F0                   		cmpw	ax, r8
 294 0193 71 FF                   		 xor1	CY, a.7
 295 0195 71 77 F1                		 xor1	CY, r9.7
 296 0198 61 D8                   		 sknc
 297 019a EC 43 01 00             		 br	!!.L12
 152:../src/r_main.c **** 						}
 153:../src/r_main.c **** 					}
 154:../src/r_main.c **** 					display_scroll++;
 298                             		.loc 1 154 0 is_stmt 1 discriminator 2
 299 019e A8 0A                   		movw	ax, [sp+10]
 300 01a0 A1                      		incw	ax
 301 01a1 B8 0A                   		movw	[sp+10], ax
 155:../src/r_main.c **** 					writeByteLcd(0U, LCD_HOME_L1);
 302                             		.loc 1 155 0 discriminator 2
 303 01a3 F1                      		clrb	a
 304 01a4 98 00                   		mov	[sp], a
 305 01a6 51 80                   		mov	a, #-128
 306 01a8 98 02                   		mov	[sp+2], a
 307 01aa FC 00 00 00             		call	!!%code(_writeByteLcd)
 156:../src/r_main.c **** 					delayNoInt(100);
 308                             		.loc 1 156 0 discriminator 2
 309 01ae 30 64 00                		movw	ax, #100
 310 01b1 B8 00                   		movw	[sp], ax
 311 01b3 FC 00 00 00             		call	!!%code(_delayNoInt)
 157:../src/r_main.c **** 					letsWait(350);
 312                             		.loc 1 157 0 discriminator 2
 313 01b7 30 5E 01                		movw	ax, #350
 314 01ba B8 00                   		movw	[sp], ax
 315 01bc FC 00 00 00             		call	!!%code(_letsWait)
 143:../src/r_main.c **** 				{
 316                             		.loc 1 143 0 discriminator 2
 317 01c0 A8 0C                   		movw	ax, [sp+12]
 318 01c2 A1                      		incw	ax
 319 01c3 B8 0C                   		movw	[sp+12], ax
 320                             	.L9:
 143:../src/r_main.c **** 				{
 321                             		.loc 1 143 0 is_stmt 0 discriminator 1
 322 01c5 A8 08                   		movw	ax, [sp+8]
 323 01c7 BD F0                   		movw	r8, ax
 324 01c9 A8 0C                   		movw	ax, [sp+12]
 325 01cb 46 F0                   		cmpw	ax, r8
 326 01cd 71 FF                   		 xor1	CY, a.7
 327 01cf 71 77 F1                		 xor1	CY, r9.7
 328 01d2 61 D8                   		 sknc
 329 01d4 EC 3C 01 00             		 br	!!.L13
 158:../src/r_main.c **** 				}
 159:../src/r_main.c **** 				myCounter = 0;
 330                             		.loc 1 159 0 is_stmt 1
 331 01d8 F6                      		clrw	ax
 332 01d9 BF 00 00                		movw	!_myCounter, ax
 333                             	.L4:
 334                             	.LBE2:
 160:../src/r_main.c **** 			}
 161:../src/r_main.c **** 
 162:../src/r_main.c **** 			uart1Status = R_UART1_Receive(uart1RxBuf,1);			// Prime UART2 Rx
 335                             		.loc 1 162 0
 336 01dc 30 00 00                		movw	ax, #_uart1RxBuf
 337 01df B8 00                   		movw	[sp], ax
 338 01e1 E6                      		onew	ax
 339 01e2 B8 02                   		movw	[sp+2], ax
 340 01e4 FC 00 00 00             		call	!!%code(_R_UART1_Receive)
 341 01e8 AD F0                   		movw	ax, r8
 342 01ea BF 00 00                		movw	!_uart1Status, ax
 343                             	.L2:
 163:../src/r_main.c **** 		}
 164:../src/r_main.c **** 		//If a character has been transmitted
 165:../src/r_main.c **** 		if (uart1TxFlag)
 344                             		.loc 1 165 0
 345 01ed 8F 00 00                		mov	a, !_uart1TxFlag
 346 01f0 9D F0                   		mov	r8, a
 347 01f2 D4 F0                   		cmp0	r8
 348 01f4 61 F8                   		 sknz
 349 01f6 EC FD 01 00             		 br	!!.L14
 166:../src/r_main.c **** 		{
 167:../src/r_main.c **** 			uart1TxFlag = 0U; // clear tx flag
 350                             		.loc 1 167 0
 351 01fa F5 00 00                		clrb	!_uart1TxFlag
 352                             	.L14:
 168:../src/r_main.c **** 		}
 169:../src/r_main.c **** 	}
 353                             		.loc 1 169 0
 354 01fd EC 1C 00 00             		br	!!.L15
 355                             	.LFE0:
 357                             		.global	_R_MAIN_UserInit
 359                             	_R_MAIN_UserInit:
 360                             	.LFB1:
 170:../src/r_main.c **** 	/*
 171:../src/r_main.c **** 	/* End user code. Do not edit comment generated here */
 172:../src/r_main.c **** }
 173:../src/r_main.c **** 
 174:../src/r_main.c **** /**************************************************************************************************
 175:../src/r_main.c ****  * Function Name: R_MAIN_UserInit
 176:../src/r_main.c ****  * Description  : This function adds user code before implementing main function.
 177:../src/r_main.c ****  * Arguments    : None
 178:../src/r_main.c ****  * Return Value : None
 179:../src/r_main.c ****  **************************************************************************************************
 180:../src/r_main.c **** void R_MAIN_UserInit(void)
 181:../src/r_main.c **** {
 361                             		.loc 1 181 0
 362                             		; start of function
 363                             		; outgoing: 4 bytes
 364 0201 20 04                   		subw	sp, #4
 365                             	.LCFI1:
 182:../src/r_main.c **** 	/* Start user code. Do not edit comment generated here */
 183:../src/r_main.c **** 	EI();
 366                             		.loc 1 183 0
 367                             	 ; 183 "../src/r_main.c" 1
 368 0203 71 7A FA                		ei
 369                             	 ; 0 "" 2
 184:../src/r_main.c **** 	R_SAU0_Create();
 370                             		.loc 1 184 0
 371 0206 FC 00 00 00             		call	!!%code(_R_SAU0_Create)
 185:../src/r_main.c **** 	R_UART1_Create();
 372                             		.loc 1 185 0
 373 020a FC 00 00 00             		call	!!%code(_R_UART1_Create)
 186:../src/r_main.c **** 	R_UART1_Start();
 374                             		.loc 1 186 0
 375 020e FC 00 00 00             		call	!!%code(_R_UART1_Start)
 187:../src/r_main.c **** 
 188:../src/r_main.c **** 	R_TAU0_Create();
 376                             		.loc 1 188 0
 377 0212 FC 00 00 00             		call	!!%code(_R_TAU0_Create)
 189:../src/r_main.c **** 	R_TAU0_Channel0_Start();
 378                             		.loc 1 189 0
 379 0216 FC 00 00 00             		call	!!%code(_R_TAU0_Channel0_Start)
 190:../src/r_main.c **** 
 191:../src/r_main.c **** 	uart1RxFlag = 0U;
 380                             		.loc 1 191 0
 381 021a F5 00 00                		clrb	!_uart1RxFlag
 192:../src/r_main.c **** 	uart1TxFlag = 0U;
 382                             		.loc 1 192 0
 383 021d F5 00 00                		clrb	!_uart1TxFlag
 193:../src/r_main.c **** 	uart1TxBuf[0] = 0x80;
 384                             		.loc 1 193 0
 385 0220 51 80                   		mov	a, #-128
 386 0222 9F 00 00                		mov	!_uart1TxBuf, a
 194:../src/r_main.c **** 	uart1Status = R_UART1_Send(uart1TxBuf,1);
 387                             		.loc 1 194 0
 388 0225 30 00 00                		movw	ax, #_uart1TxBuf
 389 0228 B8 00                   		movw	[sp], ax
 390 022a E6                      		onew	ax
 391 022b B8 02                   		movw	[sp+2], ax
 392 022d FC 00 00 00             		call	!!%code(_R_UART1_Send)
 393 0231 AD F0                   		movw	ax, r8
 394 0233 BF 00 00                		movw	!_uart1Status, ax
 195:../src/r_main.c **** 	while(uart1TxFlag==0U)
 395                             		.loc 1 195 0
 396 0236 00                      		nop
 397                             	.L17:
 398                             		.loc 1 195 0 is_stmt 0 discriminator 1
 399 0237 8F 00 00                		mov	a, !_uart1TxFlag
 400 023a 9D F0                   		mov	r8, a
 401 023c D4 F0                   		cmp0	r8
 402 023e 61 F8                   		 sknz
 403 0240 EC 37 02 00             		 br	!!.L17
 196:../src/r_main.c **** 	{
 197:../src/r_main.c **** 	}
 198:../src/r_main.c **** 	uart1TxFlag = 0U; // clear tx flag
 404                             		.loc 1 198 0 is_stmt 1
 405 0244 F5 00 00                		clrb	!_uart1TxFlag
 199:../src/r_main.c **** 
 200:../src/r_main.c **** 	initLcd();
 406                             		.loc 1 200 0
 407 0247 FC 00 00 00             		call	!!%code(_initLcd)
 201:../src/r_main.c **** 	MSG_Welcome();
 408                             		.loc 1 201 0
 409 024b FC 00 00 00             		call	!!%code(_MSG_Welcome)
 202:../src/r_main.c **** 	initLcd();
 410                             		.loc 1 202 0
 411 024f FC 00 00 00             		call	!!%code(_initLcd)
 203:../src/r_main.c **** 
 204:../src/r_main.c **** 	/* End user code. Do not edit comment generated here */
 205:../src/r_main.c **** }
 412                             		.loc 1 205 0
 413 0253 10 04                   		addw	sp, #4
 414 0255 D7                      		ret
 415                             	.LFE1:
 417                             		.section	.rodata
 418                             	.LC0:
 419 0000 20 20 20 20 20 20 20 20 		.string	"                Heyns K 18552463"
 419      20 20 20 20 20 20 20 20 
 419      48 65 79 6E 73 20 4B 20 
 419      31 38 35 35 32 34 36 33 
 419      00 
 420                             	.text
 421                             		.global	_MSG_Welcome
 423                             	_MSG_Welcome:
 424                             	.LFB2:
 206:../src/r_main.c **** 
 207:../src/r_main.c **** /* Start user code for adding. Do not edit comment generated here */
 208:../src/r_main.c **** void MSG_Welcome(void)
 209:../src/r_main.c **** {
 425                             		.loc 1 209 0
 426                             		; start of function
 427                             		; locals: 42 bytes
 428                             		; outgoing: 6 bytes
 429 0256 20 30                   		subw	sp, #48
 430                             	.LCFI2:
 210:../src/r_main.c **** 	int scrollCnt = 0;
 431                             		.loc 1 210 0
 432 0258 F6                      		clrw	ax
 433 0259 B8 2E                   		movw	[sp+46], ax
 211:../src/r_main.c **** 	int j = 0;
 434                             		.loc 1 211 0
 435 025b F6                      		clrw	ax
 436 025c B8 2C                   		movw	[sp+44], ax
 212:../src/r_main.c **** 	int i = 0;
 437                             		.loc 1 212 0
 438 025e F6                      		clrw	ax
 439 025f B8 2A                   		movw	[sp+42], ax
 213:../src/r_main.c **** 
 214:../src/r_main.c **** 	char msg[] = {"                Heyns K 18552463"};
 440                             		.loc 1 214 0
 441 0261 AE F8                   		movw	ax, sp
 442 0263 BD F2                   		movw	r10, ax
 443 0265 04 07 00                		addw	ax, #7
 444 0268 BD F0                   		movw	r8, ax
 445 026a C9 F4 00 00             		movw	r12, #.LC0
 446 026e C9 F2 21 00             		movw	r10, #33
 447 0272 B8 00                   		movw	[sp], ax
 448 0274 AD F4                   		movw	ax, r12
 449 0276 B8 02                   		movw	[sp+2], ax
 450 0278 AD F2                   		movw	ax, r10
 451 027a B8 04                   		movw	[sp+4], ax
 452 027c FC 00 00 00             		call	!!%code(_memcpy)
 215:../src/r_main.c **** 
 216:../src/r_main.c **** 	int length = sizeof(msg)/sizeof(char);
 453                             		.loc 1 216 0
 454 0280 30 21 00                		movw	ax, #33
 455 0283 B8 28                   		movw	[sp+40], ax
 217:../src/r_main.c **** 
 218:../src/r_main.c **** 	for(i = 0 ; i < (length-16) ; i++)
 456                             		.loc 1 218 0
 457 0285 F6                      		clrw	ax
 458 0286 B8 2A                   		movw	[sp+42], ax
 459 0288 EC 1B 03 00             		br	!!.L19
 460                             	.L23:
 219:../src/r_main.c **** 	{
 220:../src/r_main.c **** 		for (j = 0 ; j < 16 ; j++)
 461                             		.loc 1 220 0
 462 028c F6                      		clrw	ax
 463 028d B8 2C                   		movw	[sp+44], ax
 464 028f EC E7 02 00             		br	!!.L20
 465                             	.L22:
 221:../src/r_main.c **** 		{
 222:../src/r_main.c **** 			writeByteLcd(1U, msg[(j+scrollCnt)]);
 466                             		.loc 1 222 0
 467 0293 A8 2E                   		movw	ax, [sp+46]
 468 0295 16                      		movw	hl, ax
 469 0296 A8 2C                   		movw	ax, [sp+44]
 470 0298 07                      		addw	ax, hl
 471 0299 BD F0                   		movw	r8, ax
 472 029b AE F8                   		movw	ax, sp
 473 029d BD F4                   		movw	r12, ax
 474 029f 04 07 00                		addw	ax, #7
 475 02a2 BD F2                   		movw	r10, ax
 476 02a4 06 F0                   		addw	ax, r8
 477 02a6 BD F0                   		movw	r8, ax
 478 02a8 BD F2                   		movw	r10, ax
 479 02aa FA F2                   		movw	hl, r10
 480 02ac 8B                      		mov	a, [hl]
 481 02ad 9D F0                   		mov	r8, a
 482 02af E1                      		oneb	a
 483 02b0 98 00                   		mov	[sp], a
 484 02b2 8D F0                   		mov	a, r8
 485 02b4 98 02                   		mov	[sp+2], a
 486 02b6 FC 00 00 00             		call	!!%code(_writeByteLcd)
 223:../src/r_main.c **** 			delayNoInt(100);
 487                             		.loc 1 223 0
 488 02ba 30 64 00                		movw	ax, #100
 489 02bd B8 00                   		movw	[sp], ax
 490 02bf FC 00 00 00             		call	!!%code(_delayNoInt)
 224:../src/r_main.c **** 			if (j == 7){
 491                             		.loc 1 224 0
 492 02c3 A8 2C                   		movw	ax, [sp+44]
 493 02c5 44 07 00                		cmpw	ax, #7
 494 02c8 61 E8                   		 skz
 495 02ca EC E2 02 00             		 br	!!.L21
 225:../src/r_main.c **** 				writeByteLcd(0U, LCD_HOME_L2);
 496                             		.loc 1 225 0
 497 02ce F1                      		clrb	a
 498 02cf 98 00                   		mov	[sp], a
 499 02d1 51 C0                   		mov	a, #-64
 500 02d3 98 02                   		mov	[sp+2], a
 501 02d5 FC 00 00 00             		call	!!%code(_writeByteLcd)
 226:../src/r_main.c **** 				delayNoInt(100);
 502                             		.loc 1 226 0
 503 02d9 30 64 00                		movw	ax, #100
 504 02dc B8 00                   		movw	[sp], ax
 505 02de FC 00 00 00             		call	!!%code(_delayNoInt)
 506                             	.L21:
 220:../src/r_main.c **** 		{
 507                             		.loc 1 220 0 discriminator 2
 508 02e2 A8 2C                   		movw	ax, [sp+44]
 509 02e4 A1                      		incw	ax
 510 02e5 B8 2C                   		movw	[sp+44], ax
 511                             	.L20:
 220:../src/r_main.c **** 		{
 512                             		.loc 1 220 0 is_stmt 0 discriminator 1
 513 02e7 A8 2C                   		movw	ax, [sp+44]
 514 02e9 44 0F 00                		cmpw	ax, #15
 515 02ec 71 FF                   		 xor1	CY, a.7
 516 02ee 61 E3                   		 skh
 517 02f0 EC 93 02 00             		 br	!!.L22
 227:../src/r_main.c **** 			}
 228:../src/r_main.c **** 		}
 229:../src/r_main.c **** 		scrollCnt++;
 518                             		.loc 1 229 0 is_stmt 1 discriminator 2
 519 02f4 A8 2E                   		movw	ax, [sp+46]
 520 02f6 A1                      		incw	ax
 521 02f7 B8 2E                   		movw	[sp+46], ax
 230:../src/r_main.c **** 		writeByteLcd(0U, LCD_HOME_L1);
 522                             		.loc 1 230 0 discriminator 2
 523 02f9 F1                      		clrb	a
 524 02fa 98 00                   		mov	[sp], a
 525 02fc 51 80                   		mov	a, #-128
 526 02fe 98 02                   		mov	[sp+2], a
 527 0300 FC 00 00 00             		call	!!%code(_writeByteLcd)
 231:../src/r_main.c **** 		delayNoInt(100);
 528                             		.loc 1 231 0 discriminator 2
 529 0304 30 64 00                		movw	ax, #100
 530 0307 B8 00                   		movw	[sp], ax
 531 0309 FC 00 00 00             		call	!!%code(_delayNoInt)
 232:../src/r_main.c **** 		letsWait(350);
 532                             		.loc 1 232 0 discriminator 2
 533 030d 30 5E 01                		movw	ax, #350
 534 0310 B8 00                   		movw	[sp], ax
 535 0312 FC 00 00 00             		call	!!%code(_letsWait)
 218:../src/r_main.c **** 	{
 536                             		.loc 1 218 0 discriminator 2
 537 0316 A8 2A                   		movw	ax, [sp+42]
 538 0318 A1                      		incw	ax
 539 0319 B8 2A                   		movw	[sp+42], ax
 540                             	.L19:
 218:../src/r_main.c **** 	{
 541                             		.loc 1 218 0 is_stmt 0 discriminator 1
 542 031b A8 28                   		movw	ax, [sp+40]
 543 031d 04 F0 FF                		addw	ax, #-16
 544 0320 BD F2                   		movw	r10, ax
 545 0322 A8 2A                   		movw	ax, [sp+42]
 546 0324 BD F0                   		movw	r8, ax
 547 0326 AD F2                   		movw	ax, r10
 548 0328 46 F0                   		cmpw	ax, r8
 549 032a 71 FF                   		 xor1	CY, a.7
 550 032c 71 77 F1                		 xor1	CY, r9.7
 551 032f 61 F3                   		 sknh
 552 0331 EC 8C 02 00             		 br	!!.L23
 233:../src/r_main.c **** 	}
 234:../src/r_main.c **** 	letsWait(500);
 553                             		.loc 1 234 0 is_stmt 1
 554 0335 30 F4 01                		movw	ax, #500
 555 0338 B8 00                   		movw	[sp], ax
 556 033a FC 00 00 00             		call	!!%code(_letsWait)
 235:../src/r_main.c **** }
 557                             		.loc 1 235 0
 558 033e 10 30                   		addw	sp, #48
 559 0340 D7                      		ret
 560                             	.LFE2:
 562                             		.global	_letsWait
 564                             	_letsWait:
 565                             	.LFB3:
 236:../src/r_main.c **** 
 237:../src/r_main.c **** 
 238:../src/r_main.c **** void letsWait(int t)
 239:../src/r_main.c **** {
 566                             		.loc 1 239 0
 567                             		; start of function
 568                             		; locals: 2 bytes
 569                             		; outgoing: 2 bytes
 570 0341 20 04                   		subw	sp, #4
 571                             	.LCFI3:
 240:../src/r_main.c **** 	int a=0;
 572                             		.loc 1 240 0
 573 0343 F6                      		clrw	ax
 574 0344 B8 02                   		movw	[sp+2], ax
 241:../src/r_main.c **** 	for(a=0;a<t;a++)
 575                             		.loc 1 241 0
 576 0346 F6                      		clrw	ax
 577 0347 B8 02                   		movw	[sp+2], ax
 578 0349 EC 5B 03 00             		br	!!.L25
 579                             	.L26:
 242:../src/r_main.c **** 	{
 243:../src/r_main.c **** 		delayNoInt(1000);
 580                             		.loc 1 243 0 discriminator 3
 581 034d 30 E8 03                		movw	ax, #1000
 582 0350 B8 00                   		movw	[sp], ax
 583 0352 FC 00 00 00             		call	!!%code(_delayNoInt)
 241:../src/r_main.c **** 	for(a=0;a<t;a++)
 584                             		.loc 1 241 0 discriminator 3
 585 0356 A8 02                   		movw	ax, [sp+2]
 586 0358 A1                      		incw	ax
 587 0359 B8 02                   		movw	[sp+2], ax
 588                             	.L25:
 241:../src/r_main.c **** 	for(a=0;a<t;a++)
 589                             		.loc 1 241 0 is_stmt 0 discriminator 1
 590 035b A8 08                   		movw	ax, [sp+8]
 591 035d BD F0                   		movw	r8, ax
 592 035f A8 02                   		movw	ax, [sp+2]
 593 0361 46 F0                   		cmpw	ax, r8
 594 0363 71 FF                   		 xor1	CY, a.7
 595 0365 71 77 F1                		 xor1	CY, r9.7
 596 0368 61 D8                   		 sknc
 597 036a EC 4D 03 00             		 br	!!.L26
 244:../src/r_main.c **** 	}
 245:../src/r_main.c **** }
 598                             		.loc 1 245 0 is_stmt 1
 599 036e 10 04                   		addw	sp, #4
 600 0370 D7                      		ret
 601                             	.LFE3:
 669                             	.Letext0:
 670                             		.file 2 "../src/r_cg_macrodriver.h"
